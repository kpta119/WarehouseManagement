// \App.jsx

import { Provider } from "react-redux";
import store from "./app/store";
import AppRouter from "./routes/AppRouter";
import "./assets/styles/global.css";

const App = () => (
  <Provider store={store}>
    <AppRouter />
  </Provider>
);

export default App;


// \index.jsx

import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./assets/styles/global.css";
import App from "./App.jsx";

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <App />
  </StrictMode>
);


// \api\categories.jsx

import apiClient from "../utils/apiClient";

export const listCategories = () => apiClient.get("/api/categories");

export const createCategory = (data) => apiClient.post("/api/categories", data);

export const updateCategory = (categoryId, data) =>
  apiClient.put(`/api/categories/${categoryId}`, data);

export const deleteCategory = (categoryId) =>
  apiClient.delete(`/api/categories/${categoryId}`);


// \api\clients.jsx

import apiClient from "../utils/apiClient";

export const listClients = () => apiClient.get("/api/clients");

export const getClientById = (clientId) =>
  apiClient.get(`/api/clients/${clientId}`);

export const createClient = (data) => apiClient.post("/api/clients", data);


// \api\dashboard.jsx

import apiClient from "../utils/apiClient";

export const getDashboardSummary = (warehouseId) =>
  apiClient.get("/api/dashboard/summary", { params: { warehouseId } });


// \api\employees.jsx

import apiClient from "../utils/apiClient";

export const listEmployees = (params) =>
  apiClient.get("/api/employees", { params });

export const getEmployeeById = (employeeId) =>
  apiClient.get(`/api/employees/${employeeId}`);

export const createEmployee = (data) => apiClient.post("/api/employees", data);


// \api\geography.jsx

import apiClient from "../utils/apiClient";

export const listRegions = () => apiClient.get("/api/regions");

export const listCountries = (regionId) =>
  apiClient.get("/api/countries", { params: { regionId } });

export const createAddress = (data) => apiClient.post("/api/addresses", data);


// \api\inventory.jsx

import apiClient from "../utils/apiClient";

export const receiveFromSupplier = (data) =>
  apiClient.post("/api/inventory/receive", data);

export const transferBetweenWarehouses = (data) =>
  apiClient.post("/api/inventory/transfer", data);

export const deliverToClient = (data) =>
  apiClient.post("/api/inventory/delivery", data);


// \api\products.jsx

import apiClient from "../utils/apiClient";

export const searchProducts = (params) =>
  apiClient.get("/api/products/search", { params });

export const getProductById = (productId) =>
  apiClient.get(`/api/products/${productId}`);

export const getLowStockProducts = (warehouseId) =>
  apiClient.get("/api/products/low-stock", { params: { warehouseId } });

export const getBestSelling = ({ warehouseId, period }) =>
  apiClient.get("/api/products/best-selling", {
    params: { warehouseId, period },
  });

export const createProduct = (data) => apiClient.post("/api/products", data);

export const updateProduct = (productId, data) =>
  apiClient.put(`/api/products/${productId}`, data);

export const deleteProduct = (productId) =>
  apiClient.delete(`/api/products/${productId}`);


// \api\suppliers.jsx

import apiClient from "../utils/apiClient";

export const listSuppliers = () => apiClient.get("/api/suppliers");

export const getSupplierById = (supplierId) =>
  apiClient.get(`/api/suppliers/${supplierId}`);

export const createSupplier = (data) => apiClient.post("/api/suppliers", data);


// \api\transactions.jsx

import apiClient from "../utils/apiClient";

export const listTransactions = (params) =>
  apiClient.get("/api/transactions", { params });

export const getTransactionById = (transactionId) =>
  apiClient.get(`/api/transactions/${transactionId}`);


// \api\warehouses.jsx

import apiClient from "../utils/apiClient";

export const listWarehouses = () => apiClient.get("/api/warehouses");

export const getWarehouseById = (warehouseId) =>
  apiClient.get(`/api/warehouses/${warehouseId}`);

export const createWarehouse = (data) =>
  apiClient.post("/api/warehouses", data);

export const updateWarehouse = (warehouseId, data) =>
  apiClient.put(`/api/warehouses/${warehouseId}`, data);

export const deleteWarehouse = (warehouseId) =>
  apiClient.delete(`/api/warehouses/${warehouseId}`);


// \app\rootReducer.jsx

import { combineReducers } from "redux";
import authReducer from "../features/auth/authSlice";
import productsReducer from "../features/products/productsSlice";
import categoriesReducer from "../features/categories/categoriesSlice";
import warehousesReducer from "../features/warehouses/warehousesSlice";
import receiveReducer from "../features/inventory/receiveSlice";
import transferReducer from "../features/inventory/transferSlice";
import deliveryReducer from "../features/inventory/deliverySlice";
import transactionsReducer from "../features/transactions/transactionsSlice";
import clientsReducer from "../features/clients/clientsSlice";
import suppliersReducer from "../features/suppliers/suppliersSlice";
import employeesReducer from "../features/employees/employeesSlice";
import summaryReducer from "../features/dashboard/summarySlice";
import selectedWarehouseReducer from "../features/selectedWarehouse/selectedWarehouseSlice";
import geographyReducer from "../features/geography/geographySlice";

export default combineReducers({
  auth: authReducer,
  products: productsReducer,
  categories: categoriesReducer,
  warehouses: warehousesReducer,
  inventory: combineReducers({
    receive: receiveReducer,
    transfer: transferReducer,
    delivery: deliveryReducer,
  }),
  transactions: transactionsReducer,
  clients: clientsReducer,
  suppliers: suppliersReducer,
  employees: employeesReducer,
  dashboard: summaryReducer,
  selectedWarehouse: selectedWarehouseReducer,
  geography: geographyReducer,
});


// \app\store.jsx

import { configureStore } from "@reduxjs/toolkit";
import rootReducer from "./rootReducer";

const store = configureStore({
  reducer: rootReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: false,
    }),
});

export default store;


// \components\categories\CategoryDetail.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useParams, Link } from "react-router-dom";
import { fetchCategories } from "../../features/categories/categoriesSlice";
import { fetchProducts } from "../../features/products/productsSlice";
import { FaChevronLeft, FaEdit } from "react-icons/fa";
import { currencyFormatter } from "../../utils/helpers";
import Spinner from "../helper/Spinner";

const CategoryDetail = () => {
  const { id } = useParams();
  const dispatch = useDispatch();
  const { list: categories, status, error } = useSelector((s) => s.categories);
  const { list: products, status: prodStatus } = useSelector((s) => s.products);
  const [productsShown, setProductsShown] = useState(25);
  useEffect(() => {
    if (status === "idle") dispatch(fetchCategories());
    dispatch(fetchProducts({ categoryId: id }));
  }, [dispatch, status]);
  const cat = categories.find((c) => String(c.categoryId) === String(id));
  if (status === "loading" || status === "idle") return <Spinner />;
  if (status === "failed") return <p className="text-red-500">Błąd: {error}</p>;
  if (!cat) return <p className="text-red-500">Nie znaleziono kategorii.</p>;
  return (
    <div className="space-y-6 max-w-lg mx-auto bg-white p-6 rounded-lg shadow">
      <div className="flex items-center justify-between">
        <Link
          to="/products"
          className="text-gray-600 hover:text-pink-500 transition duration-200"
        >
          <FaChevronLeft className="inline mr-2" /> Powrót do Kategorii
        </Link>
        <Link
          to={`/categories/${cat.categoryId}/edit`}
          className="flex items-center bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition duration-200"
        >
          <FaEdit className="mr-2" /> Edytuj Produkt
        </Link>
      </div>
      <h1 className="text-3xl font-semibold text-gray-800">{cat.name}</h1>
      <p className="text-gray-700 whitespace-pre-line">
        {cat.description || "Brak opisu."}
      </p>
      <section>
        <h2 className="text-2xl font-semibold mt-6 mb-4">
          Produkty w tej kategorii
        </h2>
        {prodStatus === "loading" ? (
          <Spinner />
        ) : products.length === 0 ? (
          <p className="text-red-500">Brak produktów w tej kategorii.</p>
        ) : (
          <>
            <ul className="divide-y divide-gray-200">
              {products.slice(0, productsShown).map((p) => (
                <li
                  key={p.productId}
                  className="p-2 hover:bg-gray-50 flex items-center justify-between transition duration-200"
                >
                  <Link
                    to={`/products/${p.productId}`}
                    className="text-pink-600 hover:underline"
                  >
                    {p.name}
                  </Link>
                  <span className="ml-2">{currencyFormatter(p.unitPrice)}</span>
                </li>
              ))}
            </ul>
            {products.length > productsShown && (
              <button
                onClick={() => setProductsShown((prev) => prev + 25)}
                className="mt-4 bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition mx-auto block duration-200"
              >
                Pokaż więcej
              </button>
            )}
          </>
        )}
      </section>
    </div>
  );
};

export default CategoryDetail;


// \components\categories\CategoryForm.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link, useNavigate, useParams } from "react-router-dom";
import {
  fetchCategories,
  createCategory,
  updateCategory,
} from "../../features/categories/categoriesSlice";
import { FaChevronLeft } from "react-icons/fa";
import Spinner from "../helper/Spinner";

const CategoryForm = () => {
  const { id } = useParams();
  const isEdit = Boolean(id);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const {
    list: categories,
    status,
    error,
  } = useSelector((state) => state.categories);
  const [form, setForm] = useState({ name: "", description: "" });
  useEffect(() => {
    if (status === "idle") {
      dispatch(fetchCategories());
    }
  }, [dispatch, status]);
  useEffect(() => {
    if (isEdit && status === "succeeded") {
      const cat = categories.find((c) => String(c.categoryId) === String(id));
      if (cat) {
        setForm({ name: cat.name, description: cat.description });
      }
    }
  }, [isEdit, status, categories, id]);
  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: value }));
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    const payload = { name: form.name, description: form.description };
    if (isEdit) {
      await dispatch(updateCategory({ id: Number(id), data: payload }));
    } else {
      await dispatch(createCategory(payload));
    }
    navigate("/categories");
  };
  if (isEdit && status === "loading") {
    return <Spinner />;
  }
  if (status === "failed") {
    return <p className="text-red-500">Błąd: {error}</p>;
  }
  if (!cat) {
    return <p className="text-red-500">Nie znaleziono kategorii.</p>;
  }
  return (
    <div className="max-w-lg mx-auto bg-white p-6 rounded-lg shadow">
      <Link
        to="/categories"
        className="flex items-center text-gray-600 hover:text-pink-500 mb-6 transition duration-200"
      >
        <FaChevronLeft className="inline mr-2" /> Powrót do Kategorii
      </Link>
      <h1 className="text-2xl font-semibold mb-4">
        {isEdit ? "Edytuj Kategorię" : "Nowa Kategoria"}
      </h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="name" className="block text-sm font-medium">
            Nazwa
          </label>
          <input
            id="name"
            name="name"
            value={form.name}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
          />
        </div>
        <div>
          <label htmlFor="description" className="block text-sm font-medium">
            Opis
          </label>
          <textarea
            id="description"
            name="description"
            value={form.description}
            onChange={handleChange}
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
          />
        </div>
        <button
          type="submit"
          className="w-full py-3 bg-pink-500 hover:bg-pink-600 text-white rounded-lg transition cursor-pointer duration-200"
        >
          {isEdit ? "Zapisz" : "Utwórz"}
        </button>
      </form>
    </div>
  );
};

export default CategoryForm;


// \components\categories\CategoryList.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link } from "react-router-dom";
import {
  fetchCategories,
  deleteCategory,
} from "../../features/categories/categoriesSlice";
import { FaTrash, FaEdit, FaEye } from "react-icons/fa";
import Pagination from "../helper/Pagination";
import TextInput from "../helper/TextInput";
import SelectInput from "../helper/SelectInput";
import Spinner from "../helper/Spinner";

const CategoryList = () => {
  const dispatch = useDispatch();
  const { list: categories, status, error } = useSelector((s) => s.categories);
  const [searchTerm, setSearchTerm] = useState("");
  const [sortOption, setSortOption] = useState("");
  const [page, setPage] = useState(1);
  const totalPages = 10;
  useEffect(() => {
    dispatch(
      fetchCategories({
        searchTerm: searchTerm || undefined,
        page: page || 1,
      })
    );
  }, [dispatch]);
  const filtered = categories
    .filter((cat) => cat.name.toLowerCase().includes(searchTerm.toLowerCase()))
    .sort((a, b) => {
      switch (sortOption) {
        case "name":
          return a.name.localeCompare(b.name);
        case "name-reverse":
          return b.name.localeCompare(a.name);
        case "description":
          return a.description.localeCompare(b.description);
        case "description-reverse":
          return b.description.localeCompare(a.description);
        default:
          return 0;
      }
    });
  const handleDelete = (id) => {
    if (window.confirm("Czy na pewno chcesz usunąć tę kategorię?")) {
      dispatch(deleteCategory(id));
    }
  };
  return (
    <>
      <form className="flex items-center space-x-2 justify-between">
        <div className="flex flex-wrap gap-4 items-end">
          <TextInput
            label="Nazwa"
            placeholder="Szukaj kategorii..."
            value={searchTerm}
            setValue={setSearchTerm}
          />
        </div>
        <SelectInput
          label="Sortowanie"
          value={sortOption}
          setValue={setSortOption}
        >
          <option value="">Sortuj przez</option>
          <option value="name">Nazwa (od A do Z)</option>
          <option value="name-reverse">Nazwa (od Z do A)</option>
          <option value="description">Opis (od A do Z)</option>
          <option value="description-reverse">Opis (od Z do A)</option>
        </SelectInput>
      </form>
      {status === "loading" || status === "idle" ? (
        <Spinner />
      ) : status === "failed" ? (
        <p className="text-red-500">Błąd: {error}</p>
      ) : filtered.length === 0 ? (
        <p className="text-red-500">Nie znaleziono kategorii</p>
      ) : (
        <>
          <Pagination
            currentPage={page}
            totalPages={totalPages}
            onPageChange={setPage}
          />
          <div className="bg-white rounded-lg shadow overflow-auto">
            <div className="hidden sm:grid grid-cols-3 gap-4 p-4 bg-gray-50 text-xs font-medium text-gray-500 uppercase tracking-wider">
              <div>Nazwa</div>
              <div>Opis</div>
              <div className="text-center">Akcje</div>
            </div>
            <div className="divide-y divide-gray-200">
              {filtered.map((cat) => (
                <div
                  key={cat.categoryId}
                  className="grid grid-cols-1 sm:grid-cols-3 items-center gap-4 p-4 hover:bg-pink-50 transition-colors duration-200"
                >
                  <div className="font-medium text-pink-600">
                    <Link
                      to={`/categories/${cat.categoryId}`}
                      className="hover:underline"
                    >
                      {cat.name}
                    </Link>
                  </div>
                  <div className="text-sm text-gray-700 truncate">
                    {cat.description}
                  </div>
                  <div className="flex justify-center space-x-4 text-gray-600">
                    <Link
                      to={`/categories/${cat.categoryId}`}
                      className="hover:text-pink-500 transition duration-200"
                    >
                      <FaEye />
                    </Link>
                    <Link
                      to={`/categories/${cat.categoryId}/edit`}
                      className="hover:text-pink-500 transition duration-200"
                    >
                      <FaEdit />
                    </Link>
                    <button
                      onClick={() => handleDelete(cat.categoryId)}
                      className="hover:text-pink-500 transition duration-200 cursor-pointer"
                    >
                      <FaTrash />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
          <Pagination
            currentPage={page}
            totalPages={totalPages}
            onPageChange={setPage}
          />
        </>
      )}
    </>
  );
};

export default CategoryList;


// \components\clients\ClientDetail.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useParams, Link } from "react-router-dom";
import { fetchClientById } from "../../features/clients/clientsSlice";
import { FaChevronLeft, FaEye } from "react-icons/fa";
import {
  currencyFormatter,
  dateFormatter,
  numberFormatter,
} from "../../utils/helpers";
import Spinner from "../helper/Spinner";

const ClientDetail = () => {
  const { id } = useParams();
  const dispatch = useDispatch();
  const { current: client, status, error } = useSelector((s) => s.clients);
  const [transactionsShown, setTransactionsShown] = useState(25);
  useEffect(() => {
    dispatch(fetchClientById(id));
  }, [dispatch, id]);
  if (status === "loading") {
    return <Spinner />;
  }
  if (status === "failed") {
    return <p className="text-red-500">Błąd: {error}</p>;
  }
  if (!client) {
    return <p className="text-red-500">Nie znaleziono klienta.</p>;
  }
  const { name, email, phoneNumber, address, history = [] } = client;
  const addr = address.street
    ? `${address.street} ${address.streetNumber}, ${address.postalCode} ${address.city}, ${address.country}`
    : address;
  return (
    <div className="space-y-6 max-w-4xl mx-auto">
      <div className="bg-white p-6 rounded-lg shadow space-y-4">
        <div>
          <Link
            to="/clients"
            className="text-gray-600 hover:text-pink-500 transition duration-200"
          >
            <FaChevronLeft className="inline-block mr-2" /> Powrót do Klientów
          </Link>
        </div>
        <h1 className="text-3xl font-semibold text-gray-800">{name}</h1>
        <p>
          <strong>E-mail:</strong> {email}
        </p>
        <p>
          <strong>Nr. telefonu:</strong> {phoneNumber}
        </p>
        <p>
          <strong>Adres:</strong> {addr}
        </p>
        <section>
          <h2 className="text-2xl font-semibold mb-4">Historia transakcji</h2>
          {history.length === 0 ? (
            <p className="text-red-500">Brak historii transakcji.</p>
          ) : (
            <>
              <div className="bg-white rounded-lg shadow overflow-auto">
                <div className="grid grid-cols-6 bg-gray-50 text-xs font-medium text-gray-500 uppercase p-2 tracking-wide">
                  <div>Data</div>
                  <div>Typ</div>
                  <div>Opis</div>
                  <div className="text-right">Ilość przedmiotów</div>
                  <div className="text-right">Łączna kwota</div>
                  <div className="text-center">Detale</div>
                </div>
                <div className="divide-y divide-gray-200">
                  {[...history]
                    .reverse()
                    .slice(0, transactionsShown)
                    .map((tx) => (
                      <div
                        key={tx.transactionId}
                        className="grid grid-cols-6 items-center p-2 text-sm text-gray-700 hover:bg-pink-50 transition-colors duration-200"
                      >
                        <div>{dateFormatter(tx.date)}</div>
                        <div>
                          {tx.type
                            .toLowerCase()
                            .replace(/_/g, " ")
                            .replace(/\b\w/g, (c) => c.toUpperCase())}
                        </div>
                        <div className="truncate">{tx.description}</div>
                        <div className="text-right">
                          {numberFormatter(tx.itemsCount)}
                        </div>
                        <div className="text-right">
                          {currencyFormatter(tx.totalPrice)}
                        </div>
                        <div className="flex justify-center text-gray-600">
                          <Link
                            to={`/transactions/${tx.transactionId}`}
                            className="hover:text-pink-500 transition duration-200"
                          >
                            <FaEye />
                          </Link>
                        </div>
                      </div>
                    ))}
                </div>
              </div>
              {history.length > transactionsShown && (
                <button
                  onClick={() => setTransactionsShown((prev) => prev + 25)}
                  className="mt-4 bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition mx-auto block"
                >
                  Pokaż więcej
                </button>
              )}
            </>
          )}
        </section>
      </div>
    </div>
  );
};

export default ClientDetail;


// \components\clients\ClientForm.jsx

import { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { createClient } from "../../features/clients/clientsSlice";
import { FaChevronLeft } from "react-icons/fa";
import { Link } from "react-router-dom";

const ClientForm = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { status, error } = useSelector((state) => state.clients);
  const [form, setForm] = useState({
    name: "",
    email: "",
    phoneNumber: "",
    address: "",
  });
  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await dispatch(createClient(form)).unwrap();
      navigate("/clients");
    } catch {}
  };
  return (
    <div className="max-w-xl mx-auto mt-6 bg-white p-8 rounded-2xl shadow-lg">
      <Link
        to="/clients"
        className="flex items-center text-gray-600 hover:text-pink-500 mb-6 transition duration-200"
      >
        <FaChevronLeft className="inline mr-2" /> Powrót do Klientów
      </Link>
      <h1 className="text-3xl font-semibold text-gray-800 mb-6">Nowy Klient</h1>
      <form onSubmit={handleSubmit} className="space-y-5">
        <div>
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Nazwa
          </label>
          <input
            id="name"
            name="name"
            value={form.name}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        <div>
          <label
            htmlFor="email"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            E-mail
          </label>
          <input
            id="email"
            name="email"
            type="email"
            value={form.email}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        <div>
          <label
            htmlFor="phoneNumber"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Nr. telefonu
          </label>
          <input
            id="phoneNumber"
            name="phoneNumber"
            type="tel"
            value={form.phoneNumber}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        <div>
          <label
            htmlFor="address"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Adres
          </label>
          <textarea
            id="address"
            name="address"
            rows={3}
            value={form.address}
            onChange={handleChange}
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        {error && <p className="text-red-500">Error: {error}</p>}
        <button
          type="submit"
          disabled={status === "loading"}
          className="w-full py-3 bg-pink-500 hover:bg-pink-600 text-white rounded-lg transition cursor-pointer duration-200"
        >
          Stwórz Klienta
        </button>
      </form>
    </div>
  );
};

export default ClientForm;


// \components\clients\ClientList.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link } from "react-router-dom";
import { fetchClients } from "../../features/clients/clientsSlice";
import { FaChevronDown, FaEye } from "react-icons/fa";
import TextInput from "../helper/TextInput";
import { fetchRegions } from "../../features/geography/geographySlice";
import SelectInput from "../helper/SelectInput";
import NumberInput from "../helper/NumberInput";
import Pagination from "../helper/Pagination";
import { numberFormatter } from "../../utils/helpers";
import Spinner from "../helper/Spinner";

const ClientList = () => {
  const dispatch = useDispatch();
  const { list: clients, status, error } = useSelector((s) => s.clients);
  const { regions } = useSelector((state) => state.geography);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedRegion, setSelectedRegion] = useState("");
  const [minTransactions, setMinTransactions] = useState("");
  const [maxTransactions, setMaxTransactions] = useState("");
  const [sortOption, setSortOption] = useState("");
  const [page, setPage] = useState(1);
  const totalPages = 10;
  const selectedWarehouse = useSelector((state) => state.selectedWarehouse);
  useEffect(() => {
    dispatch(
      fetchClients({
        name: searchTerm || undefined,
        regionId: selectedRegion || undefined,
        minTransactions: minTransactions
          ? parseInt(minTransactions)
          : undefined,
        maxTransactions: maxTransactions
          ? parseInt(maxTransactions)
          : undefined,
        warehouseId: selectedWarehouse || undefined,
        page: page || 1,
      })
    );
  }, [
    dispatch,
    searchTerm,
    selectedRegion,
    minTransactions,
    maxTransactions,
    selectedWarehouse,
    page,
  ]);
  useEffect(() => {
    dispatch(fetchRegions());
  }, [dispatch]);
  const filtered = clients
    .filter((c) => c.name.toLowerCase().includes(searchTerm.toLowerCase()))
    .sort((a, b) => {
      switch (sortOption) {
        case "name":
          return a.name.localeCompare(b.name);
        case "name-reverse":
          return b.name.localeCompare(a.name);
        case "email":
          return a.email.localeCompare(b.email);
        case "email-reverse":
          return b.email.localeCompare(a.email);
        case "phone":
          return a.phoneNumber.localeCompare(b.phoneNumber);
        case "phone-reverse":
          return b.phoneNumber.localeCompare(a.phoneNumber);
        case "address":
          return a.address.localeCompare(b.address);
        case "address-reverse":
          return b.address.localeCompare(a.address);
        case "transactions":
          return a.transactionsCount - b.transactionsCount;
        case "transactions-reverse":
          return b.transactionsCount - a.transactionsCount;
        default:
          return 0;
      }
    });
  return (
    <>
      <form className="flex justify-between items-center space-x-4">
        <div className="flex justify-between items-center space-x-4">
          <TextInput
            label="Nazwa"
            placeholder="Szukaj klientów..."
            value={searchTerm}
            setValue={setSearchTerm}
          />
          <SelectInput
            label="Region"
            value={selectedRegion}
            setValue={setSelectedRegion}
          >
            <option value="">Wszystkie Regiony</option>
            {regions.map((reg) => (
              <option key={reg.id} value={reg.id}>
                {reg.name}
              </option>
            ))}
          </SelectInput>
          <NumberInput
            label="Transakcje (min)"
            placeholder="Wybierz transakcje..."
            isMinus={true}
            value={minTransactions}
            setValue={setMinTransactions}
          />
          <NumberInput
            label="Transakcje (max)"
            placeholder="Wybierz transakcje..."
            isMinus={false}
            value={maxTransactions}
            setValue={setMaxTransactions}
          />
        </div>
        <div>
          <label className="block text-sm font-medium">Sortowanie</label>
          <div className="relative">
            <select
              className="border appearance-none border-gray-300 rounded-lg px-3 py-2 pr-12 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
              value={sortOption}
              onChange={(e) => setSortOption(e.target.value)}
            >
              <option value="">Sortuj przez</option>
              <option value="name">Nazwa (od A do Z)</option>
              <option value="name-reverse">Nazwa (od Z do A)</option>
              <option value="email">E-mail (od A do Z)</option>
              <option value="email-reverse">E-mail (od Z do A)</option>
              <option value="phone">Nr. telefonu (rosnąco)</option>
              <option value="phone-reverse">Nr. telefonu (malejąco)</option>
              <option value="address">Adres (od A do Z)</option>
              <option value="address-reverse">Adres (od Z do A)</option>
              <option value="transactions">Liczba transakcji (rosnąco)</option>
              <option value="transactions-reverse">
                Liczba transakcji (malejąco)
              </option>
            </select>
            <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          </div>
        </div>
      </form>
      {status === "loading" ? (
        <Spinner />
      ) : status === "failed" ? (
        <p className="text-red-500">Błąd: {error}</p>
      ) : filtered.length === 0 ? (
        <p className="text-red-500">Nie znaleziono klientów</p>
      ) : (
        <>
          <Pagination
            currentPage={page}
            totalPages={totalPages}
            onPageChange={setPage}
          />
          <div className="bg-white rounded-lg shadow overflow-auto">
            <div className="hidden sm:grid grid-cols-6 gap-4 p-4 bg-gray-50 text-xs font-medium text-gray-500 uppercase tracking-wider">
              <div>Nazwa</div>
              <div>E-mail</div>
              <div>Nr. telefonu</div>
              <div>Adres</div>
              <div className="text-right">Liczba transakcji</div>
              <div className="text-center">Akcje</div>
            </div>
            <div className="divide-y divide-gray-200">
              {filtered.map((c) => (
                <div
                  key={c.clientId}
                  className="grid grid-cols-1 sm:grid-cols-6 items-center gap-4 p-4 hover:bg-pink-50 transition-colors duration-200"
                >
                  <div className="font-medium text-pink-600">
                    <Link
                      to={`/clients/${c.clientId}`}
                      className="hover:underline"
                    >
                      {c.name}
                    </Link>
                  </div>
                  <div className="text-sm text-gray-700 truncate">
                    {c.email}
                  </div>
                  <div className="text-sm text-gray-700">{c.phoneNumber}</div>
                  <div className="text-sm text-gray-700">{c.address}</div>
                  <div className="text-sm text-gray-700 text-right">
                    {numberFormatter(c.transactionsCount)}
                  </div>
                  <div className="flex justify-center text-gray-600">
                    <Link
                      to={`/clients/${c.clientId}`}
                      className="hover:text-pink-500 transition duration-200"
                    >
                      <FaEye />
                    </Link>
                  </div>
                </div>
              ))}
            </div>
          </div>
          <Pagination
            currentPage={page}
            totalPages={totalPages}
            onPageChange={setPage}
          />
        </>
      )}
    </>
  );
};

export default ClientList;


// \components\Dashboard\Charts.jsx

import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from "recharts";

export default function Charts({ summary }) {
  const barData = [
    {
      name: "Miesięczne",
      Przyjęcia: summary.monthlyReceipts,
      Wydania: summary.monthlyDeliveries,
    },
  ];
  const inStock = summary.productsCount - summary.lowStockCount;
  const pieData = [
    { name: "Niski stan", value: summary.lowStockCount },
    { name: "W magazynie", value: inStock },
  ];
  const COLORS = ["#EF4444", "#10B981"];
  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-lg font-semibold mb-4">Ruchy miesięczne</h2>
        <ResponsiveContainer width="100%" height={260}>
          <BarChart data={barData}>
            <XAxis dataKey="name" tick={{ fill: "#6B7280" }} />
            <YAxis tick={{ fill: "#6B7280" }} />
            <Tooltip />
            <Legend />
            <Bar dataKey="Przyjęcia" fill="#3B82F6" />
            <Bar dataKey="Wydania" fill="#8B5CF6" />
          </BarChart>
        </ResponsiveContainer>
      </div>
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-lg font-semibold mb-4">Stan zapasów</h2>
        <ResponsiveContainer width="100%" height={260}>
          <PieChart>
            <Pie
              data={pieData}
              dataKey="value"
              nameKey="name"
              innerRadius={50}
              outerRadius={80}
              label
            >
              {pieData.map((_, idx) => (
                <Cell key={idx} fill={COLORS[idx]} />
              ))}
            </Pie>
            <Tooltip />
            <Legend verticalAlign="bottom" height={36} />
          </PieChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
}


// \components\Dashboard\SummaryTiles.jsx

import { Link } from "react-router-dom";
import {
  FaBox,
  FaTags,
  FaTruckLoading,
  FaTruckPickup,
  FaExclamationTriangle,
  FaStar,
  FaDollarSign,
  FaSyncAlt,
  FaCalendarCheck,
  FaCalendarDay,
} from "react-icons/fa";
import {
  currencyFormatter,
  dateFormatter,
  numberFormatter,
} from "../../utils/helpers";

const SummaryTiles = ({ summary }) => {
  const {
    productsCount,
    categoriesCount,
    monthlyReceipts,
    monthlyDeliveries,
    lowStockCount,
    topProduct,
    inventoryValue,
    turnoverLastWeek,
    lastReceiptDate,
    lastDeliveryDate,
    lastReceiptId,
    lastDeliveryId,
    topProductId,
  } = summary;
  const tiles = [
    {
      icon: <FaBox className="text-pink-400 w-6 h-6" />,
      label: "Produkty",
      value: numberFormatter(productsCount),
      to: "/products",
    },
    {
      icon: <FaTags className="text-pink-400 w-6 h-6" />,
      label: "Kategorie",
      value: numberFormatter(categoriesCount),
      to: "/categories",
    },
    {
      icon: <FaTruckLoading className="text-pink-400 w-6 h-6" />,
      label: "Przyjęcia (mies.)",
      value: numberFormatter(monthlyReceipts),
      to: "/inventory/receive",
    },
    {
      icon: <FaTruckPickup className="text-pink-400 w-6 h-6" />,
      label: "Wydania (mies.)",
      value: numberFormatter(monthlyDeliveries),
      to: "/inventory/delivery",
    },
    {
      icon: <FaExclamationTriangle className="text-pink-400 w-6 h-6" />,
      label: "Niski stan",
      value: numberFormatter(lowStockCount),
      to: "/products?filter=low-stock",
    },
    {
      icon: <FaStar className="text-pink-400 w-6 h-6" />,
      label: "Bestseller",
      value: topProduct,
      to: topProductId ? `/products/${topProductId}` : "/products",
    },
    {
      icon: <FaDollarSign className="text-pink-400 w-6 h-6" />,
      label: "Wartość zapasów",
      value: currencyFormatter(inventoryValue),
      to: "/warehouses",
    },
    {
      icon: <FaSyncAlt className="text-pink-400 w-6 h-6" />,
      label: "Obrót (ost. tydz.)",
      value: currencyFormatter(turnoverLastWeek),
      to: "/transactions?period=last-week",
    },
    {
      icon: <FaCalendarCheck className="text-pink-400 w-6 h-6" />,
      label: "Ostatnie przyjęcie",
      value: dateFormatter(lastReceiptDate),
      to: lastReceiptId ? `/transactions/${lastReceiptId}` : "/transactions",
    },
    {
      icon: <FaCalendarDay className="text-pink-400 w-6 h-6" />,
      label: "Ostatnie wydanie",
      value: dateFormatter(lastDeliveryDate),
      to: lastDeliveryId ? `/transactions/${lastDeliveryId}` : "/transactions",
    },
  ];
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4 cursor-pointer">
      {tiles.map(({ icon, label, value, to }) => {
        const tileContent = (
          <div className="bg-white rounded-lg shadow p-4 flex flex-col items-start hover:bg-pink-50 transition-colors">
            <div className="flex items-center mb-2">
              {icon}
              <p className="ml-2 text-sm text-gray-400">{label}</p>
            </div>
            <p className="text-2xl font-semibold text-gray-800">{value}</p>
          </div>
        );
        return to ? (
          <Link key={label} to={to}>
            {tileContent}
          </Link>
        ) : (
          <div key={label}>{tileContent}</div>
        );
      })}
    </div>
  );
};

export default SummaryTiles;


// \components\employees\EmployeeDetail.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useParams, Link } from "react-router-dom";
import { fetchEmployeeById } from "../../features/employees/employeesSlice";
import { FaChevronLeft, FaEye } from "react-icons/fa";
import {
  currencyFormatter,
  dateFormatter,
  numberFormatter,
} from "../../utils/helpers";
import Spinner from "../helper/Spinner";

const EmployeeDetail = () => {
  const { id } = useParams();
  const dispatch = useDispatch();
  const [transactionsShown, setTransactionsShown] = useState(25);
  const {
    current: employee,
    status,
    error,
  } = useSelector((state) => state.employees);
  useEffect(() => {
    dispatch(fetchEmployeeById(id));
  }, [dispatch, id]);
  if (status === "loading" || status === "idle") {
    return <Spinner />;
  }
  if (status === "failed") {
    return <p className="text-red-500">Błąd: {error}</p>;
  }
  if (!employee) {
    return <p className="text-red-500">Nie znaleziono pracownika.</p>;
  }
  const {
    name,
    surname,
    email,
    phoneNumber,
    position,
    warehouseId,
    warehouseName,
    history = [],
  } = employee;
  return (
    <div className="space-y-6 max-w-4xl mx-auto">
      <div className="bg-white p-6 rounded-lg shadow space-y-2">
        <div>
          <Link
            to="/employees"
            className="text-gray-600 hover:text-pink-500 transition duration-200"
          >
            <FaChevronLeft className="inline-block mr-2" /> Powrót do
            Pracowników
          </Link>
        </div>
        <h1 className="text-3xl font-semibold text-gray-800">
          {name} {surname}
        </h1>
        <p>
          <strong>Stanowisko:</strong> {position}
        </p>
        <p>
          <strong>Email:</strong> {email}
        </p>
        <p>
          <strong>Telefon:</strong> {phoneNumber}
        </p>
        <p>
          <strong>Magazyn:</strong>{" "}
          <Link
            to={`/warehouses/${warehouseId}`}
            className="text-pink-600 hover:underline"
          >
            {warehouseName}
          </Link>
        </p>
        <section>
          <h2 className="text-2xl font-semibold mb-4">Historia Transakcji</h2>
          {history.length === 0 ? (
            <p className="text-red-500">Brak historii transakcji.</p>
          ) : (
            <>
              <div className="bg-white rounded-lg shadow overflow-auto">
                <div className="grid grid-cols-6 bg-gray-50 text-xs font-medium text-gray-500 uppercase p-2 tracking-wide">
                  <div>Data</div>
                  <div>Typ</div>
                  <div>Opis</div>
                  <div className="text-right">Ilość przedmiotów</div>
                  <div className="text-right">Łączna kwota</div>
                  <div className="text-center">Szczegóły</div>
                </div>
                <div className="divide-y divide-gray-200">
                  {[...history]
                    .reverse()
                    .slice(0, transactionsShown)
                    .map((tx) => (
                      <div
                        key={tx.transactionId}
                        className="grid grid-cols-6 items-center p-2 text-sm text-gray-700 hover:bg-pink-50 transition-colors duration-200"
                      >
                        <div>{dateFormatter(tx.date)}</div>
                        <div>
                          {tx.type
                            .toLowerCase()
                            .replace(/_/g, " ")
                            .replace(/\b\w/g, (c) => c.toUpperCase())}
                        </div>
                        <div className="truncate">{tx.description}</div>
                        <div className="text-right">
                          {numberFormatter(tx.itemsCount)}
                        </div>
                        <div className="text-right">
                          {currencyFormatter(tx.totalPrice)}
                        </div>
                        <div className="flex justify-center text-gray-600">
                          <Link
                            to={`/transactions/${tx.transactionId}`}
                            className="hover:text-pink-500 transition duration-200"
                          >
                            <FaEye />
                          </Link>
                        </div>
                      </div>
                    ))}
                </div>
              </div>
              {history.length > transactionsShown && (
                <button
                  onClick={() => setTransactionsShown((prev) => prev + 25)}
                  className="mt-4 bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition mx-auto block"
                >
                  Pokaż więcej
                </button>
              )}
            </>
          )}
        </section>
      </div>
    </div>
  );
};

export default EmployeeDetail;


// \components\employees\EmployeeForm.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate, useParams, Link } from "react-router-dom";
import { FaChevronDown, FaChevronLeft } from "react-icons/fa";
import { createEmployee } from "../../features/employees/employeesSlice";
import { fetchWarehouses } from "../../features/warehouses/warehousesSlice";

const EmployeeForm = () => {
  const { id } = useParams();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { list: warehouses } = useSelector((state) => state.warehouses);
  const [form, setForm] = useState({
    name: "",
    surname: "",
    email: "",
    phoneNumber: "",
    position: "",
    warehouseId: "",
  });
  useEffect(() => {
    dispatch(fetchWarehouses());
  }, [dispatch, id]);
  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    const payload = {
      name: form.name,
      surname: form.surname,
      email: form.email,
      phoneNumber: form.phoneNumber,
      position: form.position,
      warehouseId: parseInt(form.warehouseId, 10),
    };
    dispatch(createEmployee(payload)).then(() => navigate("/employees"));
  };
  return (
    <div className="max-w-lg mx-auto bg-white p-6 rounded-lg shadow-lg">
      <Link
        to="/employees"
        className="flex items-center text-gray-600 hover:text-pink-500 mb-6 transition duration-200"
      >
        <FaChevronLeft className="mr-2" /> Powrót do Pracowników
      </Link>
      <h1 className="text-3xl font-semibold text-gray-800 mb-6">
        Nowy Pracownik
      </h1>
      <form onSubmit={handleSubmit} className="space-y-5">
        <div>
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Imię
          </label>
          <input
            id="name"
            name="name"
            value={form.name}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        <div>
          <label
            htmlFor="surname"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Nazwisko
          </label>
          <input
            id="surname"
            name="surname"
            value={form.surname}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        <div>
          <label
            htmlFor="email"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            E-mail
          </label>
          <input
            id="email"
            name="email"
            type="email"
            value={form.email}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        <div>
          <label
            htmlFor="phoneNumber"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Telefon
          </label>
          <input
            id="phoneNumber"
            name="phoneNumber"
            type="tel"
            value={form.phoneNumber}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        <div>
          <label
            htmlFor="position"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Stanowisko
          </label>
          <input
            id="position"
            name="position"
            value={form.position}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        <div>
          <label
            htmlFor="warehouseId"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Magazyn
          </label>
          <div className="relative">
            <select
              id="warehouseId"
              name="warehouseId"
              value={form.warehouseId}
              onChange={handleChange}
              required
              className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition appearance-none"
            >
              <option value="">Wybierz magazyn</option>
              {warehouses.map((wh) => (
                <option key={wh.warehouseId} value={wh.warehouseId}>
                  {wh.name}
                </option>
              ))}
            </select>
            <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          </div>
        </div>
        <button
          type="submit"
          className="w-full py-3 bg-pink-500 hover:bg-pink-600 text-white rounded-lg transition cursor-pointer duration-200"
        >
          Utwórz Pracownika
        </button>
      </form>
    </div>
  );
};

export default EmployeeForm;


// \components\employees\EmployeeList.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link } from "react-router-dom";
import { FaSearch, FaEye, FaChevronDown } from "react-icons/fa";
import { fetchEmployees } from "../../features/employees/employeesSlice";
import { fetchRegions } from "../../features/geography/geographySlice";
import TextInput from "../helper/TextInput";
import SelectInput from "../helper/SelectInput";
import NumberInput from "../helper/NumberInput";
import Pagination from "../helper/Pagination";
import { numberFormatter } from "../../utils/helpers";
import Spinner from "../helper/Spinner";

const EmployeeList = () => {
  const dispatch = useDispatch();
  const {
    list: employees,
    status,
    error,
  } = useSelector((state) => state.employees);
  const { regions } = useSelector((state) => state.geography);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedRegion, setSelectedRegion] = useState("");
  const [minTransactions, setMinTransactions] = useState("");
  const [maxTransactions, setMaxTransactions] = useState("");
  const [sortOption, setSortOption] = useState("");
  const [page, setPage] = useState(1);
  const totalPages = 10;
  const selectedWarehouse = useSelector((state) => state.selectedWarehouse);
  useEffect(() => {
    dispatch(
      fetchEmployees({
        name: searchTerm || undefined,
        regionId: selectedRegion || undefined,
        minTransactions: minTransactions
          ? parseInt(minTransactions)
          : undefined,
        maxTransactions: maxTransactions
          ? parseInt(maxTransactions)
          : undefined,
        warehouseId: selectedWarehouse || undefined,
        page: page || 1,
      })
    );
  }, [
    dispatch,
    searchTerm,
    selectedRegion,
    minTransactions,
    maxTransactions,
    selectedWarehouse,
    page,
  ]);
  useEffect(() => {
    dispatch(fetchRegions());
  }, [dispatch]);
  const filtered = employees
    .filter((emp) =>
      `${emp.name} ${emp.surname}`
        .toLowerCase()
        .includes(searchTerm.toLowerCase())
    )
    .sort((a, b) => {
      switch (sortOption) {
        case "name":
          return `${a.name} ${a.surname}`.localeCompare(
            `${b.name} ${b.surname}`
          );
        case "name-reverse":
          return `${b.name} ${b.surname}`.localeCompare(
            `${a.name} ${a.surname}`
          );
        case "email":
          return a.email.localeCompare(b.email);
        case "email-reverse":
          return b.email.localeCompare(a.email);
        case "phone":
          return a.phoneNumber.localeCompare(b.phoneNumber);
        case "phone-reverse":
          return b.phoneNumber.localeCompare(a.phoneNumber);
        case "positions":
          return a.position.localeCompare(b.position);
        case "positions-reverse":
          return b.position.localeCompare(a.position);
        case "warehouse":
          return a.warehouseName.localeCompare(b.warehouseName);
        case "warehouse-reverse":
          return b.warehouseName.localeCompare(a.warehouseName);
        default:
          return 0;
      }
    });
  return (
    <>
      <form className="flex justify-between items-center space-x-4">
        <div className="flex justify-between items-center space-x-4">
          <TextInput
            label="Nazwa"
            placeholder="Szukaj klientów..."
            value={searchTerm}
            setValue={setSearchTerm}
          />
          <SelectInput
            label="Region"
            value={selectedRegion}
            setValue={setSelectedRegion}
          >
            <option value="">Wszystkie Regiony</option>
            {regions.map((reg) => (
              <option key={reg.id} value={reg.id}>
                {reg.name}
              </option>
            ))}
          </SelectInput>
          <NumberInput
            label="Transakcje (min)"
            placeholder="Wybierz transakcje..."
            isMinus={true}
            value={minTransactions}
            setValue={setMinTransactions}
          />
          <NumberInput
            label="Transakcje (max)"
            placeholder="Wybierz transakcje..."
            isMinus={false}
            value={maxTransactions}
            setValue={setMaxTransactions}
          />
        </div>
        <div>
          <label className="block text-sm font-medium">Sortowanie</label>
          <div className="relative">
            <select
              className="border appearance-none border-gray-300 rounded-lg px-3 py-2 pr-12 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
              value={sortOption}
              onChange={(e) => setSortOption(e.target.value)}
            >
              <option value="">Sortuj przez</option>
              <option value="name">Imię i Nazwisko (od A do Z)</option>
              <option value="name-reverse">Imię i Nazwisko (od Z do A)</option>
              <option value="email">E-mail (od A do Z)</option>
              <option value="email-reverse">E-mail (od Z do A)</option>
              <option value="phone">Nr. telefonu (rosnąco)</option>
              <option value="phone-reverse">Nr. telefonu (malejąco)</option>
              <option value="positions">Stanowisko (od A do Z)</option>
              <option value="positions-reverse">Stanowisko (od Z do A)</option>
              <option value="warehouse">Magazyn (od A do Z)</option>
              <option value="warehouse-reverse">Magazyn (od Z do A)</option>
            </select>
            <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          </div>
        </div>
      </form>
      {status === "loading" || status === "idle" ? (
        <Spinner />
      ) : status === "failed" ? (
        <p className="text-red-500">Błąd: {error}</p>
      ) : filtered.length === 0 ? (
        <p className="text-red-500">Nie znaleziono pracowników</p>
      ) : (
        <>
          <Pagination
            currentPage={page}
            totalPages={totalPages}
            onPageChange={setPage}
          />
          <div className="bg-white rounded-lg shadow overflow-auto">
            <div className="hidden sm:grid grid-cols-7 gap-4 p-4 bg-gray-50 text-xs font-medium text-gray-500 uppercase tracking-wider">
              <div>Imię i Nazwisko</div>
              <div>E-mail</div>
              <div>Nr. telefonu</div>
              <div>Stanowisko</div>
              <div>Magazyn</div>
              <div className="text-right">Liczba transakcji</div>
              <div className="text-center">Akcje</div>
            </div>
            <div className="divide-y divide-gray-200">
              {filtered.map((emp) => (
                <div
                  key={emp.employeeId}
                  className="grid grid-cols-1 sm:grid-cols-7 items-center gap-4 p-4 hover:bg-pink-50 transition-colors duration-200"
                >
                  <div className="font-medium text-pink-600">
                    <Link
                      to={`/employees/${emp.employeeId}`}
                      className="hover:underline"
                    >
                      {emp.name} {emp.surname}
                    </Link>
                  </div>
                  <div className="text-sm text-gray-700 truncate">
                    {emp.email}
                  </div>
                  <div className="text-sm text-gray-700">{emp.phoneNumber}</div>
                  <div className="text-sm text-gray-700">{emp.position}</div>
                  <div className="text-sm text-gray-700">
                    {emp.warehouseName}
                  </div>
                  <div className="text-sm text-gray-700 text-right">
                    {numberFormatter(emp.transactionsCount)}
                  </div>
                  <div className="flex justify-center text-gray-600">
                    <Link
                      to={`/employees/${emp.employeeId}`}
                      className="hover:text-pink-500 transition duration-200"
                    >
                      <FaEye />
                    </Link>
                  </div>
                </div>
              ))}
            </div>
          </div>
          <Pagination
            currentPage={page}
            totalPages={totalPages}
            onPageChange={setPage}
          />
        </>
      )}
    </>
  );
};

export default EmployeeList;


// \components\geography\CountryList.jsx

import { useEffect } from "react";
import { fetchCountries } from "../../features/geography/geographySlice";
import { useDispatch, useSelector } from "react-redux";
import Spinner from "../helper/Spinner";

const CountryList = ({ regionId, regionName }) => {
  const dispatch = useDispatch();
  const { countries, status, error } = useSelector((state) => state.geography);
  useEffect(() => {
    if (regionId) {
      dispatch(fetchCountries(regionId));
    }
  }, [dispatch, regionId]);
  return status === "loading" || status === "idle" ? (
    <Spinner />
  ) : status === "failed" ? (
    <p className="text-red-500">Error: {error}</p>
  ) : (
    <div className="bg-white p-6 rounded-lg shadow">
      <h2 className="text-xl font-semibold mb-4">
        Kraje {regionId ? `— wybrano region ${regionName}` : ""}
      </h2>
      {!regionId ? (
        <p className="text-gray-500">Wybierz region, aby zobaczyć kraje.</p>
      ) : countries.length > 0 ? (
        <ul className="space-y-2">
          {countries.map((c) => (
            <li
              key={c.id}
              className="px-4 py-2 border border-gray-200 rounded-lg hover:bg-gray-100 transition duration-200"
            >
              {c.name}
            </li>
          ))}
        </ul>
      ) : (
        <p className="text-red-500">Brak krajów w tym regionie.</p>
      )}
    </div>
  );
};

export default CountryList;


// \components\geography\RegionList.jsx

import { useEffect } from "react";
import { fetchRegions } from "../../features/geography/geographySlice";
import { useDispatch, useSelector } from "react-redux";
import Spinner from "../helper/Spinner";

const RegionList = ({ selectedRegion, onSelect }) => {
  const dispatch = useDispatch();
  const { regions, status, error } = useSelector((state) => state.geography);
  useEffect(() => {
    dispatch(fetchRegions());
  }, [dispatch]);
  return status === "loading" || status === "idle" ? (
    <Spinner />
  ) : status === "failed" ? (
    <p className="text-red-500">Error: {error}</p>
  ) : (
    <div className="bg-white p-6 rounded-lg shadow">
      <h2 className="text-xl font-semibold mb-4">Regiony</h2>
      <ul className="space-y-2">
        {regions.map((r) => (
          <li
            key={r.id}
            className={`px-4 py-2 border border-gray-200 rounded-lg transition cursor-pointer
            ${
              selectedRegion.id === r.id
                ? "bg-pink-100 text-pink-800"
                : "hover:bg-gray-100 transition duration-200"
            }`}
            onClick={() => onSelect({ id: r.id, name: r.name })}
          >
            <button
              className={`
                w-full text-left rounded-lg cursor-pointer
              `}
            >
              {r.name}
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default RegionList;


// \components\helper\DateInput.jsx

const DateInput = ({ label, value, setValue }) => (
  <div>
    <label className="block text-sm font-medium">{label}</label>
    <input
      type="date"
      name="fromDate"
      value={value}
      onChange={setValue}
      className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
    />
  </div>
);

export default DateInput;


// \components\helper\NumberInput.jsx

import { FaMinus, FaPlus } from "react-icons/fa";

const NumberInput = ({ label, placeholder, isMinus, value, setValue }) => (
  <div>
    <label className="block text-sm font-medium">{label}</label>
    <div className="flex border border-gray-300 rounded-lg items-center px-3 py-2 focus-within:ring-1 focus-within:ring-pink-500 focus-within:border-pink-500 transition-colors duration-300">
      {isMinus ? (
        <FaMinus className="text-gray-500 mr-2" />
      ) : (
        <FaPlus className="text-gray-500 mr-2" />
      )}
      <input
        type="number"
        min="0"
        placeholder={placeholder}
        className="w-full focus:outline-none"
        value={value}
        onChange={(e) => setValue(e.target.value)}
      />
    </div>
  </div>
);

export default NumberInput;


// \components\helper\Pagination.jsx

const Pagination = ({ currentPage, totalPages, onPageChange }) => {
  return totalPages > 1 ? (
    <div className="flex justify-left gap-8 items-center mt-4">
      <button
        onClick={() => onPageChange((p) => Math.max(p - 1, 1))}
        disabled={currentPage === 1}
        className="bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition disabled:opacity-50 disabled:cursor-not-allowed cursor-pointer"
      >
        Poprzednia
      </button>
      <span>
        Strona {currentPage} z {totalPages}
      </span>
      <button
        onClick={() => onPageChange((p) => p + 1)}
        disabled={currentPage >= totalPages}
        className="bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition disabled:opacity-50 disabled:cursor-not-allowed cursor-pointer"
      >
        Następna
      </button>
    </div>
  ) : null;
};

export default Pagination;


// \components\helper\SelectInput.jsx

import { FaChevronDown } from "react-icons/fa";

const SelectInput = ({ children, label, value, setValue }) => (
  <div>
    <label className="block text-sm font-medium">{label}</label>
    <div className="relative">
      <select
        className="border border-gray-300 rounded-lg px-3 py-2 pr-12 appearance-none focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
        value={value}
        onChange={(e) => setValue(e.target.value)}
      >
        {children}
      </select>
      <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
    </div>
  </div>
);

export default SelectInput;


// \components\helper\Spinner.jsx

const Spinner = () => (
  <div className="flex justify-center items-center">
    <div className="animate-spin h-8 w-8 border-4 border-pink-500 border-t-transparent rounded-full" />
  </div>
);

export default Spinner;


// \components\helper\TextInput.jsx

import { FaSearch } from "react-icons/fa";

const TextInput = ({ label, placeholder, value, setValue }) => (
  <div>
    <label className="block text-sm font-medium">{label}</label>
    <div className="flex border-gray-300 items-center border rounded-lg px-3 py-2 focus-within:ring-1 focus-within:ring-pink-500 focus-within:border-pink-500 transition-colors duration-300">
      <FaSearch className="text-gray-500 mr-2" />
      <input
        type="text"
        placeholder={placeholder}
        className="focus:outline-none"
        value={value}
        onChange={(e) => setValue(e.target.value)}
      />
    </div>
  </div>
);

export default TextInput;


// \components\inventory\DeliveryPage.jsx

import { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchWarehouses } from "../../features/warehouses/warehousesSlice";
import { deliverInventory } from "../../features/inventory/deliverySlice";
import { fetchProducts } from "../../features/products/productsSlice";
import { fetchClients } from "../../features/clients/clientsSlice";
import { fetchEmployees } from "../../features/employees/employeesSlice";
import { FaChevronDown, FaPlus, FaTrash, FaTruck } from "react-icons/fa";

const DeliveryPage = () => {
  const dispatch = useDispatch();
  const { list: warehouses } = useSelector((s) => s.warehouses);
  const { list: clients } = useSelector((s) => s.clients);
  const { list: products } = useSelector((s) => s.products);
  const { list: employees } = useSelector((s) => s.employees);
  const { status, error, transaction } = useSelector(
    (s) => s.inventory.delivery
  );
  const [form, setForm] = useState({
    warehouseId: "",
    clientId: "",
    employeeId: "",
    items: [{ productId: "", quantity: "" }],
  });
  useEffect(() => {
    dispatch(fetchWarehouses());
    dispatch(fetchClients());
    dispatch(fetchProducts());
  }, [dispatch]);
  useEffect(() => {
    dispatch(
      fetchEmployees({
        warehouseId: form.warehouseId ? Number(form.warehouseId) : undefined,
      })
    );
  }, [dispatch, form.warehouseId]);
  const handleAddRow = () =>
    setForm((f) => ({
      ...f,
      items: [...f.items, { productId: "", quantity: "" }],
    }));
  const handleRemoveRow = (idx) =>
    setForm((f) => ({
      ...f,
      items: f.items.filter((_, i) => i !== idx),
    }));
  const handleItemChange = (idx, field, value) => {
    const items = [...form.items];
    items[idx][field] = value;
    setForm((f) => ({ ...f, items }));
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    const itemsPayload = {};
    form.items.forEach(({ productId, quantity }) => {
      if (productId && quantity) {
        itemsPayload[productId] = Number(quantity);
      }
    });
    dispatch(
      deliverInventory({
        warehouseId: Number(form.warehouseId),
        clientId: Number(form.clientId),
        items: itemsPayload,
      })
    );
  };
  return (
    <div className="max-w-3xl mx-auto space-y-6">
      <div className="flex items-center space-x-2">
        <FaTruck className="text-pink-500 w-6 h-6" />
        <h1 className="text-2xl font-semibold text-gray-800">Wydanie towaru</h1>
      </div>
      <form
        onSubmit={handleSubmit}
        className="bg-white p-6 rounded-lg shadow space-y-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Magazyn</label>
            <div className="relative">
              <select
                required
                value={form.warehouseId}
                onChange={(e) =>
                  setForm((f) => ({ ...f, warehouseId: e.target.value }))
                }
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
              >
                <option value="">Wybierz magazyn</option>
                {warehouses.map((w) => (
                  <option key={w.warehouseId} value={w.warehouseId}>
                    {w.name}
                  </option>
                ))}
              </select>
              <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Klient</label>
            <div className="relative">
              <select
                required
                value={form.clientId}
                onChange={(e) =>
                  setForm((f) => ({ ...f, clientId: e.target.value }))
                }
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
              >
                <option value="">Wybierz klienta</option>
                {clients.map((c) => (
                  <option key={c.clientId} value={c.clientId}>
                    {c.name}
                  </option>
                ))}
              </select>
              <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Pracownik</label>
            <div className="relative">
              <select
                required
                value={form.employeeId}
                onChange={(e) =>
                  setForm((f) => ({ ...f, employeeId: e.target.value }))
                }
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
              >
                <option value="">Wybierz pracownika</option>
                {employees.map((e) => (
                  <option key={e.employeeId} value={e.employeeId}>
                    {e.name} {e.surname}
                  </option>
                ))}
              </select>
              <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            </div>
          </div>
        </div>
        <div className="space-y-3">
          <label className="text-sm font-medium">Produkty oraz ich ilość</label>
          {form.items.map((item, idx) => (
            <div key={idx} className="grid grid-cols-5 gap-2 items-end">
              <div className="col-span-3">
                <div className="relative">
                  <select
                    required
                    value={item.productId}
                    onChange={(e) =>
                      handleItemChange(idx, "productId", e.target.value)
                    }
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
                  >
                    <option value="">Wybierz produkt</option>
                    {products.map((p) => (
                      <option key={p.productId} value={p.productId}>
                        {p.name}
                      </option>
                    ))}
                  </select>
                  <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                </div>
              </div>
              <div>
                <input
                  type="number"
                  min="1"
                  required
                  placeholder="Ilość"
                  value={item.quantity}
                  onChange={(e) =>
                    handleItemChange(idx, "quantity", e.target.value)
                  }
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
                />
              </div>
              <button
                type="button"
                onClick={() => handleRemoveRow(idx)}
                className="flex justify-center items-center text-red-500 hover:text-red-700 h-full cursor-pointer transition duration-200"
              >
                <FaTrash />
              </button>
            </div>
          ))}
          <button
            type="button"
            onClick={handleAddRow}
            className="flex items-center text-pink-600 hover:text-pink-800 mt-4 transition duration-200"
          >
            <FaPlus className="mr-1" /> Dodaj następny produkt
          </button>
        </div>
        <div className="pt-4 border-t">
          {error && <p className="text-red-500 mb-2">Error: {error}</p>}
          {status === "succeeded" && (
            <p className="text-green-600 mb-2">
              Delivered successfully! Transaction ID:{" "}
              {transaction?.transactionId}
            </p>
          )}
          <button
            type="submit"
            disabled={status === "loading"}
            className="w-full py-3 bg-pink-500 hover:bg-pink-600 text-white rounded-lg transition disabled:opacity-50 duration-200"
          >
            Wydaj produkt
          </button>
        </div>
      </form>
    </div>
  );
};

export default DeliveryPage;


// \components\inventory\ReceivePage.jsx

import { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchWarehouses } from "../../features/warehouses/warehousesSlice";
import { fetchSuppliers } from "../../features/suppliers/suppliersSlice";
import { receiveInventory } from "../../features/inventory/receiveSlice";
import { fetchProducts } from "../../features/products/productsSlice";
import { fetchEmployees } from "../../features/employees/employeesSlice";
import { FaChevronDown, FaPlus, FaTrash, FaTruck } from "react-icons/fa";

const ReceivePage = () => {
  const dispatch = useDispatch();
  const { list: warehouses } = useSelector((s) => s.warehouses);
  const { list: suppliers } = useSelector((s) => s.suppliers);
  const { list: products } = useSelector((s) => s.products);
  const { list: employees } = useSelector((s) => s.employees);
  const { status, error, transaction } = useSelector(
    (s) => s.inventory.receive
  );
  const [form, setForm] = useState({
    warehouseId: "",
    supplierId: "",
    employeeId: "",
    items: [{ productId: "", quantity: "" }],
  });
  useEffect(() => {
    dispatch(fetchWarehouses());
    dispatch(fetchSuppliers());
    dispatch(fetchProducts());
  }, [dispatch]);
  useEffect(() => {
    dispatch(
      fetchEmployees({
        warehouseId: form.warehouseId ? Number(form.warehouseId) : undefined,
      })
    );
  }, [dispatch, form.warehouseId]);
  const handleAddRow = () =>
    setForm((f) => ({
      ...f,
      items: [...f.items, { productId: "", quantity: "" }],
    }));
  const handleRemoveRow = (idx) =>
    setForm((f) => ({
      ...f,
      items: f.items.filter((_, i) => i !== idx),
    }));
  const handleItemChange = (idx, field, value) => {
    const items = [...form.items];
    items[idx][field] = value;
    setForm((f) => ({ ...f, items }));
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    const itemsPayload = {};
    form.items.forEach(({ productId, quantity }) => {
      if (productId && quantity) {
        itemsPayload[productId] = Number(quantity);
      }
    });
    dispatch(
      receiveInventory({
        warehouseId: Number(form.warehouseId),
        supplierId: Number(form.supplierId),
        items: itemsPayload,
      })
    );
  };
  return (
    <div className="max-w-3xl mx-auto space-y-6">
      <div className="flex items-center space-x-2">
        <FaTruck className="text-pink-500 w-6 h-6" />
        <h1 className="text-2xl font-semibold text-gray-800">
          Przyjęcie towaru
        </h1>
      </div>
      <form
        onSubmit={handleSubmit}
        className="bg-white p-6 rounded-lg shadow space-y-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Magazyn</label>
            <div className="relative">
              <select
                required
                value={form.warehouseId}
                onChange={(e) =>
                  setForm((f) => ({ ...f, warehouseId: e.target.value }))
                }
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
              >
                <option value="">Wybierz magazyn</option>
                {warehouses.map((w) => (
                  <option key={w.warehouseId} value={w.warehouseId}>
                    {w.name}
                  </option>
                ))}
              </select>
              <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Dostawca</label>
            <div className="relative">
              <select
                required
                value={form.supplierId}
                onChange={(e) =>
                  setForm((f) => ({ ...f, supplierId: e.target.value }))
                }
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
              >
                <option value="">Wybierz dostawce</option>
                {suppliers.map((s) => (
                  <option key={s.supplierId} value={s.supplierId}>
                    {s.name}
                  </option>
                ))}
              </select>
              <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Pracownik</label>
            <div className="relative">
              <select
                required
                value={form.employeeId}
                onChange={(e) =>
                  setForm((f) => ({ ...f, employeeId: e.target.value }))
                }
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
              >
                <option value="">Wybierz pracownika</option>
                {employees.map((e) => (
                  <option key={e.employeeId} value={e.employeeId}>
                    {e.name} {e.surname}
                  </option>
                ))}
              </select>
              <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            </div>
          </div>
        </div>
        <div className="space-y-3">
          <label className="text-sm font-medium">Produkty oraz ich ilość</label>
          {form.items.map((item, idx) => (
            <div key={idx} className="grid grid-cols-5 gap-2 items-end">
              <div className="col-span-3">
                <div className="relative">
                  <select
                    required
                    value={item.productId}
                    onChange={(e) =>
                      handleItemChange(idx, "productId", e.target.value)
                    }
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
                  >
                    <option value="">Wybierz produkt</option>
                    {products.map((p) => (
                      <option key={p.productId} value={p.productId}>
                        {p.name}
                      </option>
                    ))}
                  </select>
                  <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                </div>
              </div>
              <div>
                <input
                  type="number"
                  min="1"
                  required
                  placeholder="Ilość"
                  value={item.quantity}
                  onChange={(e) =>
                    handleItemChange(idx, "quantity", e.target.value)
                  }
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
                />
              </div>
              <button
                type="button"
                onClick={() => handleRemoveRow(idx)}
                className="flex justify-center items-center text-red-500 hover:text-red-700 h-full cursor-pointer transition duration-200"
              >
                <FaTrash />
              </button>
            </div>
          ))}
          <button
            type="button"
            onClick={handleAddRow}
            className="flex items-center text-pink-600 hover:text-pink-800 mt-4 transtion duration-200"
          >
            <FaPlus className="mr-1" /> Dodaj następny produkt
          </button>
        </div>
        <div className="pt-4 border-t">
          {error && <p className="text-red-500 mb-2">Error: {error}</p>}
          {status === "succeeded" && (
            <p className="text-green-600 mb-2">
              Received successfully! Transaction ID:{" "}
              {transaction?.transactionId}
            </p>
          )}
          <button
            type="submit"
            disabled={status === "loading"}
            className="w-full py-3 bg-pink-500 hover:bg-pink-600 text-white rounded-lg transition disabled:opacity-50 duration-200"
          >
            Przyjmij towar
          </button>
        </div>
      </form>
    </div>
  );
};

export default ReceivePage;


// \components\inventory\TransferPage.jsx

import { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchWarehouses } from "../../features/warehouses/warehousesSlice";
import { transferInventory } from "../../features/inventory/transferSlice";
import { fetchProducts } from "../../features/products/productsSlice";
import { fetchEmployees } from "../../features/employees/employeesSlice";
import { FaChevronDown, FaExchangeAlt, FaPlus, FaTrash } from "react-icons/fa";

const TransferPage = () => {
  const dispatch = useDispatch();
  const { list: warehouses } = useSelector((s) => s.warehouses);
  const { list: products } = useSelector((s) => s.products);
  const { list: employees } = useSelector((s) => s.employees);
  const { status, error, transaction } = useSelector(
    (s) => s.inventory.transfer
  );
  const [form, setForm] = useState({
    fromWarehouseId: "",
    toWarehouseId: "",
    employeeId: "",
    items: [{ productId: "", quantity: "" }],
  });
  useEffect(() => {
    dispatch(fetchWarehouses());
    dispatch(fetchProducts());
  }, [dispatch]);
  useEffect(() => {
    dispatch(
      fetchEmployees({
        warehouseId: form.toWarehouseId
          ? Number(form.toWarehouseId)
          : undefined,
      })
    );
  }, [dispatch, form.toWarehouseId]);
  const handleAddRow = () =>
    setForm((f) => ({
      ...f,
      items: [...f.items, { productId: "", quantity: "" }],
    }));
  const handleRemoveRow = (idx) =>
    setForm((f) => ({
      ...f,
      items: f.items.filter((_, i) => i !== idx),
    }));
  const handleItemChange = (idx, field, value) => {
    const items = [...form.items];
    items[idx][field] = value;
    setForm((f) => ({ ...f, items }));
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    const itemsPayload = {};
    form.items.forEach(({ productId, quantity }) => {
      if (productId && quantity) {
        itemsPayload[productId] = Number(quantity);
      }
    });
    dispatch(
      transferInventory({
        fromWarehouseId: Number(form.fromWarehouseId),
        toWarehouseId: Number(form.toWarehouseId),
        items: itemsPayload,
      })
    );
  };
  return (
    <div className="max-w-3xl mx-auto space-y-6">
      <div className="flex items-center space-x-2">
        <FaExchangeAlt className="text-pink-500 w-6 h-6" />
        <h1 className="text-2xl font-semibold text-gray-800">
          Przeniesienie towaru
        </h1>
      </div>
      <form
        onSubmit={handleSubmit}
        className="bg-white p-6 rounded-lg shadow space-y-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Z magazynu</label>
            <div className="relative">
              <select
                required
                value={form.fromWarehouseId}
                onChange={(e) =>
                  setForm((f) => ({ ...f, fromWarehouseId: e.target.value }))
                }
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
              >
                <option value="">Wybierz magazyn</option>
                {warehouses.map((w) => (
                  <option key={w.warehouseId} value={w.warehouseId}>
                    {w.name}
                  </option>
                ))}
              </select>
              <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">
              Do magazynu
            </label>
            <div className="relative">
              <select
                required
                value={form.toWarehouseId}
                onChange={(e) =>
                  setForm((f) => ({ ...f, toWarehouseId: e.target.value }))
                }
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
              >
                <option value="">Wybierz magazyn</option>
                {warehouses.map((w) => (
                  <option key={w.warehouseId} value={w.warehouseId}>
                    {w.name}
                  </option>
                ))}
              </select>
              <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Pracownik</label>
            <div className="relative">
              <select
                required
                value={form.employeeId}
                onChange={(e) =>
                  setForm((f) => ({ ...f, employeeId: e.target.value }))
                }
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
              >
                <option value="">Wybierz pracownika</option>
                {employees.map((e) => (
                  <option key={e.employeeId} value={e.employeeId}>
                    {e.name} {e.surname}
                  </option>
                ))}
              </select>
              <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            </div>
          </div>
        </div>
        <div className="space-y-3">
          <label className="text-sm font-medium">Produkty oraz ich ilość</label>
          {form.items.map((item, idx) => (
            <div key={idx} className="grid grid-cols-5 gap-2 items-end">
              <div className="col-span-3">
                <div className="relative">
                  <select
                    required
                    value={item.productId}
                    onChange={(e) =>
                      handleItemChange(idx, "productId", e.target.value)
                    }
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
                  >
                    <option value="">Wybierz produkt</option>
                    {products.map((p) => (
                      <option key={p.productId} value={p.productId}>
                        {p.name}
                      </option>
                    ))}
                  </select>
                  <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                </div>
              </div>
              <div>
                <input
                  type="number"
                  min="1"
                  required
                  placeholder="Ilość"
                  value={item.quantity}
                  onChange={(e) =>
                    handleItemChange(idx, "quantity", e.target.value)
                  }
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
                />
              </div>
              <button
                type="button"
                onClick={() => handleRemoveRow(idx)}
                className="flex justify-center items-center text-red-500 hover:text-red-700 h-full cursor-pointer transition duration-200"
              >
                <FaTrash />
              </button>
            </div>
          ))}
          <button
            type="button"
            onClick={handleAddRow}
            className="flex items-center text-pink-600 hover:text-pink-800 mt-4 transition duration-200"
          >
            <FaPlus className="mr-1" /> Dodaj następny produkt
          </button>
        </div>
        <div className="pt-4 border-t">
          {error && <p className="text-red-500 mb-2">Error: {error}</p>}
          {status === "succeeded" && (
            <p className="text-green-600 mb-2">
              Transferred successfully! Transaction ID:{" "}
              {transaction?.transactionId}
            </p>
          )}
          <button
            type="submit"
            disabled={status === "loading"}
            className="w-full py-3 bg-pink-500 hover:bg-pink-600 text-white rounded-lg transition disabled:opacity-50 duration-200"
          >
            Przenieś towar
          </button>
        </div>
      </form>
    </div>
  );
};

export default TransferPage;


// \components\Layout\DefaultRedirect.jsx

import { useSelector } from "react-redux";
import { Navigate } from "react-router-dom";

const DefaultRedirect = () => {
  const loggedIn = useSelector((state) => state.auth.loggedIn);
  return loggedIn ? (
    <Navigate to="/" replace />
  ) : (
    <Navigate to="/login" replace />
  );
};

export default DefaultRedirect;


// \components\Layout\Layout.jsx

import Sidebar from "./Sidebar";
import Navbar from "./Navbar";

const Layout = ({ children }) => (
  <div className="flex">
    <Sidebar />
    <div className="flex-1 ml-64">
      <Navbar />
      <main className="p-6">{children}</main>
    </div>
  </div>
);

export default Layout;


// \components\Layout\Navbar.jsx

import { useDispatch, useSelector } from "react-redux";
import { useLocation, useNavigate } from "react-router-dom";
import { logout } from "../../features/auth/authSlice";
import { fetchWarehouses } from "../../features/warehouses/warehousesSlice";
import { setSelectedWarehouse } from "../../features/selectedWarehouse/selectedWarehouseSlice";
import { FaChevronDown, FaSignOutAlt } from "react-icons/fa";
import { useEffect } from "react";

const titles = {
  "/": "Panel główny",
  "/products": "Produkty",
  "/products/new": "Nowy produkt",
  "/categories": "Kategorie",
  "/warehouses": "Magazyny",
  "/warehouses/new": "Nowy magazyn",
  "/inventory/receive": "Przyjęcie",
  "/inventory/transfer": "Przeniesienie",
  "/inventory/delivery": "Wydanie",
  "/transactions": "Transakcje",
  "/clients": "Klienci",
  "/clients/new": "Nowy klient",
  "/suppliers": "Dostawcy",
  "/suppliers/new": "Nowy dostawca",
  "/employees": "Pracownicy",
  "/employees/new": "Nowy pracownik",
  "/geography": "Geografia",
};

export default function Navbar() {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { pathname } = useLocation();
  const { list: warehouses } = useSelector((s) => s.warehouses);
  const selectedWarehouse = useSelector((s) => s.selectedWarehouse);
  useEffect(() => {
    dispatch(fetchWarehouses());
  }, [dispatch]);
  const handleLogout = () => {
    dispatch(logout());
    navigate("/login");
  };
  const title =
    titles[pathname] ||
    pathname
      .split("/")
      .filter(Boolean)
      .join(" ")
      .replace(/\b\w/g, (c) => c.toUpperCase());
  return (
    <header className="flex items-center justify-between bg-white shadow p-4">
      <div className="flex items-center">
        <h1 className="text-2xl font-semibold text-gray-800">{title}</h1>
      </div>
      {[
        "/products",
        "/",
        "/transactions",
        "/employees",
        "/suppliers",
        "/clients",
      ].includes(pathname) && (
        <div className="relative mx-4">
          <select
            className="
            block
            appearance-none
            w-80
            bg-white
            border border-gray-300
            text-gray-700
            py-2 px-3 pr-8
            rounded-md
            leading-tight
            focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500
            transition-colors duration-300
          "
            value={selectedWarehouse ?? ""}
            onChange={(e) => {
              const val = e.target.value;
              dispatch(setSelectedWarehouse(val === "" ? null : Number(val)));
            }}
          >
            <option value="">Wszystkie Magazyny</option>
            {warehouses.map((w) => (
              <option key={w.warehouseId} value={w.warehouseId}>
                {w.name}
              </option>
            ))}
          </select>
          <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
        </div>
      )}
      <div className="flex items-center">
        <button
          className="flex items-center text-gray-600 hover:text-pink-800 transition-colors duration-300 cursor-pointer"
          onClick={handleLogout}
        >
          <FaSignOutAlt className="mr-2" />
          Wyloguj Się
        </button>
      </div>
    </header>
  );
}


// \components\Layout\ProtectedRoute.jsx

import { Navigate } from "react-router-dom";
import { useSelector } from "react-redux";

const ProtectedRoute = ({ children }) => {
  const loggedIn = useSelector((state) => state.auth.loggedIn);
  return loggedIn ? children : <Navigate to="/login" />;
};

export default ProtectedRoute;


// \components\Layout\Sidebar.jsx

import Logo from "../../assets/images/logo.png";
import SidebarLink from "./SidebarLink";
import { AiOutlineHome } from "react-icons/ai";
import {
  FaBoxOpen,
  FaTags,
  FaWarehouse,
  FaTruck,
  FaExchangeAlt,
  FaClipboardList,
  FaUsers,
  FaUserTie,
  FaUserFriends,
  FaGlobe,
} from "react-icons/fa";

export default function Sidebar() {
  return (
    <aside className="w-64 h-screen bg-white shadow-lg p-4 fixed">
      <nav className="flex flex-col space-y-2">
        <div className="flex items-center mb-4">
          <img src={Logo} alt="Logo" className="h-10 w-10 rounded-full mr-2" />
          <span className="text-xl font-bold">BD2 gr. 03</span>
        </div>
        <SidebarLink to="/" end icon={AiOutlineHome} label="Panel główny" />
        <SidebarLink to="/products" icon={FaBoxOpen} label="Produkty" />
        <SidebarLink to="/categories" icon={FaTags} label="Kategorie" />
        <SidebarLink to="/warehouses" icon={FaWarehouse} label="Magazyny" />
        <SidebarLink
          to="/transactions"
          icon={FaClipboardList}
          label="Transakcje"
        />
        <SidebarLink to="/clients" icon={FaUsers} label="Klienci" />
        <SidebarLink to="/suppliers" icon={FaUserTie} label="Dostawcy" />
        <SidebarLink to="/employees" icon={FaUserFriends} label="Pracownicy" />
        <SidebarLink to="/geography" icon={FaGlobe} label="Geografia" />
        <div className="mt-4 border-t pt-4">
          <p className="text-xs uppercase text-gray-500 px-2 mb-2">Magazyn</p>
          <SidebarLink
            to="/inventory/receive"
            icon={FaTruck}
            label="Przyjęcie"
          />
          <SidebarLink
            to="/inventory/transfer"
            icon={FaExchangeAlt}
            label="Przeniesienie"
          />
          <SidebarLink
            to="/inventory/delivery"
            icon={FaTruck}
            label="Wydanie"
          />
        </div>
      </nav>
    </aside>
  );
}


// \components\Layout\SidebarLink.jsx

import { NavLink } from "react-router-dom";

const SidebarLink = ({ to, icon: Icon, label }) => {
  return (
    <NavLink
      to={to}
      className={({ isActive }) => `
        flex items-center p-2
        border-2 rounded-lg
        transition-colors duration-300 ${
          isActive
            ? "bg-pink-100 text-pink-800 border-pink-300"
            : "text-gray-600 border-transparent hover:bg-pink-100 hover:text-pink-800 hover:border-pink-300"
        }`}
    >
      <Icon className="mr-4 text-xl" />
      {label}
    </NavLink>
  );
};

export default SidebarLink;


// \components\products\ProductDetail.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useParams, Link } from "react-router-dom";
import { fetchProductById } from "../../features/products/productsSlice";
import { format } from "date-fns";
import { FaEdit, FaChevronLeft, FaEye } from "react-icons/fa";
import {
  currencyFormatter,
  dateFormatter,
  numberFormatter,
} from "../../utils/helpers";
import Spinner from "../helper/Spinner";

const ProductDetail = () => {
  const { id } = useParams();
  const dispatch = useDispatch();
  const {
    current: product,
    status,
    error,
  } = useSelector((state) => state.products);
  const [transactionsShown, setTransactionsShown] = useState(25);
  useEffect(() => {
    dispatch(fetchProductById(id));
  }, [dispatch, id]);
  if (status === "loading" || status === "idle") {
    return <Spinner />;
  }
  if (status === "failed") {
    return <p className="text-red-500">Błąd: {error}</p>;
  }
  if (!product) {
    return <p className="text-red-500">Nie znaleziono produktu.</p>;
  }
  const {
    name,
    description,
    unitPrice,
    unitSize,
    categoryName,
    categoryId,
    inventory,
    transactions,
  } = product;
  return (
    <div className="max-w-4xl mx-auto bg-white p-6 rounded-lg shadow space-y-6">
      <div className="flex items-center justify-between">
        <Link
          to="/products"
          className="text-gray-600 hover:text-pink-500 transition duration-200"
        >
          <FaChevronLeft className="inline mr-2" /> Powrót do Produktów
        </Link>
        <Link
          to={`/products/${id}/edit`}
          className="flex items-center bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition duration-200"
        >
          <FaEdit className="mr-2" /> Edytuj Produkt
        </Link>
      </div>
      <h1 className="text-3xl font-semibold text-gray-800">{name}</h1>
      <p className="text-gray-700 whitespace-pre-line">{description}</p>
      <p>
        <strong>Kategoria: </strong>
        <Link
          className="hover:underline text-pink-500"
          to={`/categories/${categoryId}`}
        >
          {categoryName}
        </Link>
      </p>
      <p>
        <strong>Jednostkowa Cena: </strong>
        {currencyFormatter(unitPrice)}
      </p>
      <p>
        <strong>Jednostkowy Rozmiar: </strong>
        {numberFormatter(unitSize)}
      </p>
      {inventory && Object.keys(inventory).length > 0 && (
        <div>
          <h2 className="text-xl font-semibold mb-2">Zasoby na Magazyn</h2>
          <div className="grid grid-cols-2 bg-gray-50 text-xs font-medium text-gray-500 uppercase p-2 rounded-t-lg">
            <div>ID Magazynu</div>
            <div className="text-right">Ilość</div>
          </div>
          <div className="divide-y divide-gray-200">
            {Object.entries(inventory).map(([warehouseId, qty]) => (
              <div
                key={warehouseId}
                className="grid grid-cols-2 p-2 text-sm text-gray-700"
              >
                <div className="text-pink-600">
                  <Link
                    to={`/warehouses/${warehouseId}`}
                    className="hover:underline"
                  >
                    {warehouseId}
                  </Link>
                </div>
                <div className="text-right">{numberFormatter(qty)}</div>
              </div>
            ))}
          </div>
        </div>
      )}
      {transactions.length === 0 ? (
        <p className="text-red-500">Brak transakcji.</p>
      ) : (
        <div>
          <h2 className="text-xl font-semibold mb-2">Ostatnie Transakcje</h2>
          <div className="grid grid-cols-7 bg-gray-50 text-xs font-medium text-gray-500 uppercase p-2 rounded-t-lg">
            <div>Data</div>
            <div>Przez pracownika</div>
            <div>Typ</div>
            <div className="text-right">Ilość</div>
            <div className="text-right">Cena (szt.)</div>
            <div className="text-right">Łącznie</div>
            <div className="text-center">Detale</div>
          </div>
          <div className="divide-y divide-gray-200">
            {[...transactions]
              .reverse()
              .slice(0, transactionsShown)
              .map((tx) => (
                <div
                  key={tx.transactionId}
                  className="grid grid-cols-7 items-center p-2 text-sm text-gray-700"
                >
                  <div>{dateFormatter(tx.date)}</div>
                  <Link
                    to={`/employees/${tx.employeeId}`}
                    className="text-pink-500 hover:underline"
                  >
                    {tx.employeeName}
                  </Link>
                  <div>
                    {tx.type
                      .toLowerCase()
                      .replace(/_/g, " ")
                      .replace(/\b\w/g, (c) => c.toUpperCase())}
                  </div>
                  <div className="text-right">
                    {numberFormatter(tx.quantity)}
                  </div>
                  <div className="text-right">
                    {currencyFormatter(tx.price)}
                  </div>
                  <div className="text-right">
                    {currencyFormatter(tx.price * tx.quantity)}
                  </div>
                  <div className="flex justify-center text-gray-600">
                    <Link
                      to={`/transactions/${tx.transactionId}`}
                      className="hover:text-pink-500 transition duration-200"
                    >
                      <FaEye />
                    </Link>
                  </div>
                </div>
              ))}
          </div>
          {transactions.length > transactionsShown && (
            <button
              onClick={() => setTransactionsShown((prev) => prev + 25)}
              className="mt-4 bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition mx-auto block duration-200"
            >
              Pokaż więcej
            </button>
          )}
        </div>
      )}
    </div>
  );
};

export default ProductDetail;


// \components\products\ProductForm.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link, useNavigate, useParams } from "react-router-dom";
import {
  fetchProductById,
  createProduct,
  updateProduct,
} from "../../features/products/productsSlice";
import { fetchCategories } from "../../features/categories/categoriesSlice";
import { FaChevronDown, FaChevronLeft } from "react-icons/fa";
import Spinner from "../helper/Spinner";

const ProductForm = () => {
  const { id } = useParams();
  const isEdit = Boolean(id);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const {
    current: product,
    status: prodStatus,
    error: prodError,
  } = useSelector((state) => state.products);
  const { list: categories } = useSelector((state) => state.categories);
  const [form, setForm] = useState({
    name: "",
    description: "",
    unitPrice: "",
    unitSize: "",
    categoryId: "",
  });
  useEffect(() => {
    dispatch(fetchCategories());
    if (isEdit) dispatch(fetchProductById(id));
  }, [dispatch, id, isEdit]);
  useEffect(() => {
    if (isEdit && product) {
      setForm({
        name: product.name || "",
        description: product.description || "",
        unitPrice: product.unitPrice?.toString() || "",
        unitSize: product.unitSize?.toString() || "",
        categoryId: product.categoryId?.toString() || "",
      });
    }
  }, [product, isEdit]);
  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: value }));
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    const payload = {
      ...form,
      unitPrice: parseFloat(form.unitPrice),
      unitSize: parseFloat(form.unitSize),
      categoryId: parseInt(form.categoryId, 10),
    };
    if (isEdit) {
      dispatch(updateProduct({ id: parseInt(id, 10), data: payload })).then(
        () => navigate("/products")
      );
    } else {
      dispatch(createProduct(payload)).then(() => navigate("/products"));
    }
  };
  if ((isEdit && prodStatus === "loading") || prodStatus === "idle") {
    return <Spinner />;
  }
  if (prodStatus === "failed") {
    return <p className="text-red-500">Błąd: {prodError}</p>;
  }
  if (isEdit && !product) {
    return <p className="text-red-500">Nie znaleziono produktu.</p>;
  }
  return (
    <div className="max-w-lg mx-auto bg-white p-6 rounded-lg shadow">
      <Link
        to="/products"
        className="flex items-center text-gray-600 hover:text-pink-500 mb-6 transition duration-200"
      >
        <FaChevronLeft className="inline mr-2" /> Powrót do Produktów
      </Link>
      <h1 className="text-2xl font-semibold mb-4">
        {isEdit ? "Edytuj Produkt" : "Nowy Produkt"}
      </h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="name" className="block text-sm font-medium">
            Nazwa
          </label>
          <input
            id="name"
            name="name"
            value={form.name}
            onChange={handleChange}
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
            required
          />
        </div>
        <div>
          <label htmlFor="description" className="block text-sm font-medium">
            Opis
          </label>
          <textarea
            id="description"
            name="description"
            value={form.description}
            onChange={handleChange}
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
          />
        </div>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label htmlFor="unitPrice" className="block text-sm font-medium">
              Cena jednostkowa
            </label>
            <input
              id="unitPrice"
              name="unitPrice"
              type="number"
              step="0.01"
              value={form.unitPrice}
              onChange={handleChange}
              className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
              required
            />
          </div>
          <div>
            <label htmlFor="unitSize" className="block text-sm font-medium">
              Rozmiar jednostkowy
            </label>
            <input
              id="unitSize"
              name="unitSize"
              type="number"
              step="0.01"
              value={form.unitSize}
              onChange={handleChange}
              className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
              required
            />
          </div>
        </div>
        <div>
          <label htmlFor="categoryId" className="block text-sm font-medium">
            Kategoria
          </label>
          <div className="relative">
            <select
              id="categoryId"
              name="categoryId"
              value={form.categoryId}
              onChange={handleChange}
              className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
              required
            >
              <option value="">Wybierz kategorię</option>
              {categories.map((cat) => (
                <option key={cat.categoryId} value={cat.categoryId}>
                  {cat.name}
                </option>
              ))}
            </select>
            <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          </div>
        </div>
        {prodError && <p className="text-red-500">{prodError}</p>}
        <button
          type="submit"
          className="w-full py-3 bg-pink-500 hover:bg-pink-600 text-white rounded-lg transition cursor-pointer duration-200"
        >
          {isEdit ? "Aktualizuj Produkt" : "Stwórz Produkt"}
        </button>
      </form>
    </div>
  );
};

export default ProductForm;


// \components\products\ProductList.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link } from "react-router-dom";
import {
  fetchProducts,
  deleteProduct,
} from "../../features/products/productsSlice";
import { fetchCategories } from "../../features/categories/categoriesSlice";
import { FaEye, FaTrash, FaEdit } from "react-icons/fa";
import { currencyFormatter, numberFormatter } from "../../utils/helpers";
import Pagination from "../helper/Pagination";
import NumberInput from "../helper/NumberInput";
import TextInput from "../helper/TextInput";
import SelectInput from "../helper/SelectInput";
import Spinner from "../helper/Spinner";

const ProductList = () => {
  const dispatch = useDispatch();
  const {
    list: products,
    status,
    error,
  } = useSelector((state) => state.products);
  const { list: categories } = useSelector((state) => state.categories);
  const selectedWarehouse = useSelector((state) => state.selectedWarehouse);
  const [searchTerm, setSearchTerm] = useState("");
  const [categoryFilter, setCategoryFilter] = useState("");
  const [minPrice, setMinPrice] = useState("");
  const [maxPrice, setMaxPrice] = useState("");
  const [minSize, setMinSize] = useState("");
  const [maxSize, setMaxSize] = useState("");
  const [minInventory, setMinInventory] = useState("");
  const [maxInventory, setMaxInventory] = useState("");
  const [minTransactions, setMinTransactions] = useState("");
  const [maxTransactions, setMaxTransactions] = useState("");
  const [page, setPage] = useState(1);
  const [sortOption, setSortOption] = useState("");
  useEffect(() => {
    dispatch(fetchCategories());
  }, [dispatch]);
  useEffect(() => {
    dispatch(
      fetchProducts({
        name: searchTerm || undefined,
        categoryId: categoryFilter || undefined,
        minPrice: minPrice ? parseFloat(minPrice) : undefined,
        maxPrice: maxPrice ? parseFloat(maxPrice) : undefined,
        minSize: minSize ? parseFloat(minSize) : undefined,
        maxSize: maxSize ? parseFloat(maxSize) : undefined,
        warehouseId: selectedWarehouse || undefined,
        minInventory: minInventory ? parseInt(minInventory) : undefined,
        maxInventory: maxInventory ? parseInt(maxInventory) : undefined,
        minTransactions: minTransactions
          ? parseInt(minTransactions)
          : undefined,
        maxTransactions: maxTransactions
          ? parseInt(maxTransactions)
          : undefined,
        page: page || 1,
      })
    );
  }, [
    dispatch,
    searchTerm,
    categoryFilter,
    selectedWarehouse,
    minPrice,
    maxPrice,
    minSize,
    maxSize,
    minInventory,
    maxInventory,
    minTransactions,
    maxTransactions,
    page,
  ]);
  const filtered = products
    .filter((p) => p.name.toLowerCase().includes(searchTerm.toLowerCase()))
    .sort((a, b) => {
      switch (sortOption) {
        case "name":
          return a.name.localeCompare(b.name);
        case "name-reverse":
          return b.name.localeCompare(a.name);
        case "description":
          return a.description.localeCompare(b.description);
        case "description-reverse":
          return b.description.localeCompare(a.description);
        case "category":
          return a.categoryName.localeCompare(b.categoryName);
        case "category-reverse":
          return b.categoryName.localeCompare(a.categoryName);
        case "price":
          return a.unitPrice - b.unitPrice;
        case "price-reverse":
          return b.unitPrice - a.unitPrice;
        case "size":
          return a.unitSize - b.unitSize;
        case "size-reverse":
          return b.unitSize - a.unitSize;
        case "inventory":
          return a.inventoryCount - b.inventoryCount;
        case "inventory-reverse":
          return b.inventoryCount - a.inventoryCount;
        case "transactions":
          return a.transactionCount - b.transactionCount;
        case "transactions-reverse":
          return b.transactionCount - a.transactionCount;
        default:
          return 0;
      }
    });
  const handleDelete = (id) => {
    if (window.confirm("Are you sure you want to delete this product?")) {
      dispatch(deleteProduct(id));
    }
  };
  const totalPages = 10;
  return (
    <>
      <form className="flex space-x-4 justify-between">
        <div className="flex flex-wrap gap-4 items-end">
          <TextInput
            label="Nazwa"
            placeholder="Wyszukaj po nazwie..."
            value={searchTerm}
            setValue={setSearchTerm}
          />
          <SelectInput
            label="Kategoria"
            value={categoryFilter}
            setValue={setCategoryFilter}
          >
            <option value="">Wszystkie Kategorie</option>
            {categories.map((cat) => (
              <option key={cat.categoryId} value={cat.categoryId}>
                {cat.name}
              </option>
            ))}
          </SelectInput>

          <NumberInput
            label="Cena (min)"
            placeholder="Wybierz cenę..."
            isMinus={true}
            value={minPrice}
            setValue={setMinPrice}
          />
          <NumberInput
            label="Cena (max)"
            placeholder="Wybierz cenę..."
            isMinus={false}
            value={maxPrice}
            setValue={setMaxPrice}
          />
          <NumberInput
            label="Wielkość (min)"
            placeholder="Wybierz wielkość..."
            isMinus={true}
            value={minSize}
            setValue={setMinSize}
          />
          <NumberInput
            label="Wielkość (max)"
            placeholder="Wybierz wielkość..."
            isMinus={false}
            value={maxSize}
            setValue={setMaxSize}
          />
          <NumberInput
            label="Stan (min)"
            placeholder="Wybierz stan..."
            isMinus={true}
            value={minInventory}
            setValue={setMinInventory}
          />
          <NumberInput
            label="Stan (max)"
            placeholder="Wybierz stan..."
            isMinus={false}
            value={maxInventory}
            setValue={setMaxInventory}
          />
          <NumberInput
            label="Transakcje (min)"
            placeholder="Wybierz transakcje..."
            isMinus={true}
            value={minTransactions}
            setValue={setMinTransactions}
          />
          <NumberInput
            label="Transakcje (max)"
            placeholder="Wybierz transakcje..."
            isMinus={false}
            value={maxTransactions}
            setValue={setMaxTransactions}
          />
        </div>
        <SelectInput
          label="Sortowanie"
          value={sortOption}
          setValue={setSortOption}
        >
          <option value="">Sortuj przez</option>
          <option value="name">Nazwa (od A do Z)</option>
          <option value="name-reverse">Nazwa (od Z do A)</option>
          <option value="capacity">Pojemność (rosnąco)</option>
          <option value="capacity-reverse">Pojemność (malejąco)</option>
          <option value="occupied">Zajęte (rosnąco)</option>
          <option value="occupied-reverse">Zajęte (malejąco)</option>
          <option value="address">Adres (od A do Z)</option>
          <option value="address-reverse">Adres (od Z do A)</option>
          <option value="employees">Pracownicy (rosnąco)</option>
          <option value="employees-reverse">Pracownicy (malejąco)</option>
          <option value="products">Produkty (rosnąco)</option>
          <option value="products-reverse">Produkty (malejąco)</option>
          <option value="transactions">Transakcje (rosnąco)</option>
          <option value="transactions-reverse">Transakcje (malejąco)</option>
        </SelectInput>
      </form>
      {status === "loading" || status === "idle" ? (
        <Spinner />
      ) : status === "failed" ? (
        <p className="text-red-500">Błąd: {error}</p>
      ) : filtered.length === 0 ? (
        <p className="text-red-500">Nie znaleziono produktu</p>
      ) : (
        <>
          <Pagination
            currentPage={page}
            totalPages={totalPages}
            onPageChange={setPage}
          />
          <div className="bg-white rounded-lg shadow overflow-auto">
            <div className="hidden sm:grid grid-cols-8 gap-4 p-4 bg-gray-50 text-xs font-medium text-gray-500 uppercase tracking-wider">
              <div>Nazwa</div>
              <div>Opis</div>
              <div>Kategoria</div>
              <div className="text-right">Cena</div>
              <div className="text-right">Wielkość</div>
              <div className="text-right">Stan</div>
              <div className="text-right">Transakcje</div>
              <div className="text-center">Akcje</div>
            </div>
            <div className="divide-y divide-gray-200">
              {filtered.map((product) => (
                <div
                  key={product.productId}
                  className="grid grid-cols-1 sm:grid-cols-8 items-center gap-4 p-4 hover:bg-pink-50 transition-colors duration-200"
                >
                  <div>
                    <Link
                      to={`/products/${product.productId}`}
                      className="text-pink-600 hover:underline font-medium"
                    >
                      {product.name}
                    </Link>
                  </div>
                  <div className="text-sm text-gray-700 truncate">
                    {product.description}
                  </div>
                  <div className="text-sm text-gray-700">
                    {product.categoryName}
                  </div>
                  <div className="text-sm text-gray-700 text-right">
                    {currencyFormatter(product.unitPrice)}
                  </div>
                  <div className="text-sm text-gray-700 text-right">
                    {numberFormatter(product.unitSize)}
                  </div>
                  <div className="text-sm text-gray-700 flex items-center justify-end gap-4">
                    {product.inventoryCount < 5 && (
                      <div className="bg-orange-500 px-4 rounded text-white">
                        Niski Stan!
                      </div>
                    )}
                    {numberFormatter(product.inventoryCount)}
                  </div>
                  <div className="text-sm text-gray-700 flex items-center justify-end gap-4">
                    {product.productId < 3 && (
                      <div className="bg-green-500 px-4 rounded text-white">
                        Bestseller!
                      </div>
                    )}
                    {numberFormatter(product.transactionCount)}
                  </div>
                  <div className="flex justify-center space-x-4 text-gray-600">
                    <Link
                      to={`/products/${product.productId}`}
                      className="hover:text-pink-500 transition duration-200"
                    >
                      <FaEye />
                    </Link>
                    <Link
                      to={`/products/${product.productId}/edit`}
                      className="hover:text-pink-500 transition duration-200"
                    >
                      <FaEdit />
                    </Link>
                    <button
                      onClick={() => handleDelete(product.productId)}
                      className="hover:text-pink-500 transition duration-200 cursor-pointer"
                    >
                      <FaTrash />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
          <Pagination
            currentPage={page}
            totalPages={totalPages}
            onPageChange={setPage}
          />
        </>
      )}
    </>
  );
};

export default ProductList;


// \components\suppliers\SupplierDetail.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useParams, Link } from "react-router-dom";
import { fetchSupplierById } from "../../features/suppliers/suppliersSlice";
import { FaChevronLeft, FaEye } from "react-icons/fa";
import {
  currencyFormatter,
  dateFormatter,
  numberFormatter,
} from "../../utils/helpers";
import Spinner from "../helper/Spinner";

const SupplierDetail = () => {
  const { id } = useParams();
  const dispatch = useDispatch();
  const [transactionsShown, setTransactionsShown] = useState(25);
  const {
    current: supplier,
    status,
    error,
  } = useSelector((state) => state.suppliers);
  useEffect(() => {
    dispatch(fetchSupplierById(id));
  }, [dispatch, id]);
  if (status === "loading" || status === "idle") {
    return <Spinner />;
  }
  if (status === "failed") {
    return <p className="text-red-500">Błąd: {error}</p>;
  }
  if (!supplier) {
    return <p className="text-red-500">Nie znaleziono dostawcy.</p>;
  }
  const { name, email, phoneNumber, address, history = [] } = supplier;
  const addr = address.street
    ? `${address.street} ${address.streetNumber}, ${address.postalCode} ${address.city}, ${address.country}`
    : address;
  return (
    <div className="space-y-6 max-w-4xl mx-auto">
      <div className="bg-white p-6 rounded-lg shadow space-y-4">
        <div>
          <Link
            to="/suppliers"
            className="text-gray-600 hover:text-pink-500 transition duration-200"
          >
            <FaChevronLeft className="inline-block mr-2" /> Wróć do Dostawców
          </Link>
        </div>
        <h1 className="text-3xl font-semibold text-gray-800">{name}</h1>
        <p>
          <strong>E-mail:</strong> {email}
        </p>
        <p>
          <strong>Nr. telefonu:</strong> {phoneNumber}
        </p>
        <p>
          <strong>Adres:</strong> {addr}
        </p>
        <section>
          <h2 className="text-2xl font-semibold mb-4">Historia transakcji</h2>
          {history.length === 0 ? (
            <p className="text-red-500">Brak historii transakcji.</p>
          ) : (
            <>
              <div className="bg-white rounded-lg shadow overflow-auto">
                <div className="grid grid-cols-6 bg-gray-50 text-xs font-medium text-gray-500 uppercase p-2 tracking-wide">
                  <div>Data</div>
                  <div>Typ</div>
                  <div>Opis</div>
                  <div className="text-right">Ilość przedmiotów</div>
                  <div className="text-right">Łączna kwota</div>
                  <div className="text-center">Szczegóły</div>
                </div>
                <div className="divide-y divide-gray-200">
                  {[...history]
                    .reverse()
                    .slice(0, transactionsShown)
                    .map((tx) => (
                      <div
                        key={tx.transactionId}
                        className="grid grid-cols-6 items-center p-2 text-sm text-gray-700 hover:bg-pink-50 transition-colors duration-200"
                      >
                        <div>{dateFormatter(tx.date)}</div>
                        <div>
                          {tx.type
                            .toLowerCase()
                            .replace(/_/g, " ")
                            .replace(/\b\w/g, (c) => c.toUpperCase())}
                        </div>
                        <div className="truncate">{tx.description}</div>
                        <div className="text-right">
                          {numberFormatter(tx.itemsCount)}
                        </div>
                        <div className="text-right">
                          {currencyFormatter(tx.totalPrice)}
                        </div>
                        <div className="flex justify-center text-gray-600">
                          <Link
                            to={`/transactions/${tx.transactionId}`}
                            className="hover:text-pink-500 transition duration-200"
                          >
                            <FaEye />
                          </Link>
                        </div>
                      </div>
                    ))}
                </div>
              </div>
              {history.length > transactionsShown && (
                <button
                  onClick={() => setTransactionsShown((prev) => prev + 25)}
                  className="mt-4 bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition mx-auto block"
                >
                  Pokaż więcej
                </button>
              )}
            </>
          )}
        </section>
      </div>
    </div>
  );
};

export default SupplierDetail;


// \components\suppliers\SupplierForm.jsx

import { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate, Link } from "react-router-dom";
import { FaChevronDown, FaChevronLeft } from "react-icons/fa";
import { createSupplier } from "../../features/suppliers/suppliersSlice";
import {
  fetchRegions,
  fetchCountries,
} from "../../features/geography/geographySlice";

const SupplierForm = () => {
  const dispatch = useDispatch();
  const { regions, countries } = useSelector((state) => state.geography);
  const navigate = useNavigate();
  const [form, setForm] = useState({
    name: "",
    email: "",
    phoneNumber: "",
    regionId: "",
    countryId: "",
    city: "",
    postalCode: "",
    street: "",
    streetNumber: "",
  });
  useEffect(() => {
    dispatch(fetchRegions());
  }, [dispatch]);
  useEffect(() => {
    if (form.regionId) {
      dispatch(fetchCountries(form.regionId));
    } else {
      dispatch(fetchCountries(null));
    }
  }, [dispatch, form.regionId]);
  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    const payload = {
      name: form.name,
      email: form.email,
      phoneNumber: form.phoneNumber,
      address: {
        street: form.street,
        streetNumber: form.streetNumber,
        postalCode: form.postalCode,
        city: form.city,
        countryId: Number(form.countryId),
        regionId: Number(form.regionId),
      },
    };
    dispatch(createSupplier(payload)).then(() => navigate("/suppliers"));
  };
  return (
    <div className="max-w-lg mx-auto bg-white p-6 rounded-lg shadow-lg">
      <Link
        to="/suppliers"
        className="flex items-center text-gray-600 hover:text-pink-500 mb-6 transition duration-200"
      >
        <FaChevronLeft className="inline mr-2" /> Powrót do Dostawców
      </Link>
      <h1 className="text-3xl font-semibold text-gray-800 mb-6">
        Nowy Dostawca
      </h1>
      <form onSubmit={handleSubmit} className="space-y-5">
        <div>
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Nazwa
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={form.name}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        <div>
          <label
            htmlFor="email"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            E-mail
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={form.email}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        <div>
          <label
            htmlFor="phoneNumber"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Nr. telefonu
          </label>
          <input
            type="tel"
            id="phoneNumber"
            name="phoneNumber"
            value={form.phoneNumber}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        <div>
          <label
            htmlFor="regionId"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Region
          </label>
          <div className="relative">
            <select
              id="regionId"
              name="regionId"
              value={form.regionId}
              onChange={handleChange}
              required
              className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition appearance-none"
            >
              <option value="">Wybierz region</option>
              {regions.map((r) => (
                <option key={r.id} value={r.id}>
                  {r.name}
                </option>
              ))}
            </select>
            <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          </div>
        </div>
        <div>
          <label
            htmlFor="countryId"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Kraj
          </label>
          <div className="relative">
            <select
              id="countryId"
              name="countryId"
              value={form.countryId}
              onChange={handleChange}
              required
              disabled={!form.regionId}
              className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition appearance-none"
            >
              <option value="">Wybierz region, a potem kraj</option>
              {countries.map((c) => (
                <option key={c.id} value={c.id}>
                  {c.name}
                </option>
              ))}
            </select>
            <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          </div>
        </div>
        <div>
          <label
            htmlFor="city"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Miasto
          </label>
          <input
            type="text"
            id="city"
            name="city"
            value={form.city}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        <div>
          <label
            htmlFor="postalCode"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Kod pocztowy
          </label>
          <input
            type="text"
            id="postalCode"
            name="postalCode"
            value={form.postalCode}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        <div>
          <label
            htmlFor="street"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Ulica
          </label>
          <input
            type="text"
            id="street"
            name="street"
            value={form.street}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        <div>
          <label
            htmlFor="streetNumber"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Numer domu
          </label>
          <input
            type="text"
            id="streetNumber"
            name="streetNumber"
            value={form.streetNumber}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 transition"
          />
        </div>
        <button
          type="submit"
          className="w-full py-3 bg-pink-500 hover:bg-pink-600 text-white rounded-lg transition cursor-pointer duration-200"
        >
          Stwórz dostawcę
        </button>
      </form>
    </div>
  );
};

export default SupplierForm;


// \components\suppliers\SupplierList.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link } from "react-router-dom";
import { fetchSuppliers } from "../../features/suppliers/suppliersSlice";
import { FaEye, FaChevronDown } from "react-icons/fa";
import TextInput from "../helper/TextInput";
import SelectInput from "../helper/SelectInput";
import NumberInput from "../helper/NumberInput";
import { fetchRegions } from "../../features/geography/geographySlice";
import Pagination from "../helper/Pagination";
import { numberFormatter } from "../../utils/helpers";
import Spinner from "../helper/Spinner";

const SupplierList = () => {
  const dispatch = useDispatch();
  const {
    list: suppliers,
    status,
    error,
  } = useSelector((state) => state.suppliers);
  const { regions } = useSelector((state) => state.geography);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedRegion, setSelectedRegion] = useState("");
  const [minTransactions, setMinTransactions] = useState("");
  const [maxTransactions, setMaxTransactions] = useState("");
  const [sortOption, setSortOption] = useState("");
  const [page, setPage] = useState(1);
  const totalPages = 10;
  const selectedWarehouse = useSelector((state) => state.selectedWarehouse);
  useEffect(() => {
    dispatch(
      fetchSuppliers({
        name: searchTerm || undefined,
        regionId: selectedRegion || undefined,
        minTransactions: minTransactions
          ? parseInt(minTransactions)
          : undefined,
        maxTransactions: maxTransactions
          ? parseInt(maxTransactions)
          : undefined,
        warehouseId: selectedWarehouse || undefined,
        page: page || 1,
      })
    );
  }, [
    dispatch,
    searchTerm,
    selectedRegion,
    minTransactions,
    maxTransactions,
    selectedWarehouse,
    page,
  ]);
  useEffect(() => {
    dispatch(fetchRegions());
  }, [dispatch]);
  const filtered = suppliers
    .filter((s) => s.name.toLowerCase().includes(searchTerm.toLowerCase()))
    .sort((a, b) => {
      switch (sortOption) {
        case "name":
          return a.name.localeCompare(b.name);
        case "name-reverse":
          return b.name.localeCompare(a.name);
        case "email":
          return a.email.localeCompare(b.email);
        case "email-reverse":
          return b.email.localeCompare(a.email);
        case "phone":
          return a.phoneNumber.localeCompare(b.phoneNumber);
        case "phone-reverse":
          return b.phoneNumber.localeCompare(a.phoneNumber);
        case "address":
          return a.address.localeCompare(b.address);
        case "address-reverse":
          return b.address.localeCompare(a.address);
        case "transactions":
          return a.transactionsCount - b.transactionsCount;
        case "transactions-reverse":
          return b.transactionsCount - a.transactionsCount;
        default:
          return 0;
      }
    });
  return (
    <>
      <form className="flex justify-between items-center space-x-4">
        <div className="flex justify-between items-center space-x-4">
          <TextInput
            label="Nazwa"
            placeholder="Szukaj klientów..."
            value={searchTerm}
            setValue={setSearchTerm}
          />
          <SelectInput
            label="Region"
            value={selectedRegion}
            setValue={setSelectedRegion}
          >
            <option value="">Wszystkie Regiony</option>
            {regions.map((reg) => (
              <option key={reg.id} value={reg.id}>
                {reg.name}
              </option>
            ))}
          </SelectInput>
          <NumberInput
            label="Transakcje (min)"
            placeholder="Wybierz transakcje..."
            isMinus={true}
            value={minTransactions}
            setValue={setMinTransactions}
          />
          <NumberInput
            label="Transakcje (max)"
            placeholder="Wybierz transakcje..."
            isMinus={false}
            value={maxTransactions}
            setValue={setMaxTransactions}
          />
        </div>
        <div>
          <label className="block text-sm font-medium">Sortowanie</label>
          <div className="relative">
            <select
              className="border appearance-none border-gray-300 rounded-lg px-3 py-2 pr-12 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
              value={sortOption}
              onChange={(e) => setSortOption(e.target.value)}
            >
              <option value="">Sortuj przez</option>
              <option value="name">Nazwa (od A do Z)</option>
              <option value="name-reverse">Nazwa (od Z do A)</option>
              <option value="email">E-mail (od A do Z)</option>
              <option value="email-reverse">E-mail (od Z do A)</option>
              <option value="phone">Nr. telefonu (rosnąco)</option>
              <option value="phone-reverse">Nr. telefonu (malejąco)</option>
              <option value="address">Adres (od A do Z)</option>
              <option value="address-reverse">Adres (od Z do A)</option>
              <option value="transactions">Liczba transakcji (rosnąco)</option>
              <option value="transactions-reverse">
                Liczba transakcji (malejąco)
              </option>
            </select>
            <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          </div>
        </div>
      </form>
      {status === "loading" || status === "idle" ? (
        <Spinner />
      ) : status === "failed" ? (
        <p className="text-red-500">Błąd: {error}</p>
      ) : filtered.length === 0 ? (
        <p className="text-red-500">Nie znaleziono dostawcy</p>
      ) : (
        <>
          <Pagination
            currentPage={page}
            totalPages={totalPages}
            onPageChange={setPage}
          />
          <div className="bg-white rounded-lg shadow overflow-auto">
            <div className="hidden sm:grid grid-cols-6 gap-4 p-4 bg-gray-50 text-xs font-medium text-gray-500 uppercase tracking-wider">
              <div>Nazwa</div>
              <div>E-mail</div>
              <div>Nr. telefonu</div>
              <div>Adres</div>
              <div className="text-right">Liczba transakcji</div>
              <div className="text-center">Akcje</div>
            </div>
            <div className="divide-y divide-gray-200">
              {filtered.map((sup) => (
                <div
                  key={sup.supplierId}
                  className="grid grid-cols-1 sm:grid-cols-6 items-center gap-4 p-4 hover:bg-pink-50 transition-colors duration-200"
                >
                  <div className="font-medium text-pink-600">
                    <Link
                      to={`/suppliers/${sup.supplierId}`}
                      className="hover:underline"
                    >
                      {sup.name}
                    </Link>
                  </div>
                  <div className="text-sm text-gray-700">{sup.email}</div>
                  <div className="text-sm text-gray-700">{sup.phoneNumber}</div>
                  <div className="text-sm text-gray-700">
                    {typeof sup.address === "string"
                      ? sup.address
                      : `${sup.address.street} ${sup.address.streetNumber}, ${sup.address.postalCode} ${sup.address.city}, ${sup.address.country}`}
                  </div>
                  <div className="text-sm text-gray-700 text-right">
                    {numberFormatter(sup.transactionsCount)}
                  </div>
                  <div className="flex justify-center text-gray-600">
                    <Link
                      to={`/suppliers/${sup.supplierId}`}
                      className="hover:text-pink-500 transition duration-200"
                    >
                      <FaEye />
                    </Link>
                  </div>
                </div>
              ))}
            </div>
          </div>
          <Pagination
            currentPage={page}
            totalPages={totalPages}
            onPageChange={setPage}
          />
        </>
      )}
    </>
  );
};

export default SupplierList;


// \components\transactions\TransactionDetail.jsx

import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useParams, Link } from "react-router-dom";
import { fetchTransactionById } from "../../features/transactions/transactionsSlice";
import { FaChevronLeft } from "react-icons/fa";
import { format } from "date-fns";
import { currencyFormatter, numberFormatter } from "../../utils/helpers";
import Spinner from "../helper/Spinner";

const TransactionDetail = () => {
  const { id } = useParams();
  const dispatch = useDispatch();
  const {
    current: tx,
    status,
    error,
  } = useSelector((state) => state.transactions);
  useEffect(() => {
    dispatch(fetchTransactionById(id));
  }, [dispatch, id]);
  if (status === "loading") {
    return <Spinner />;
  }
  if (status === "failed") {
    return <p className="text-red-500">Błąd: {error}</p>;
  }
  if (!tx) {
    return <p className="text-red-500">Nie znaleziono transakcji.</p>;
  }
  const {
    transactionId,
    date,
    description,
    type,
    employeeId,
    fromWarehouseId,
    toWarehouseId,
    clientId,
    supplierId,
    products,
    supplierName,
    fromWarehouseName,
    toWarehouseName,
    employeeName,
    clientName,
  } = tx;
  return (
    <div className="max-w-4xl mx-auto bg-white p-6 rounded-lg shadow space-y-6">
      <Link
        to="/transactions"
        className="text-gray-600 hover:text-pink-500 transition duration-200"
      >
        <FaChevronLeft className="inline-block mr-2" /> Powrót do Transakcji
      </Link>
      <h1 className="text-3xl font-semibold mt-4">
        Transakcja #{transactionId}
      </h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <strong>Data:</strong> {format(new Date(date), "yyyy-MM-dd")}
        </div>
        <div>
          <strong>Typ:</strong>{" "}
          {tx.type
            .toLowerCase()
            .replace(/_/g, " ")
            .replace(/\b\w/g, (c) => c.toUpperCase())}
        </div>
        <div>
          <strong>Opis:</strong> {description}
        </div>
        <div>
          <strong>Wykonana przez:</strong>{" "}
          <Link
            to={`/employees/${employeeId}`}
            className="text-pink-600 hover:underline"
          >
            {employeeName}
          </Link>
        </div>
        {supplierId && (
          <div>
            <strong>Dostawca:</strong>{" "}
            <Link
              to={`/suppliers/${supplierId}`}
              className="text-pink-600 hover:underline"
            >
              {supplierName}
            </Link>
          </div>
        )}
        {clientId && (
          <div>
            <strong>Klient:</strong>{" "}
            <Link
              to={`/clients/${clientId}`}
              className="text-pink-600 hover:underline"
            >
              {clientName}
            </Link>
          </div>
        )}
        {fromWarehouseId && (
          <div>
            <strong>Z magazynu:</strong>{" "}
            <Link
              to={`/warehouses/${fromWarehouseId}`}
              className="text-pink-600 hover:underline"
            >
              {fromWarehouseName}
            </Link>
          </div>
        )}
        {toWarehouseId && (
          <div>
            <strong>Do magazynu:</strong>{" "}
            <Link
              to={`/warehouses/${toWarehouseId}`}
              className="text-pink-600 hover:underline"
            >
              {toWarehouseName}
            </Link>
          </div>
        )}
      </div>
      {products.length === 0 ? (
        <p className="text-red-500">Brak produktów</p>
      ) : (
        <section>
          <h2 className="text-xl font-semibold mb-4">Produkty</h2>
          <div className="bg-gray-50 grid grid-cols-5 p-2 text-xs uppercase font-medium text-gray-500 rounded-t-lg">
            <div>Produkt</div>
            <div className="text-right">Ilość</div>
            <div className="text-right">Cena jednostkowa</div>
            <div className="text-right">Kategoria</div>
            <div className="text-right">Łącznie</div>
          </div>
          <div className="divide-y divide-gray-200">
            {products.map((p) => (
              <div
                key={p.productId}
                className="grid grid-cols-5 p-2 text-sm text-gray-700 items-center"
              >
                <div>
                  <Link
                    to={`/products/${p.productId}`}
                    className="text-pink-600 hover:underline"
                  >
                    {p.name}
                  </Link>
                </div>
                <div className="text-right">{numberFormatter(p.quantity)}</div>
                <div className="text-right">
                  {currencyFormatter(p.unitPrice)}
                </div>
                <div className="text-right">{p.categoryName}</div>
                <div className="text-right">
                  {currencyFormatter(p.quantity * p.unitPrice)}
                </div>
              </div>
            ))}
          </div>
          <div className="text-right p-2 font-bold">
            {currencyFormatter(
              products.reduce((acc, p) => acc + p.quantity * p.unitPrice, 0)
            )}
          </div>
        </section>
      )}
    </div>
  );
};

export default TransactionDetail;


// \components\transactions\TransactionList.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link } from "react-router-dom";
import { fetchTransactions } from "../../features/transactions/transactionsSlice";
import { FaEye } from "react-icons/fa";
import { format } from "date-fns";
import { currencyFormatter, numberFormatter } from "../../utils/helpers";
import DateInput from "../helper/DateInput";
import SelectInput from "../helper/SelectInput";
import NumberInput from "../helper/NumberInput";
import Pagination from "../helper/Pagination";
import Spinner from "../helper/Spinner";

const TransactionList = () => {
  const dispatch = useDispatch();
  const {
    list: transactions,
    status,
    error,
  } = useSelector((state) => state.transactions);
  const selectedWarehouse = useSelector((state) => state.selectedWarehouse);
  const [filters, setFilters] = useState({
    fromDate: "",
    toDate: "",
    type: "",
    minTotalPrice: "",
    maxTotalPrice: "",
    minTotalSize: "",
    maxTotalSize: "",
  });
  const [page, setPage] = useState(1);
  const totalPages = 10;
  const [sortOption, setSortOption] = useState("");
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFilters((f) => ({ ...f, [name]: value }));
  };
  useEffect(() => {
    dispatch(
      fetchTransactions({
        fromDate: filters.fromDate || undefined,
        toDate: filters.toDate || undefined,
        type: filters.type || undefined,
        minTotalPrice: filters.minTotalPrice
          ? parseFloat(filters.minTotalPrice)
          : undefined,
        maxTotalPrice: filters.maxTotalPrice
          ? parseFloat(filters.maxTotalPrice)
          : undefined,
        minTotalSize: filters.minTotalSize
          ? parseFloat(filters.minTotalSize)
          : undefined,
        maxTotalSize: filters.maxTotalSize
          ? parseFloat(filters.maxTotalSize)
          : undefined,
        page: page || 1,
        warehouseId: selectedWarehouse || undefined,
      })
    );
  }, [dispatch, filters, selectedWarehouse, page]);
  const filtered = [...transactions].sort((a, b) => {
    switch (sortOption) {
      case "date":
        return new Date(a.date) - new Date(b.date);
      case "date-reverse":
        return new Date(b.date) - new Date(a.date);
      case "description":
        return a.description.localeCompare(b.description);
      case "description-reverse":
        return b.description.localeCompare(a.description);
      case "type":
        return a.type.localeCompare(b.type);
      case "type-reverse":
        return b.type.localeCompare(a.type);
      // case "from":
      //   return (a.fromWarehouseId || "").localeCompare(b.fromWarehouseId || "");
      // case "from-reverse":
      //   return (b.fromWarehouseId || "").localeCompare(a.fromWarehouseId || "");
      // case "to":
      //   return (
      //     a.toWarehouseId ||
      //     a.clientId ||
      //     a.supplierId ||
      //     ""
      //   ).localeCompare(b.toWarehouseId || b.clientId || b.supplierId || "");
      // case "to-reverse":
      //   return (
      //     b.toWarehouseId ||
      //     b.clientId ||
      //     b.supplierId ||
      //     ""
      //   ).localeCompare(a.toWarehouseId || a.clientId || a.supplierId || "");
      case "total":
        return a.totalPrice - b.totalPrice;
      case "total-reverse":
        return b.totalPrice - a.totalPrice;
      case "size":
        return a.totalSize - b.totalSize;
      case "size-reverse":
        return b.totalSize - a.totalSize;
      default:
        return 0;
    }
  });
  return (
    <>
      <form className="flex justify-between space-x-4">
        <div className="flex flex-wrap gap-4 items-end">
          <DateInput
            label="Od dnia"
            value={filters.fromDate}
            setValue={handleChange}
          />
          <DateInput
            label="Do dnia"
            value={filters.toDate}
            setValue={handleChange}
          />
          <SelectInput
            label="Typ transakcji"
            value={filters.type}
            onChange={handleChange}
          >
            <option value="">Wszystkie</option>
            <option value="SUPPLIER_TO_WAREHOUSE">Supplier to Warehouse</option>
            <option value="WAREHOUSE_TO_CUSTOMER">Warehouse to Customer</option>
            <option value="WAREHOUSE_TO_WAREHOUSE">
              Warehouse to Warehouse
            </option>
          </SelectInput>
          <NumberInput
            label="Łączna kwota (min)"
            isMinus={true}
            placeholder="Wpisz kwotę..."
            value={filters.minTotalPrice}
            setValue={handleChange}
          />
          <NumberInput
            label="Łączna kwota (max)"
            isMinus={false}
            placeholder="Wpisz kwotę..."
            value={filters.maxTotalPrice}
            setValue={handleChange}
          />
          <NumberInput
            label="Łączny rozmiar (min)"
            isMinus={true}
            placeholder="Wpisz kwotę..."
            value={filters.minTotalSize}
            setValue={handleChange}
          />
          <NumberInput
            label="Łączny rozmiar (max)"
            isMinus={false}
            placeholder="Wpisz kwotę..."
            value={filters.maxTotalSize}
            setValue={handleChange}
          />
        </div>
        <SelectInput
          label="Sortowanie"
          value={sortOption}
          onChange={(e) => setSortOption(e.target.value)}
        >
          <option value="">Sortuj przez</option>
          <option value="date">Data (od najstarszej)</option>
          <option value="date-reverse">Data (od najmłodszej)</option>
          <option value="description">Opis (od A do Z)</option>
          <option value="description-reverse">Opis (od Z do A)</option>
          <option value="type">Typ (od A do Z)</option>
          <option value="type-reverse">Typ (od Z do A)</option>
          <option value="from">Z Miejsca (od A do Z)</option>
          <option value="from-reverse">Z Miejsca (od Z do A)</option>
          <option value="to">Do Miejsca (od A do Z)</option>
          <option value="to-reverse">Do Miejsca (od Z do A)</option>
          <option value="total">Łącznie (rosnąco)</option>
          <option value="total-reverse">Łącznie (malejąco)</option>
        </SelectInput>
      </form>
      {status === "loading" || status === "idle" ? (
        <Spinner />
      ) : status === "failed" ? (
        <p className="text-red-500">Błąd: {error}</p>
      ) : filtered.length === 0 ? (
        <p className="text-red-500">Nie znaleziono transakcji</p>
      ) : (
        <>
          <Pagination
            currentPage={page}
            totalPages={totalPages}
            onPageChange={setPage}
          />
          <div className="bg-white rounded-lg shadow overflow-auto">
            <div className="hidden sm:grid grid-cols-9 gap-4 p-4 bg-gray-50 text-xs font-medium text-gray-500 uppercase tracking-wider">
              <div>Data</div>
              <div>Opis</div>
              <div>Typ</div>
              <div>Pracownik</div>
              <div>Od miejsca</div>
              <div>Do miejsca</div>
              <div className="text-right">Łączna kwota</div>
              <div className="text-right">Łączny rozmiar</div>
              <div className="text-center">Akcje</div>
            </div>
            <div className="divide-y divide-gray-200">
              {filtered.map((tx) => (
                <div
                  key={tx.transactionId}
                  className="grid grid-cols-1 sm:grid-cols-9 gap-4 p-4 hover:bg-pink-50 transition-colors duration-200"
                >
                  <div>{format(new Date(tx.date), "yyyy-MM-dd")}</div>
                  <div className="truncate">{tx.description}</div>
                  <div>
                    {tx.type
                      .toLowerCase()
                      .replace(/_/g, " ")
                      .replace(/\b\w/g, (c) => c.toUpperCase())}
                  </div>
                  <div>{tx.employeeId}</div>
                  <div>{tx.fromWarehouseId ?? tx.supplierId ?? "-"}</div>
                  <div>{tx.toWarehouseId ?? tx.clientId ?? "-"}</div>
                  <div className="text-right">
                    {currencyFormatter(tx.totalPrice)}
                  </div>
                  <div className="text-right">
                    {numberFormatter(tx.totalSize)}
                  </div>
                  <div className="text-gray-600 flex justify-center">
                    <Link
                      to={`/transactions/${tx.transactionId}`}
                      className="hover:text-pink-500 transition duration-200"
                    >
                      <FaEye />
                    </Link>
                  </div>
                </div>
              ))}
            </div>
          </div>
          <Pagination
            currentPage={page}
            totalPages={totalPages}
            onPageChange={setPage}
          />
        </>
      )}
    </>
  );
};

export default TransactionList;


// \components\warehouses\WarehouseDetail.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useParams, Link } from "react-router-dom";
import { fetchWarehouseById } from "../../features/warehouses/warehousesSlice";
import {
  ResponsiveContainer,
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
} from "recharts";
import { FaChevronLeft, FaEdit, FaEye } from "react-icons/fa";
import {
  currencyFormatter,
  dateFormatter,
  numberFormatter,
} from "../../utils/helpers";

const WarehouseDetail = () => {
  const { id } = useParams();
  const dispatch = useDispatch();
  const [employeesShown, setEmployeesShown] = useState(25);
  const [productsShown, setProductsShown] = useState(25);
  const [transactionsShown, setTransactionsShown] = useState(25);
  const {
    current: warehouse,
    status,
    error,
  } = useSelector((state) => state.warehouses);
  useEffect(() => {
    dispatch(fetchWarehouseById(id));
  }, [dispatch, id]);
  if (status === "loading") {
    return <Spinner />;
  }
  if (status === "failed") {
    return <p className="text-red-500">Błąd: {error}</p>;
  }
  if (!warehouse) {
    return <p className="text-red-500">Nie znaleziono magazynu.</p>;
  }
  const {
    name,
    capacity,
    occupiedCapacity,
    address,
    employees,
    products,
    transactions,
    occupancyHistory,
    totalItems,
    totalValue,
  } = warehouse;
  return (
    <div className="space-y-6 max-w-6xl mx-auto">
      <div className="flex items-center justify-between">
        <Link
          to="/warehouses"
          className="text-gray-600 hover:text-pink-500 transition duration-200"
        >
          <FaChevronLeft className="inline mr-2" /> Powrót do Magazynów
        </Link>
        <Link
          to={`/warehouses/${id}/edit`}
          className="flex items-center bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition duration-200"
        >
          <FaEdit className="mr-2" /> Edytuj Magazyn
        </Link>
      </div>
      <div className="bg-white rounded-lg shadow p-6 grid grid-cols-1 md:grid-cols-3 gap-6">
        <div>
          <h2 className="text-lg font-semibold mb-2">Nazwa</h2>
          <p className="text-gray-800">{name}</p>
        </div>
        <div>
          <h2 className="text-lg font-semibold mb-2">Pojemność</h2>
          <p className="text-gray-800">{capacity}</p>
        </div>
        <div>
          <h2 className="text-lg font-semibold mb-2">Zajęte</h2>
          <p className="text-gray-800">{occupiedCapacity}</p>
        </div>
        <div>
          <h2 className="text-lg font-semibold mb-2">Adres</h2>
          <p className="text-gray-800">{address}</p>
        </div>
        <div>
          <h2 className="text-lg font-semibold mb-2">Ilość przedmiotów</h2>
          <p className="text-gray-800">{numberFormatter(totalItems)}</p>
        </div>
        <div>
          <h2 className="text-lg font-semibold mb-2">Łączna wartość</h2>
          <p className="text-gray-800">{currencyFormatter(totalValue)}</p>
        </div>
      </div>
      <section>
        <h3 className="text-2xl font-semibold mb-4">Historia Zajętości</h3>
        <div className="bg-white rounded-lg shadow p-6">
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={occupancyHistory}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Line
                type="monotone"
                dataKey="occupiedCapacity"
                stroke="#3B82F6"
                strokeWidth={2}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </section>
      <section className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div>
          <h3 className="text-2xl font-semibold mb-4">Pracownicy</h3>
          {employees.length === 0 ? (
            <p className="text-red-500">Brak pracowników.</p>
          ) : (
            <div className="bg-white rounded-lg shadow overflow-auto">
              <div className="grid grid-cols-5 bg-gray-50 text-xs font-medium text-gray-500 uppercase p-2">
                <div>Imię i Nazwisko</div>
                <div className="text-right">E-mail</div>
                <div className="text-right">Nr. telefonu</div>
                <div className="text-right">Stanowisko</div>
                <div className="text-right">Detale</div>
              </div>
              <div className="divide-y divide-gray-200">
                {employees.slice(0, employeesShown).map((emp) => (
                  <div
                    key={emp.employeeId}
                    className="grid grid-cols-5 p-2 text-sm text-gray-700"
                  >
                    <Link
                      to={`/employees/${emp.employeeId}`}
                      className="text-pink-500 hover:underline"
                    >
                      {emp.name} {emp.surname}
                    </Link>
                    <div className="text-right truncate">{emp.email}</div>
                    <div className="text-right">{emp.phoneNumber}</div>
                    <div className="text-right">{emp.position}</div>
                    <div className="flex justify-end text-gray-600">
                      <Link
                        to={`/employees/${emp.employeeId}`}
                        className="hover:text-pink-500 transition duration-200"
                      >
                        <FaEye />
                      </Link>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
          {employees.length > employeesShown && (
            <button
              onClick={() => setEmployeesShown((prev) => prev + 25)}
              className="mt-4 bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition mx-auto block"
            >
              Pokaż więcej
            </button>
          )}
        </div>
        <div>
          <h3 className="text-2xl font-semibold mb-4">Produkty</h3>
          {products.length === 0 ? (
            <p className="text-red-500">Brak produktów.</p>
          ) : (
            <div className="bg-white rounded-lg shadow overflow-auto">
              <div className="grid grid-cols-5 bg-gray-50 text-xs font-medium text-gray-500 uppercase p-2">
                <div>Nazwa</div>
                <div className="text-right">Ilość</div>
                <div className="text-right">Cena za szt.</div>
                <div className="text-right">Wartość</div>
                <div className="text-right">Detale</div>
              </div>
              <div className="divide-y divide-gray-200">
                {products.slice(0, productsShown).map((pr) => (
                  <div
                    key={pr.productId}
                    className="grid grid-cols-5 p-2 text-sm text-gray-700"
                  >
                    <Link
                      to={`/products/${pr.productId}`}
                      className="text-pink-500 hover:underline"
                    >
                      {pr.name}
                    </Link>
                    <div className="text-right">
                      {numberFormatter(pr.quantity)}
                    </div>
                    <div className="text-right">
                      {currencyFormatter(pr.unitPrice)}
                    </div>
                    <div className="text-right">
                      {currencyFormatter(pr.quantity * pr.unitPrice)}
                    </div>
                    <div className="flex justify-end text-gray-600">
                      <Link
                        to={`/products/${pr.productId}`}
                        className="hover:text-pink-500 transition duration-200"
                      >
                        <FaEye />
                      </Link>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
          {products.length > productsShown && (
            <button
              onClick={() => setProductsShown((prev) => prev + 25)}
              className="mt-4 bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition mx-auto block"
            >
              Pokaż więcej
            </button>
          )}
        </div>
      </section>
      <section>
        <h3 className="text-2xl font-semibold mb-4">Ostatnie Transakcje</h3>
        {transactions.length === 0 ? (
          <p className="text-red-500">Brak transakcji.</p>
        ) : (
          <div className="bg-white rounded-lg shadow overflow-auto">
            <div className="grid grid-cols-5 bg-gray-50 text-xs font-medium text-gray-500 uppercase p-2">
              <div>Data</div>
              <div>Typ</div>
              <div className="text-right">Łącznie</div>
              <div className="text-right">Przez pracownika</div>
              <div className="text-right">Detale</div>
            </div>
            <div className="divide-y divide-gray-200">
              {[...transactions]
                .reverse()
                .slice(0, transactionsShown)
                .map((tx) => (
                  <div
                    key={tx.transactionId}
                    className="grid grid-cols-5 items-center p-2 text-sm text-gray-700"
                  >
                    <div>{dateFormatter(tx.date)}</div>
                    <div>
                      {tx.type
                        .toLowerCase()
                        .replace(/_/g, " ")
                        .replace(/\b\w/g, (c) => c.toUpperCase())}
                    </div>
                    <div className="text-right">
                      {currencyFormatter(tx.totalPrice)}
                    </div>
                    <Link
                      className="text-right text-pink-500 hover:underline"
                      to={`/employees/${tx.employeeId}`}
                    >
                      {tx.employeeName}
                    </Link>
                    <div className="flex justify-end text-gray-600">
                      <Link
                        to={`/transactions/${tx.transactionId}`}
                        className="hover:text-pink-500 transition duration-200"
                      >
                        <FaEye />
                      </Link>
                    </div>
                  </div>
                ))}
            </div>
          </div>
        )}
        {transactions.length > transactionsShown && (
          <button
            onClick={() => setTransactionsShown((prev) => prev + 25)}
            className="mt-4 bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition mx-auto block"
          >
            Pokaż więcej
          </button>
        )}
      </section>
    </div>
  );
};

export default WarehouseDetail;


// \components\warehouses\WarehouseForm.jsx

import { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link, useNavigate, useParams } from "react-router-dom";
import {
  createWarehouse,
  updateWarehouse,
  fetchWarehouseById,
} from "../../features/warehouses/warehousesSlice";
import {
  fetchRegions,
  fetchCountries,
} from "../../features/geography/geographySlice";
import { FaChevronDown, FaChevronLeft } from "react-icons/fa";
import Spinner from "../helper/Spinner";

const WarehousesForm = () => {
  const { id } = useParams();
  const isEdit = Boolean(id);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const {
    current: warehouse,
    status,
    error,
  } = useSelector((state) => state.warehouses);
  const { regions, countries } = useSelector((state) => state.geography);
  const [form, setForm] = useState({
    name: "",
    capacity: "",
    regionId: "",
    countryId: "",
    city: "",
    postalCode: "",
    street: "",
    streetNumber: "",
  });
  useEffect(() => {
    dispatch(fetchRegions());
  }, [dispatch]);
  useEffect(() => {
    if (form.regionId) {
      dispatch(fetchCountries(form.regionId));
    } else {
      dispatch(fetchCountries(null));
    }
  }, [dispatch, form.regionId]);
  useEffect(() => {
    if (isEdit) dispatch(fetchWarehouseById(id));
  }, [dispatch, id, isEdit]);
  useEffect(() => {
    if (isEdit && warehouse) {
      setForm({
        name: warehouse.name || "",
        capacity: warehouse.capacity?.toString() || "",
        regionId: warehouse.regionId?.toString() || "",
        countryId: warehouse.countryId?.toString() || "",
        city: warehouse.city || "",
        postalCode: warehouse.postalCode || "",
        street: warehouse.street || "",
        streetNumber: warehouse.streetNumber?.toString() || "",
      });
    }
  }, [warehouse, isEdit]);
  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: value }));
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    const payload = {
      name: form.name,
      capacity: parseInt(form.capacity, 10),
      regionId: parseInt(form.regionId, 10),
      countryId: parseInt(form.countryId, 10),
      city: form.city,
      postalCode: form.postalCode,
      street: form.street,
      streetNumber: form.streetNumber,
    };
    if (isEdit) {
      dispatch(updateWarehouse({ id: parseInt(id, 10), data: payload })).then(
        () => navigate("/warehouses")
      );
    } else {
      dispatch(createWarehouse(payload)).then(() => navigate("/warehouses"));
    }
  };
  if ((isEdit && status === "loading") || status === "idle") {
    return <Spinner />;
  }
  if (status === "failed") {
    return <p className="text-red-500">Błąd: {error}</p>;
  }
  if (isEdit && !warehouse) {
    return <p className="text-red-500">Nie znaleziono magazynu.</p>;
  }
  return (
    <div className="max-w-lg mx-auto bg-white p-6 rounded-lg shadow">
      <Link
        to="/warehouses"
        className="flex items-center text-gray-600 hover:text-pink-500 mb-6 transition duration-200"
      >
        <FaChevronLeft className="inline mr-2" /> Powrót do Magazynów
      </Link>
      <h1 className="text-2xl font-semibold mb-4">
        {isEdit ? "Edytuj Magazyn" : "Nowy Magazyn"}
      </h1>
      {status === "failed" && <p className="text-red-500">Error: {error}</p>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="name" className="block text-sm font-medium">
            Nazwa
          </label>
          <input
            id="name"
            name="name"
            value={form.name}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
          />
        </div>
        <div>
          <label htmlFor="capacity" className="block text-sm font-medium">
            Pojemność
          </label>
          <input
            id="capacity"
            name="capacity"
            type="number"
            value={form.capacity}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
          />
        </div>
        <div>
          <label htmlFor="regionId" className="block text-sm font-medium">
            Region
          </label>
          <div className="relative">
            <select
              id="regionId"
              name="regionId"
              value={form.regionId}
              onChange={handleChange}
              required
              className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
            >
              <option value="">Wybierz region</option>
              {regions.map((r) => (
                <option key={r.id} value={r.id}>
                  {r.name}
                </option>
              ))}
            </select>
            <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          </div>
        </div>
        <div>
          <label htmlFor="countryId" className="block text-sm font-medium">
            Kraj
          </label>
          <div className="relative">
            <select
              id="countryId"
              name="countryId"
              value={form.countryId}
              onChange={handleChange}
              required
              disabled={!form.regionId}
              className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300 appearance-none"
            >
              <option value="">Wybierz region, a potem kraj</option>
              {countries.map((c) => (
                <option key={c.id} value={c.id}>
                  {c.name}
                </option>
              ))}
            </select>
            <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          </div>
        </div>
        <div>
          <label htmlFor="city" className="block text-sm font-medium">
            Miasto
          </label>
          <input
            id="city"
            name="city"
            value={form.city}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
          />
        </div>
        <div>
          <label htmlFor="postalCode" className="block text-sm font-medium">
            Kod pocztowy
          </label>
          <input
            id="postalCode"
            name="postalCode"
            value={form.postalCode}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
          />
        </div>
        <div>
          <label htmlFor="street" className="block text-sm font-medium">
            Ulica
          </label>
          <input
            id="street"
            name="street"
            value={form.street}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
          />
        </div>
        <div>
          <label htmlFor="streetNumber" className="block text-sm font-medium">
            Numer domu
          </label>
          <input
            id="streetNumber"
            name="streetNumber"
            value={form.streetNumber}
            onChange={handleChange}
            required
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500 transition-colors duration-300"
          />
        </div>
        <button
          type="submit"
          className="w-full py-3 bg-pink-500 hover:bg-pink-600 text-white rounded-lg transition cursor-pointer duration-200"
        >
          {isEdit ? "Zaktualizuj Magazyn" : "Stwórz Magazyn"}
        </button>
      </form>
    </div>
  );
};

export default WarehousesForm;


// \components\warehouses\WarehouseList.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link } from "react-router-dom";
import {
  fetchWarehouses,
  deleteWarehouse,
} from "../../features/warehouses/warehousesSlice";
import { FaEye, FaTrash, FaEdit } from "react-icons/fa";
import { fetchRegions } from "../../features/geography/geographySlice";
import Pagination from "../helper/Pagination";
import SelectInput from "../helper/SelectInput";
import TextInput from "../helper/TextInput";
import NumberInput from "../helper/NumberInput";
import { numberFormatter } from "../../utils/helpers";
import Spinner from "../helper/Spinner";

const WarehouseList = () => {
  const dispatch = useDispatch();
  const {
    list: warehouses,
    status,
    error,
  } = useSelector((state) => state.warehouses);
  const { regions } = useSelector((state) => state.geography);
  const [searchTerm, setSearchTerm] = useState("");
  const [regionFilter, setRegionFilter] = useState("");
  const [minCapacity, setMinCapacity] = useState("");
  const [maxCapacity, setMaxCapacity] = useState("");
  const [minOccupied, setMinOccupied] = useState("");
  const [maxOccupied, setMaxOccupied] = useState("");
  const [minEmployees, setMinEmployees] = useState("");
  const [maxEmployees, setMaxEmployees] = useState("");
  const [minProducts, setMinProducts] = useState("");
  const [maxProducts, setMaxProducts] = useState("");
  const [minTransactions, setMinTransactions] = useState("");
  const [maxTransactions, setMaxTransactions] = useState("");
  const [sortOption, setSortOption] = useState("");
  const [page, setPage] = useState(1);
  const totalPages = 10;
  useEffect(() => {
    dispatch(fetchWarehouses());
    dispatch(fetchRegions());
  }, [dispatch]);
  const filtered = warehouses
    .filter((wh) => wh.name.toLowerCase().includes(searchTerm.toLowerCase()))
    .sort((a, b) => {
      switch (sortOption) {
        case "name":
          return a.name.localeCompare(b.name);
        case "name-reverse":
          return b.name.localeCompare(a.name);
        case "capacity":
          return a.capacity - b.capacity;
        case "capacity-reverse":
          return b.capacity - a.capacity;
        case "occupied":
          return a.occupiedCapacity - b.occupiedCapacity;
        case "occupied-reverse":
          return b.occupiedCapacity - a.occupiedCapacity;
        case "address":
          return a.address.localeCompare(b.address);
        case "address-reverse":
          return b.address.localeCompare(a.address);
        case "employees":
          return a.employeesCount - b.employeesCount;
        case "employees-reverse":
          return b.employeesCount - a.employeesCount;
        case "products":
          return a.productsCount - b.productsCount;
        case "products-reverse":
          return b.productsCount - a.productsCount;
        case "transactions":
          return a.transactionsCount - b.transactionsCount;
        case "transactions-reverse":
          return b.transactionsCount - a.transactionsCount;
        default:
          return 0;
      }
    });
  const handleDelete = (id) => {
    if (window.confirm("Czy na pewno chcesz usunąć ten magazyn?")) {
      dispatch(deleteWarehouse(id));
    }
  };
  return (
    <>
      <div className="flex justify-between space-x-4">
        <div className="flex flex-wrap gap-4 items-end">
          <TextInput
            label="Nazwa"
            placeholder="Szukaj magazynu..."
            value={searchTerm}
            setValue={setSearchTerm}
          />
          <SelectInput
            label="Region"
            value={regionFilter}
            setValue={setRegionFilter}
          >
            <option value="">Wszystkie Regiony</option>
            {regions.map((reg) => (
              <option key={reg.id} value={reg.id}>
                {reg.name}
              </option>
            ))}
          </SelectInput>
          <NumberInput
            label="Pojemność (min)"
            placeholder="Wybierz pojemność..."
            isMinus={true}
            value={minCapacity}
            setValue={setMinCapacity}
          />
          <NumberInput
            label="Pojemność (max)"
            placeholder="Wybierz pojemność..."
            isMinus={false}
            value={maxCapacity}
            setValue={setMaxCapacity}
          />
          <NumberInput
            label="Zajęte (min)"
            placeholder="Wybierz zajętość..."
            isMinus={true}
            value={minOccupied}
            setValue={setMinOccupied}
          />
          <NumberInput
            label="Zajęte (max)"
            placeholder="Wybierz zajętość..."
            isMinus={false}
            value={maxOccupied}
            setValue={setMaxOccupied}
          />
          <NumberInput
            label="Pracownicy (min)"
            placeholder="Wybierz pracowników..."
            isMinus={true}
            value={minEmployees}
            setValue={setMinEmployees}
          />
          <NumberInput
            label="Pracownicy (max)"
            placeholder="Wybierz pracowników..."
            isMinus={false}
            value={maxEmployees}
            setValue={setMaxEmployees}
          />
          <NumberInput
            label="Produkty (min)"
            placeholder="Wybierz produkty..."
            isMinus={true}
            value={minProducts}
            setValue={setMinProducts}
          />
          <NumberInput
            label="Produkty (max)"
            placeholder="Wybierz produkty..."
            isMinus={false}
            value={maxProducts}
            setValue={setMaxProducts}
          />
          <NumberInput
            label="Transakcje (min)"
            placeholder="Wybierz transakcje..."
            isMinus={true}
            value={minTransactions}
            setValue={setMinTransactions}
          />
          <NumberInput
            label="Transakcje (max)"
            placeholder="Wybierz transakcje..."
            isMinus={false}
            value={maxTransactions}
            setValue={setMaxTransactions}
          />
        </div>
        <SelectInput
          label="Sortowanie"
          value={sortOption}
          setValue={setSortOption}
        >
          <option value="">Sortuj przez</option>
          <option value="name">Nazwa (od A do Z)</option>
          <option value="name-reverse">Nazwa (od Z do A)</option>
          <option value="capacity">Pojemność (rosnąco)</option>
          <option value="capacity-reverse">Pojemność (malejąco)</option>
          <option value="occupied">Zajęte (rosnąco)</option>
          <option value="occupied-reverse">Zajęte (malejąco)</option>
          <option value="address">Adres (od A do Z)</option>
          <option value="address-reverse">Adres (od Z do A)</option>
          <option value="employees">Pracownicy (rosnąco)</option>
          <option value="employees-reverse">Pracownicy (malejąco)</option>
          <option value="products">Produkty (rosnąco)</option>
          <option value="products-reverse">Produkty (malejąco)</option>
          <option value="transactions">Transakcje (rosnąco)</option>
          <option value="transactions-reverse">Transakcje (malejąco)</option>
        </SelectInput>
      </div>
      {status === "loading" || status === "idle" ? (
        <Spinner />
      ) : status === "failed" ? (
        <p className="text-red-500">Błąd: {error}</p>
      ) : filtered.length === 0 ? (
        <p className="text-red-500">Nie znaleziono magazynu</p>
      ) : (
        <>
          <Pagination
            currentPage={page}
            totalPages={totalPages}
            onPageChange={setPage}
          />
          <div className="bg-white rounded-lg shadow overflow-auto">
            <div className="hidden sm:grid grid-cols-8 gap-4 p-4 bg-gray-50 text-xs font-medium text-gray-500 uppercase tracking-wider">
              <div>Nazwa</div>
              <div>Pojemność</div>
              <div>Zajęte</div>
              <div>Adres</div>
              <div className="text-right">Pracownicy</div>
              <div className="text-right">Produkty</div>
              <div className="text-right">Liczba transakcji</div>
              <div className="text-center">Akcje</div>
            </div>
            <div className="divide-y divide-gray-200">
              {filtered.map((wh) => (
                <div
                  key={wh.warehouseId}
                  className="grid grid-cols-1 sm:grid-cols-8 items-center gap-4 p-4 hover:bg-pink-50 transition-colors duration-200"
                >
                  <div>
                    <Link
                      to={`/warehouses/${wh.warehouseId}`}
                      className="text-pink-600 hover:underline font-medium"
                    >
                      {wh.name}
                    </Link>
                  </div>
                  <div className="text-sm text-gray-700">
                    {numberFormatter(wh.capacity)}
                  </div>
                  <div className="text-sm text-gray-700">
                    {numberFormatter(wh.occupiedCapacity)}
                  </div>
                  <div className="text-sm text-gray-700">{wh.address}</div>
                  <div className="text-sm text-gray-700 text-right">
                    {numberFormatter(wh.employeesCount)}
                  </div>
                  <div className="text-sm text-gray-700 text-right">
                    {numberFormatter(wh.productsCount)}
                  </div>
                  <div className="text-sm text-gray-700 text-right">
                    {numberFormatter(wh.transactionsCount)}
                  </div>
                  <div className="flex justify-center space-x-4 text-gray-600">
                    <Link
                      to={`/warehouses/${wh.warehouseId}`}
                      className="hover:text-pink-500 transition duration-200"
                    >
                      <FaEye />
                    </Link>
                    <Link
                      to={`/warehouses/${wh.warehouseId}/edit`}
                      className="hover:text-pink-500 transition duration-200"
                    >
                      <FaEdit />
                    </Link>
                    <button
                      onClick={() => handleDelete(wh.warehouseId)}
                      className="hover:text-pink-500 transition duration-200 cursor-pointer"
                    >
                      <FaTrash />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
          <Pagination
            currentPage={page}
            totalPages={totalPages}
            onPageChange={setPage}
          />
        </>
      )}
    </>
  );
};

export default WarehouseList;


// \features\auth\authSlice.jsx

import { createSlice } from "@reduxjs/toolkit";

const persisted = localStorage.getItem("loggedIn") === "true";

const authSlice = createSlice({
  name: "auth",
  initialState: { loggedIn: persisted, error: null },
  reducers: {
    login: (state, action) => {
      const { username, password } = action.payload;
      if (username === "admin" && password === "admin") {
        state.loggedIn = true;
        state.error = null;
        localStorage.setItem("loggedIn", "true");
      } else {
        state.loggedIn = false;
        state.error = "Nieprawidłowa nazwa lub hasło";
        localStorage.removeItem("loggedIn");
      }
    },
    logout: (state) => {
      state.loggedIn = false;
      state.error = null;
      localStorage.removeItem("loggedIn");
    },
  },
});

export const { login, logout } = authSlice.actions;
export default authSlice.reducer;


// \features\categories\categoriesSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as categoriesAPI from "../../api/categories";

export const fetchCategories = createAsyncThunk(
  "categories/fetchAll",
  async (params) => {
    const response = await categoriesAPI.listCategories(params);
    return response.data;
  }
);
export const createCategory = createAsyncThunk(
  "categories/create",
  async (data) => {
    const response = await categoriesAPI.createCategory(data);
    return response.data;
  }
);
export const updateCategory = createAsyncThunk(
  "categories/update",
  async ({ id, data }) => {
    const response = await categoriesAPI.updateCategory(id, data);
    return response.data;
  }
);
export const deleteCategory = createAsyncThunk(
  "categories/delete",
  async (id) => {
    await categoriesAPI.deleteCategory(id);
    return id;
  }
);

const categoriesSlice = createSlice({
  name: "categories",
  initialState: { list: [], status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchCategories.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchCategories.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchCategories.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(createCategory.fulfilled, (state, action) => {
        state.list.push(action.payload);
      })
      .addCase(updateCategory.fulfilled, (state, action) => {
        const idx = state.list.findIndex(
          (c) => c.categoryId === action.payload.categoryId
        );
        if (idx !== -1) state.list[idx] = action.payload;
      })
      .addCase(deleteCategory.fulfilled, (state, action) => {
        state.list = state.list.filter((c) => c.categoryId !== action.payload);
      });
  },
});

export default categoriesSlice.reducer;


// \features\clients\clientsSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as clientsAPI from "../../api/clients";

export const fetchClients = createAsyncThunk(
  "clients/fetchAll",
  async (params) => {
    const response = await clientsAPI.listClients(params);
    return response.data;
  }
);
export const fetchClientById = createAsyncThunk(
  "clients/fetchById",
  async (id) => {
    const response = await clientsAPI.getClientById(id);
    return response.data;
  }
);
export const createClient = createAsyncThunk("clients/create", async (data) => {
  const response = await clientsAPI.createClient(data);
  return response.data;
});

const clientsSlice = createSlice({
  name: "clients",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchClients.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchClients.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchClients.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchClientById.fulfilled, (state, action) => {
        state.current = action.payload;
      })
      .addCase(createClient.fulfilled, (state, action) => {
        state.list.push(action.payload);
      });
  },
});

export default clientsSlice.reducer;


// \features\dashboard\summarySlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { getDashboardSummary } from "../../api/dashboard";

export const fetchDashboardSummary = createAsyncThunk(
  "dashboard/fetchSummary",
  async (warehouseId) => {
    const response = await getDashboardSummary(warehouseId);
    return response.data;
  }
);

const summarySlice = createSlice({
  name: "dashboard",
  initialState: { data: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchDashboardSummary.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchDashboardSummary.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.data = action.payload;
      })
      .addCase(fetchDashboardSummary.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      });
  },
});

export default summarySlice.reducer;


// \features\employees\employeesSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as employeesAPI from "../../api/employees";

export const fetchEmployees = createAsyncThunk(
  "employees/fetchAll",
  async (params) => {
    const response = await employeesAPI.listEmployees(params);
    return response.data;
  }
);
export const fetchEmployeeById = createAsyncThunk(
  "employees/fetchById",
  async (id) => {
    const response = await employeesAPI.getEmployeeById(id);
    return response.data;
  }
);
export const createEmployee = createAsyncThunk(
  "employees/create",
  async (data) => {
    const response = await employeesAPI.createEmployee(data);
    return response.data;
  }
);

const employeesSlice = createSlice({
  name: "employees",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchEmployees.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchEmployees.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchEmployees.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchEmployeeById.fulfilled, (state, action) => {
        state.current = action.payload;
      })
      .addCase(createEmployee.fulfilled, (state, action) => {
        state.list.push(action.payload);
      });
  },
});

export default employeesSlice.reducer;


// \features\geography\geographySlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as geographyAPI from "../../api/geography";

export const fetchRegions = createAsyncThunk(
  "geography/fetchRegions",
  async () => {
    const response = await geographyAPI.listRegions();
    return response.data;
  }
);

export const fetchCountries = createAsyncThunk(
  "geography/fetchCountries",
  async (regionId) => {
    const response = await geographyAPI.listCountries(regionId);
    return response.data;
  }
);

export const createAddress = createAsyncThunk(
  "geography/createAddress",
  async (data) => {
    const response = await geographyAPI.createAddress(data);
    return response.data;
  }
);

const geographySlice = createSlice({
  name: "geography",
  initialState: {
    regions: [],
    countries: [],
    status: "idle",
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchRegions.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchRegions.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.regions = action.payload;
      })
      .addCase(fetchRegions.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchCountries.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchCountries.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.countries = action.payload;
      })
      .addCase(fetchCountries.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(createAddress.fulfilled, (state, action) => {
        state.list.push(action.payload);
      });
  },
});

export default geographySlice.reducer;


// \features\inventory\deliverySlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { deliverToClient } from "../../api/inventory";

export const deliverInventory = createAsyncThunk(
  "inventory/deliver",
  async (data) => {
    const response = await deliverToClient(data);
    return response.data;
  }
);

const deliverySlice = createSlice({
  name: "inventoryDelivery",
  initialState: { status: "idle", error: null, transaction: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(deliverInventory.pending, (state) => {
        state.status = "loading";
      })
      .addCase(deliverInventory.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.transaction = action.payload;
      })
      .addCase(deliverInventory.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      });
  },
});

export default deliverySlice.reducer;


// \features\inventory\receiveSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { receiveFromSupplier } from "../../api/inventory";

export const receiveInventory = createAsyncThunk(
  "inventory/receive",
  async (data) => {
    const response = await receiveFromSupplier(data);
    return response.data;
  }
);

const receiveSlice = createSlice({
  name: "inventoryReceive",
  initialState: { status: "idle", error: null, transaction: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(receiveInventory.pending, (state) => {
        state.status = "loading";
      })
      .addCase(receiveInventory.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.transaction = action.payload;
      })
      .addCase(receiveInventory.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      });
  },
});

export default receiveSlice.reducer;


// \features\inventory\transferSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { transferBetweenWarehouses } from "../../api/inventory";

export const transferInventory = createAsyncThunk(
  "inventory/transfer",
  async (data) => {
    const response = await transferBetweenWarehouses(data);
    return response.data;
  }
);

const transferSlice = createSlice({
  name: "inventoryTransfer",
  initialState: { status: "idle", error: null, transaction: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(transferInventory.pending, (state) => {
        state.status = "loading";
      })
      .addCase(transferInventory.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.transaction = action.payload;
      })
      .addCase(transferInventory.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      });
  },
});

export default transferSlice.reducer;


// \features\products\productsSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as productsAPI from "../../api/products";

export const fetchProducts = createAsyncThunk(
  "products/fetchAll",
  async (params) => {
    const response = await productsAPI.searchProducts(params);
    return response.data;
  }
);
export const fetchProductById = createAsyncThunk(
  "products/fetchById",
  async (id) => {
    const response = await productsAPI.getProductById(id);
    return response.data;
  }
);
export const createProduct = createAsyncThunk(
  "products/create",
  async (data) => {
    const response = await productsAPI.createProduct(data);
    return response.data;
  }
);
export const updateProduct = createAsyncThunk(
  "products/update",
  async ({ id, data }) => {
    const response = await productsAPI.updateProduct(id, data);
    return response.data;
  }
);
export const deleteProduct = createAsyncThunk("products/delete", async (id) => {
  await productsAPI.deleteProduct(id);
  return id;
});

const productsSlice = createSlice({
  name: "products",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchProducts.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchProducts.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchProducts.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchProductById.fulfilled, (state, action) => {
        state.current = action.payload;
      })
      .addCase(createProduct.fulfilled, (state, action) => {
        state.list.push(action.payload);
      })
      .addCase(updateProduct.fulfilled, (state, action) => {
        const idx = state.list.findIndex(
          (p) => p.productId === action.payload.productId
        );
        if (idx !== -1) state.list[idx] = action.payload;
      })
      .addCase(deleteProduct.fulfilled, (state, action) => {
        state.list = state.list.filter((p) => p.productId !== action.payload);
      });
  },
});

export default productsSlice.reducer;


// \features\selectedWarehouse\selectedWarehouseSlice.jsx

import { createSlice } from "@reduxjs/toolkit";

const selectedWarehouseSlice = createSlice({
  name: "selectedWarehouse",
  initialState: null,
  reducers: {
    setSelectedWarehouse: (_, action) => action.payload,
  },
});

export const { setSelectedWarehouse } = selectedWarehouseSlice.actions;
export default selectedWarehouseSlice.reducer;


// \features\suppliers\suppliersSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as suppliersAPI from "../../api/suppliers";

export const fetchSuppliers = createAsyncThunk(
  "suppliers/fetchAll",
  async (params) => {
    const response = await suppliersAPI.listSuppliers(params);
    return response.data;
  }
);
export const fetchSupplierById = createAsyncThunk(
  "suppliers/fetchById",
  async (id) => {
    const response = await suppliersAPI.getSupplierById(id);
    return response.data;
  }
);
export const createSupplier = createAsyncThunk(
  "suppliers/create",
  async (data) => {
    const response = await suppliersAPI.createSupplier(data);
    return response.data;
  }
);

const suppliersSlice = createSlice({
  name: "suppliers",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchSuppliers.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchSuppliers.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchSuppliers.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchSupplierById.fulfilled, (state, action) => {
        state.current = action.payload;
      })
      .addCase(createSupplier.fulfilled, (state, action) => {
        state.list.push(action.payload);
      });
  },
});

export default suppliersSlice.reducer;


// \features\transactions\transactionsSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as transactionsAPI from "../../api/transactions";

export const fetchTransactions = createAsyncThunk(
  "transactions/fetchAll",
  async (params) => {
    const response = await transactionsAPI.listTransactions(params);
    return response.data;
  }
);
export const fetchTransactionById = createAsyncThunk(
  "transactions/fetchById",
  async (id) => {
    const response = await transactionsAPI.getTransactionById(id);
    return response.data;
  }
);

const transactionsSlice = createSlice({
  name: "transactions",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchTransactions.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchTransactions.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchTransactions.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchTransactionById.fulfilled, (state, action) => {
        state.current = action.payload;
      });
  },
});

export default transactionsSlice.reducer;


// \features\warehouses\warehousesSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as warehousesAPI from "../../api/warehouses";

export const fetchWarehouses = createAsyncThunk(
  "warehouses/fetchAll",
  async (params) => {
    const response = await warehousesAPI.listWarehouses(params);
    return response.data;
  }
);
export const fetchWarehouseById = createAsyncThunk(
  "warehouses/fetchById",
  async (id) => {
    const response = await warehousesAPI.getWarehouseById(id);
    return response.data;
  }
);
export const createWarehouse = createAsyncThunk(
  "warehouses/create",
  async (data) => {
    const response = await warehousesAPI.createWarehouse(data);
    return response.data;
  }
);
export const updateWarehouse = createAsyncThunk(
  "warehouses/update",
  async ({ id, data }) => {
    const response = await warehousesAPI.updateWarehouse(id, data);
    return response.data;
  }
);
export const deleteWarehouse = createAsyncThunk(
  "warehouses/delete",
  async (id) => {
    await warehousesAPI.deleteWarehouse(id);
    return id;
  }
);

const warehousesSlice = createSlice({
  name: "warehouses",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchWarehouses.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchWarehouses.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchWarehouses.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchWarehouseById.fulfilled, (state, action) => {
        state.current = action.payload;
      })
      .addCase(createWarehouse.fulfilled, (state, action) => {
        state.list.push(action.payload);
      })
      .addCase(updateWarehouse.fulfilled, (state, action) => {
        const idx = state.list.findIndex(
          (w) => w.warehouseId === action.payload.warehouseId
        );
        if (idx !== -1) state.list[idx] = action.payload;
      })
      .addCase(deleteWarehouse.fulfilled, (state, action) => {
        state.list = state.list.filter((w) => w.warehouseId !== action.payload);
      });
  },
});

export default warehousesSlice.reducer;


// \pages\CategoriesPage.jsx

import { Link } from "react-router-dom";
import { FaPlus, FaTags } from "react-icons/fa";
import CategoryList from "../components/categories/CategoryList";

const CategoriesPage = () => {
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center space-x-2">
          <FaTags className="text-pink-500 w-6 h-6" />
          <h1 className="text-2xl font-semibold text-gray-800">
            Lista kategorii
          </h1>
        </div>
        <Link
          to="/categories/new"
          className="flex items-center bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition"
        >
          <FaPlus className="mr-2" /> Nowa Kategoria
        </Link>
      </div>
      <CategoryList />
    </div>
  );
};

export default CategoriesPage;


// \pages\ClientsPage.jsx

import { Link } from "react-router-dom";
import { FaPlus, FaUsers } from "react-icons/fa";
import ClientList from "../components/clients/ClientList";

const ClientsPage = () => {
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center space-x-2">
          <FaUsers className="text-pink-500 w-6 h-6" />
          <h1 className="text-2xl font-semibold text-gray-800">
            Lista klientów
          </h1>
        </div>
        <Link
          to="/clients/new"
          className="flex items-center bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition"
        >
          <FaPlus className="mr-2" /> Nowy Klient
        </Link>
      </div>
      <ClientList />
    </div>
  );
};

export default ClientsPage;


// \pages\DashboardPage.jsx

import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchDashboardSummary } from "../features/dashboard/summarySlice";
import SummaryTiles from "../components/Dashboard/SummaryTiles";
import Charts from "../components/Dashboard/Charts";
import Spinner from "../components/helper/Spinner";

const DashboardPage = () => {
  const dispatch = useDispatch();
  const selectedWarehouse = useSelector((s) => s.selectedWarehouse);
  const { data: summary, status, error } = useSelector((s) => s.dashboard);
  useEffect(() => {
    dispatch(fetchDashboardSummary(selectedWarehouse));
  }, [dispatch, selectedWarehouse]);
  if (status === "loading" || status === "idle") return <Spinner />;
  if (status === "failed") return <p className="text-red-500">{error}</p>;
  if (!summary)
    return <p className="text-red-500">Brak danych do wyświetlenia.</p>;
  return (
    <div className="space-y-6">
      <SummaryTiles summary={summary} />
      <Charts summary={summary} />
    </div>
  );
};

export default DashboardPage;


// \pages\EmployeesPage.jsx

import { Link } from "react-router-dom";
import { FaPlus, FaUserFriends } from "react-icons/fa";
import EmployeeList from "../components/employees/EmployeeList";

const EmployeesPage = () => {
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center space-x-2">
          <FaUserFriends className="text-pink-500 w-6 h-6" />
          <h1 className="text-2xl font-semibold text-gray-800">
            Lista pracowników
          </h1>
        </div>
        <Link
          to="/employees/new"
          className="flex items-center bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition"
        >
          <FaPlus className="mr-2" /> Nowy pracownik
        </Link>
      </div>
      <EmployeeList />
    </div>
  );
};

export default EmployeesPage;


// \pages\GeographyPage.jsx

import { useState } from "react";
import { FaGlobe } from "react-icons/fa";
import RegionList from "../components/geography/RegionList";
import CountryList from "../components/geography/CountryList";

const GeographyPage = () => {
  const [selectedRegion, setSelectedRegion] = useState({});
  return (
    <div className="space-y-6">
      <div className="flex items-center space-x-2">
        <FaGlobe className="text-pink-500 w-6 h-6" />
        <h1 className="text-2xl font-semibold text-gray-800">
          Lista regionów i krajów
        </h1>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <RegionList
          selectedRegion={selectedRegion}
          onSelect={setSelectedRegion}
        />
        <CountryList
          regionId={selectedRegion.id}
          regionName={selectedRegion.name}
        />
      </div>
    </div>
  );
};

export default GeographyPage;


// \pages\LoginPage.jsx

import { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { login } from "../features/auth/authSlice";
import Logo from "../assets/images/logo.png";

const LoginPage = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const { loggedIn, error } = useSelector((state) => state.auth);
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();
    dispatch(login({ username, password }));
  };

  useEffect(() => {
    if (loggedIn) {
      navigate("/");
    }
  }, [loggedIn, navigate]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white w-full max-w-md p-8 rounded-2xl shadow-xl">
        <div className="flex justify-center mb-6">
          <img src={Logo} alt="Logo" className="h-12" />
        </div>
        <h2 className="text-2xl font-semibold text-gray-800 text-center mb-8">
          Welcome Back
        </h2>
        <form className="space-y-6" onSubmit={(e) => handleSubmit(e)}>
          <div>
            <label
              htmlFor="username"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Login
            </label>
            <input
              type="text"
              id="username"
              name="username"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 transition"
              placeholder="Login"
              onChange={(e) => setUsername(e.target.value)}
            />
          </div>
          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Password
            </label>
            <input
              type="password"
              id="password"
              name="password"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 transition"
              placeholder="Password"
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>
          {error && <p style={{ color: "red" }}>{error}</p>}
          <button
            type="submit"
            className="w-full py-3 bg-gradient-to-r from-pink-500 to-pink-400 text-white font-medium rounded-lg shadow-md hover:from-pink-600 hover:to-pink-500 transition duration-300"
          >
            Log in
          </button>
        </form>
      </div>
    </div>
  );
};

export default LoginPage;


// \pages\ProductsPage.jsx

import { Link } from "react-router-dom";
import { FaPlus, FaBoxOpen } from "react-icons/fa";
import ProductList from "../components/products/ProductList";

const ProductsPage = () => {
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center space-x-2">
          <FaBoxOpen className="text-pink-500 w-6 h-6" />
          <h1 className="text-2xl font-semibold text-gray-800">
            Lista produktów
          </h1>
        </div>
        <Link
          to="/products/new"
          className="flex items-center bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition"
        >
          <FaPlus className="mr-2" /> Nowy Produkt
        </Link>
      </div>
      <ProductList />
    </div>
  );
};

export default ProductsPage;


// \pages\SuppliersPage.jsx

import { Link } from "react-router-dom";
import { FaPlus, FaUserTie } from "react-icons/fa";
import SupplierList from "../components/suppliers/SupplierList";

const SuppliersPage = () => {
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center space-x-2">
          <FaUserTie className="text-pink-500 w-6 h-6" />
          <h1 className="text-2xl font-semibold text-gray-800">
            Lista dostawców
          </h1>
        </div>
        <Link
          to="/suppliers/new"
          className="flex items-center bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition"
        >
          <FaPlus className="mr-2" /> Nowy Dostawca
        </Link>
      </div>
      <SupplierList />
    </div>
  );
};

export default SuppliersPage;


// \pages\TransactionsPage.jsx

import { FaClipboardList } from "react-icons/fa";
import TransactionList from "../components/transactions/TransactionList";

const TransactionsPage = () => {
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center space-x-2">
          <FaClipboardList className="text-pink-500 w-6 h-6" />
          <h1 className="text-2xl font-semibold text-gray-800">
            Lista transakcji
          </h1>
        </div>
      </div>
      <TransactionList />
    </div>
  );
};

export default TransactionsPage;


// \pages\WarehousesPage.jsx

import { Link } from "react-router-dom";
import { FaPlus, FaWarehouse } from "react-icons/fa";
import WarehouseList from "../components/warehouses/WarehouseList";

const WarehousesPage = () => {
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center space-x-2">
          <FaWarehouse className="text-pink-500 w-6 h-6" />
          <h1 className="text-2xl font-semibold text-gray-800">
            Lista magazynów
          </h1>
        </div>
        <Link
          to="/warehouses/new"
          className="flex items-center bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition"
        >
          <FaPlus className="mr-2" /> Nowy Magazyn
        </Link>
      </div>
      <WarehouseList />
    </div>
  );
};

export default WarehousesPage;


// \routes\AppRouter.jsx

import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import LoginPage from "../pages/LoginPage";
import DashboardPage from "../pages/DashboardPage";
import ProductsPage from "../pages/ProductsPage";
import CategoriesPage from "../pages/CategoriesPage";
import WarehousesPage from "../pages/WarehousesPage";
import TransactionsPage from "../pages/TransactionsPage";
import ClientsPage from "../pages/ClientsPage";
import SuppliersPage from "../pages/SuppliersPage";
import EmployeesPage from "../pages/EmployeesPage";
import GeographyPage from "../pages/GeographyPage";
import ProtectedRoute from "../components/Layout/ProtectedRoute";
import Layout from "../components/Layout/Layout";
import DefaultRedirect from "../components/Layout/DefaultRedirect";
import CategoryForm from "../components/categories/CategoryForm";
import CategoryDetail from "../components/categories/CategoryDetail";
import ClientForm from "../components/clients/ClientForm";
import ClientDetail from "../components/clients/ClientDetail";
import EmployeeForm from "../components/employees/EmployeeForm";
import EmployeeDetail from "../components/employees/EmployeeDetail";
import DeliveryPage from "../components/inventory/DeliveryPage";
import ReceivePage from "../components/inventory/ReceivePage";
import TransferPage from "../components/inventory/TransferPage";
import ProductForm from "../components/products/ProductForm";
import ProductDetail from "../components/products/ProductDetail";
import SupplierDetail from "../components/suppliers/SupplierDetail";
import SupplierForm from "../components/suppliers/SupplierForm";
import TransactionDetail from "../components/transactions/TransactionDetail";
import WarehouseDetail from "../components/warehouses/WarehouseDetail";
import WarehouseForm from "../components/warehouses/WarehouseForm";

const AppRouter = () => (
  <Router>
    <Routes>
      <Route path="/login" element={<LoginPage />} />
      <Route
        path="/*"
        element={
          <ProtectedRoute>
            <Layout>
              <Routes>
                <Route index element={<DashboardPage />} />
                <Route path="products" element={<ProductsPage />} />
                <Route path="products/new" element={<ProductForm />} />
                <Route path="products/:id/edit" element={<ProductForm />} />
                <Route path="products/:id" element={<ProductDetail />} />
                <Route path="categories" element={<CategoriesPage />} />
                <Route path="categories/new" element={<CategoryForm />} />
                <Route path="categories/:id" element={<CategoryDetail />} />
                <Route path="categories/:id/edit" element={<CategoryForm />} />
                <Route path="warehouses" element={<WarehousesPage />} />
                <Route path="warehouses/new" element={<WarehouseForm />} />
                <Route path="warehouses/:id/edit" element={<WarehouseForm />} />
                <Route path="warehouses/:id" element={<WarehouseDetail />} />
                <Route path="inventory/receive" element={<ReceivePage />} />
                <Route path="inventory/transfer" element={<TransferPage />} />
                <Route path="inventory/delivery" element={<DeliveryPage />} />
                <Route path="transactions" element={<TransactionsPage />} />
                <Route
                  path="transactions/:id"
                  element={<TransactionDetail />}
                />
                <Route path="clients" element={<ClientsPage />} />
                <Route path="clients/new" element={<ClientForm />} />
                <Route path="clients/:id" element={<ClientDetail />} />
                <Route path="suppliers" element={<SuppliersPage />} />
                <Route path="suppliers/new" element={<SupplierForm />} />
                <Route path="suppliers/:id" element={<SupplierDetail />} />
                <Route path="employees" element={<EmployeesPage />} />
                <Route path="employees/new" element={<EmployeeForm />} />
                <Route path="employees/:id" element={<EmployeeDetail />} />
                <Route path="geography" element={<GeographyPage />} />
                <Route path="*" element={<DefaultRedirect />} />
              </Routes>
            </Layout>
          </ProtectedRoute>
        }
      />
    </Routes>
  </Router>
);

export default AppRouter;


// \utils\apiClient.jsx

import axios from "axios";

const apiClient = axios.create({
  baseURL: import.meta.env.VITE_API_URL || "http://localhost:3000",
});

export default apiClient;


// \utils\helpers.jsx

export const currencyFormatter = (price) =>
  new Intl.NumberFormat("pl-PL", {
    style: "currency",
    currency: "USD",
    currencyDisplay: "narrowSymbol",
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(price);

export const numberFormatter = (number) =>
  new Intl.NumberFormat("pl-PL", {
    minimumFractionDigits: 0,
    maximumFractionDigits: 2,
  }).format(number);

export const dateFormatter = (date) => {
  return new Intl.DateTimeFormat("pl-PL", {
    year: "numeric",
    month: "short",
    day: "2-digit",
  }).format(new Date(date));
};


