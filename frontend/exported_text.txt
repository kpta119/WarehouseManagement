// \App.jsx

import { Provider } from "react-redux";
import store from "./app/store";
import AppRouter from "./routes/AppRouter";
import "./assets/styles/global.css";

const App = () => (
  <Provider store={store}>
    <AppRouter />
  </Provider>
);

export default App;


// \index.jsx

import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./assets/styles/global.css";
import App from "./App.jsx";

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <App />
  </StrictMode>
);


// \api\categories.jsx

import apiClient from "../utils/apiClient";
import { dummyCategories } from "../utils/dummyData";

export const listCategories = () =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyCategories })
    : apiClient.get("/api/categories");

export const createCategory = (data) => apiClient.post("/api/categories", data);

export const updateCategory = (categoryId, data) =>
  apiClient.put(`/api/categories/${categoryId}`, data);

export const deleteCategory = (categoryId) =>
  apiClient.delete(`/api/categories/${categoryId}`);


// \api\clients.jsx

import apiClient from "../utils/apiClient";
import { dummyClients, dummyClientById } from "../utils/dummyData";

export const listClients = () =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyClients })
    : apiClient.get("/api/clients");

export const getClientById = (clientId) =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyClientById })
    : apiClient.get(`/api/clients/${clientId}`);

export const createClient = (data) => apiClient.post("/api/clients", data);


// \api\dashboard.jsx

import apiClient from "../utils/apiClient";
import { dummyDashboardSummary } from "../utils/dummyData";

export const getDashboardSummary = (warehouseId) =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyDashboardSummary })
    : apiClient.get("/api/dashboard/summary", { params: { warehouseId } });


// \api\employees.jsx

import apiClient from "../utils/apiClient";
import { dummyEmployees, dummyEmployeeById } from "../utils/dummyData";

export const listEmployees = (params) =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyEmployees })
    : apiClient.get("/api/employees", { params });

export const getEmployeeById = (employeeId) =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyEmployeeById })
    : apiClient.get(`/api/employees/${employeeId}`);

export const createEmployee = (data) => apiClient.post("/api/employees", data);


// \api\geography.jsx

import apiClient from "../utils/apiClient";
import { dummyRegions, dummyCountries } from "../utils/dummyData";

export const listRegions = () =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyRegions })
    : apiClient.get("/api/regions");

export const listCountries = (regionId) =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyCountries })
    : apiClient.get("/api/countries", { params: { regionId } });

export const createAddress = (data) => apiClient.post("/api/addresses", data);


// \api\inventory.jsx

import apiClient from "../utils/apiClient";

export const receiveFromSupplier = (data) =>
  apiClient.post("/api/inventory/receive", data);

export const transferBetweenWarehouses = (data) =>
  apiClient.post("/api/inventory/transfer", data);

export const deliverToClient = (data) =>
  apiClient.post("/api/inventory/delivery", data);


// \api\products.jsx

import apiClient from "../utils/apiClient";
import {
  dummyProducts,
  dummyProductById,
  dummyLowStock,
  dummyBestSelling,
} from "../utils/dummyData";

export const searchProducts = (params) =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyProducts })
    : apiClient.get("/api/products/search", { params });

export const getProductById = (productId) =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyProductById })
    : apiClient.get(`/api/products/${productId}`);

export const getLowStockProducts = (warehouseId) =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyLowStock })
    : apiClient.get("/api/products/low-stock", { params: { warehouseId } });

export const getBestSelling = ({ warehouseId, period }) =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyBestSelling })
    : apiClient.get("/api/products/best-selling", {
        params: { warehouseId, period },
      });

export const createProduct = (data) => apiClient.post("/api/products", data);

export const updateProduct = (productId, data) =>
  apiClient.put(`/api/products/${productId}`, data);

export const deleteProduct = (productId) =>
  apiClient.delete(`/api/products/${productId}`);


// \api\suppliers.jsx

import apiClient from "../utils/apiClient";
import { dummySupplierById, dummySuppliers } from "../utils/dummyData";

export const listSuppliers = () =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummySuppliers })
    : apiClient.get("/api/suppliers");

export const getSupplierById = (supplierId) =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummySupplierById })
    : apiClient.get(`/api/suppliers/${supplierId}`);

export const createSupplier = (data) => apiClient.post("/api/suppliers", data);


// \api\transactions.jsx

import apiClient from "../utils/apiClient";
import { dummyTransactions, dummyTransactionById } from "../utils/dummyData";

export const listTransactions = (params) =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyTransactions })
    : apiClient.get("/api/transactions", { params });

export const getTransactionById = (transactionId) =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyTransactionById })
    : apiClient.get(`/api/transactions/${transactionId}`);


// \api\warehouses.jsx

import apiClient from "../utils/apiClient";
import { dummyWarehouses, dummyWarehouseById } from "../utils/dummyData";

export const listWarehouses = () =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyWarehouses })
    : apiClient.get("/api/warehouses");

export const getWarehouseById = (warehouseId) =>
  import.meta.env.DEV
    ? Promise.resolve({ data: dummyWarehouseById })
    : apiClient.get(`/api/warehouses/${warehouseId}`);

export const createWarehouse = (data) =>
  apiClient.post("/api/warehouses", data);

export const updateWarehouse = (warehouseId, data) =>
  apiClient.put(`/api/warehouses/${warehouseId}`, data);

export const deleteWarehouse = (warehouseId) =>
  apiClient.delete(`/api/warehouses/${warehouseId}`);


// \app\rootReducer.jsx

import { combineReducers } from "redux";
import authReducer from "../features/auth/authSlice";
import productsReducer from "../features/products/productsSlice";
import categoriesReducer from "../features/categories/categoriesSlice";
import warehousesReducer from "../features/warehouses/warehousesSlice";
import receiveReducer from "../features/inventory/receiveSlice";
import transferReducer from "../features/inventory/transferSlice";
import deliveryReducer from "../features/inventory/deliverySlice";
import transactionsReducer from "../features/transactions/transactionsSlice";
import clientsReducer from "../features/clients/clientsSlice";
import suppliersReducer from "../features/suppliers/suppliersSlice";
import employeesReducer from "../features/employees/employeesSlice";
import summaryReducer from "../features/dashboard/summarySlice";
import selectedWarehouseReducer from "../features/selectedWarehouse/selectedWarehouseSlice";

export default combineReducers({
  auth: authReducer,
  products: productsReducer,
  categories: categoriesReducer,
  warehouses: warehousesReducer,
  inventory: combineReducers({
    receive: receiveReducer,
    transfer: transferReducer,
    delivery: deliveryReducer,
  }),
  transactions: transactionsReducer,
  clients: clientsReducer,
  suppliers: suppliersReducer,
  employees: employeesReducer,
  dashboard: summaryReducer,
  selectedWarehouse: selectedWarehouseReducer,
});


// \app\store.jsx

import { configureStore } from "@reduxjs/toolkit";
import rootReducer from "./rootReducer";

const store = configureStore({
  reducer: rootReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: false,
    }),
});

export default store;


// \components\Dashboard\Charts.jsx

import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from "recharts";

export default function Charts({ summary }) {
  const barData = [
    {
      name: "Monthly",
      Receipts: summary.monthlyReceipts,
      Deliveries: summary.monthlyDeliveries,
    },
  ];
  const inStock = summary.productsCount - summary.lowStockCount;
  const pieData = [
    { name: "Low stock", value: summary.lowStockCount },
    { name: "In stock", value: inStock },
  ];
  const COLORS = ["#EF4444", "#10B981"];
  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-lg font-semibold mb-4">Monthly movements</h2>
        <ResponsiveContainer width="100%" height={260}>
          <BarChart data={barData}>
            <XAxis dataKey="name" tick={{ fill: "#6B7280" }} />
            <YAxis tick={{ fill: "#6B7280" }} />
            <Tooltip />
            <Legend />
            <Bar dataKey="Receipts" fill="#3B82F6" />
            <Bar dataKey="Deliveries" fill="#8B5CF6" />
          </BarChart>
        </ResponsiveContainer>
      </div>
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-lg font-semibold mb-4">Stock status</h2>
        <ResponsiveContainer width="100%" height={260}>
          <PieChart>
            <Pie
              data={pieData}
              dataKey="value"
              nameKey="name"
              innerRadius={50}
              outerRadius={80}
              label
            >
              {pieData.map((_, idx) => (
                <Cell key={idx} fill={COLORS[idx]} />
              ))}
            </Pie>
            <Tooltip />
            <Legend verticalAlign="bottom" height={36} />
          </PieChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
}


// \components\Dashboard\SummaryTiles.jsx

// \components\Dashboard\SummaryTiles.jsx

import { Link } from "react-router-dom";
import {
  FaBox,
  FaTags,
  FaTruckLoading,
  FaTruckPickup,
  FaExclamationTriangle,
  FaStar,
  FaDollarSign,
  FaSyncAlt,
  FaCalendarCheck,
  FaCalendarDay,
} from "react-icons/fa";

const SummaryTiles = ({ summary }) => {
  const {
    productsCount,
    categoriesCount,
    monthlyReceipts,
    monthlyDeliveries,
    lowStockCount,
    topProduct,
    inventoryValue,
    turnoverLastWeek,
    lastReceiptDate,
    lastDeliveryDate,
    lastReceiptId,
    lastDeliveryId,
    topProductId,
  } = summary;

  const tiles = [
    {
      icon: <FaBox className="text-pink-400 w-6 h-6" />,
      label: "Products",
      value: productsCount,
      to: "/products",
    },
    {
      icon: <FaTags className="text-pink-400 w-6 h-6" />,
      label: "Categories",
      value: categoriesCount,
      to: "/categories",
    },
    {
      icon: <FaTruckLoading className="text-pink-400 w-6 h-6" />,
      label: "Receipts (M)",
      value: monthlyReceipts,
      to: "/inventory/receive",
    },
    {
      icon: <FaTruckPickup className="text-pink-400 w-6 h-6" />,
      label: "Deliveries (M)",
      value: monthlyDeliveries,
      to: "/inventory/delivery",
    },
    {
      icon: <FaExclamationTriangle className="text-pink-400 w-6 h-6" />,
      label: "Low stock",
      value: lowStockCount,
      to: "/products?filter=low-stock",
    },
    {
      icon: <FaStar className="text-pink-400 w-6 h-6" />,
      label: "Top product",
      value: topProduct,
      to: topProductId ? `/products/${topProductId}` : "/products",
    },
    {
      icon: <FaDollarSign className="text-pink-400 w-6 h-6" />,
      label: "Inventory $",
      value: inventoryValue?.toLocaleString(undefined, {
        style: "currency",
        currency: "USD",
        maximumFractionDigits: 0,
      }),
      to: "/warehouses",
    },
    {
      icon: <FaSyncAlt className="text-pink-400 w-6 h-6" />,
      label: "Turnover LW",
      value: turnoverLastWeek?.toLocaleString(undefined, {
        style: "currency",
        currency: "USD",
        maximumFractionDigits: 0,
      }),
      to: "/transactions?period=last-week",
    },
    {
      icon: <FaCalendarCheck className="text-pink-400 w-6 h-6" />,
      label: "Last receipt",
      value: new Date(lastReceiptDate).toLocaleDateString(),
      to: lastReceiptId ? `/transactions/${lastReceiptId}` : "/transactions",
    },
    {
      icon: <FaCalendarDay className="text-pink-400 w-6 h-6" />,
      label: "Last delivery",
      value: new Date(lastDeliveryDate).toLocaleDateString(),
      to: lastDeliveryId ? `/transactions/${lastDeliveryId}` : "/transactions",
    },
  ];

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4 cursor-pointer">
      {tiles.map(({ icon, label, value, to }) => {
        const tileContent = (
          <div className="bg-white rounded-lg shadow p-4 flex flex-col items-start hover:bg-pink-50 transition-colors">
            <div className="flex items-center mb-2">
              {icon}
              <p className="ml-2 text-sm text-gray-400">{label}</p>
            </div>
            <p className="text-2xl font-semibold text-gray-800">{value}</p>
          </div>
        );
        return to ? (
          <Link key={label} to={to}>
            {tileContent}
          </Link>
        ) : (
          <div key={label}>{tileContent}</div>
        );
      })}
    </div>
  );
};

export default SummaryTiles;


// \components\Forms\CategoryForm.jsx



// \components\Forms\ClientForm.jsx



// \components\Forms\EmployeeForm.jsx



// \components\Forms\InventoryForm.jsx



// \components\Forms\ProductForm.jsx



// \components\Forms\SupplierForm.jsx



// \components\Forms\TransactionFilter.jsx



// \components\Forms\WarehouseForm.jsx



// \components\Geography\AddressForm.jsx



// \components\Geography\CountriesList.jsx



// \components\Geography\RegionsList.jsx



// \components\Layout\DefaultRedirect.jsx

import { useSelector } from "react-redux";
import { Navigate } from "react-router-dom";

const DefaultRedirect = () => {
  const loggedIn = useSelector((state) => state.auth.loggedIn);
  return loggedIn ? (
    <Navigate to="/" replace />
  ) : (
    <Navigate to="/login" replace />
  );
};

export default DefaultRedirect;


// \components\Layout\Layout.jsx

import Sidebar from "./Sidebar";
import Navbar from "./Navbar";

const Layout = ({ children }) => (
  <div className="flex">
    <Sidebar />
    <div className="flex-1 ml-64">
      <Navbar />
      <main className="p-6">{children}</main>
    </div>
  </div>
);

export default Layout;


// \components\Layout\Navbar.jsx

import { useDispatch, useSelector } from "react-redux";
import { useLocation, useNavigate } from "react-router-dom";
import { logout } from "../../features/auth/authSlice";
import { fetchWarehouses } from "../../features/warehouses/warehousesSlice";
import { setSelectedWarehouse } from "../../features/selectedWarehouse/selectedWarehouseSlice";
import { FaChevronDown, FaSignOutAlt } from "react-icons/fa";
import { useEffect } from "react";

const titles = {
  "/": "Dashboard",
  "/products": "Products",
  "/categories": "Categories",
  "/warehouses": "Warehouses",
  "/inventory/receive": "Receive Inventory",
  "/inventory/transfer": "Transfer Inventory",
  "/inventory/delivery": "Delivery",
  "/transactions": "Transactions",
  "/clients": "Clients",
  "/suppliers": "Suppliers",
  "/employees": "Employees",
  "/geography": "Geography",
};

export default function Navbar() {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { pathname } = useLocation();
  const { list: warehouses } = useSelector((s) => s.warehouses);
  const selectedWarehouse = useSelector((s) => s.selectedWarehouse);
  useEffect(() => {
    dispatch(fetchWarehouses());
  }, [dispatch]);
  const handleLogout = () => {
    dispatch(logout());
    navigate("/login");
  };
  const title =
    titles[pathname] ||
    pathname
      .split("/")
      .filter(Boolean)
      .join(" ")
      .replace(/\b\w/g, (c) => c.toUpperCase());
  return (
    <header className="flex items-center justify-between bg-white shadow p-4">
      <div className="flex items-center">
        <h1 className="text-2xl font-semibold text-gray-800">{title}</h1>
      </div>
      <div className="relative mx-4">
        <select
          className="
            block
            appearance-none
            w-80
            bg-white
            border border-gray-300
            text-gray-700
            py-2 px-3 pr-8
            rounded-md
            leading-tight
            focus:outline-none focus:ring-1 focus:ring-pink-500 focus:border-pink-500
            transition-colors duration-300
          "
          value={selectedWarehouse ?? ""}
          onChange={(e) => {
            const val = e.target.value;
            dispatch(setSelectedWarehouse(val === "" ? null : Number(val)));
          }}
        >
          <option value="">All Warehouses</option>
          {warehouses.map((w) => (
            <option key={w.warehouseId} value={w.warehouseId}>
              {w.name}
            </option>
          ))}
        </select>
        <FaChevronDown className="pointer-events-none absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
      </div>
      <div className="flex items-center">
        <button
          className="flex items-center text-gray-600 hover:text-pink-800 transition-colors duration-300 cursor-pointer"
          onClick={handleLogout}
        >
          <FaSignOutAlt className="mr-2" />
          Logout
        </button>
      </div>
    </header>
  );
}


// \components\Layout\ProtectedRoute.jsx

import { Navigate } from "react-router-dom";
import { useSelector } from "react-redux";

const ProtectedRoute = ({ children }) => {
  const loggedIn = useSelector((state) => state.auth.loggedIn);
  return loggedIn ? children : <Navigate to="/login" />;
};

export default ProtectedRoute;


// \components\Layout\Sidebar.jsx

import Logo from "../../assets/images/logo.png";
import SidebarLink from "./SidebarLink";
import { AiOutlineHome } from "react-icons/ai";
import {
  FaBoxOpen,
  FaTags,
  FaWarehouse,
  FaTruck,
  FaExchangeAlt,
  FaClipboardList,
  FaUsers,
  FaUserTie,
  FaUserFriends,
  FaGlobe,
} from "react-icons/fa";

export default function Sidebar() {
  return (
    <aside className="w-64 h-screen bg-white shadow-lg p-4 fixed">
      <nav className="flex flex-col space-y-2">
        <div className="flex items-center mb-4">
          <img src={Logo} alt="Logo" className="h-10 w-10 rounded-full mr-2" />
          <span className="text-xl font-bold">BD2 gr. 03</span>
        </div>
        <SidebarLink to="/" end icon={AiOutlineHome} label="Dashboard" />
        <SidebarLink to="/products" icon={FaBoxOpen} label="Products" />
        <SidebarLink to="/categories" icon={FaTags} label="Categories" />
        <SidebarLink to="/warehouses" icon={FaWarehouse} label="Warehouses" />
        <SidebarLink
          to="/transactions"
          icon={FaClipboardList}
          label="Transactions"
        />
        <SidebarLink to="/clients" icon={FaUsers} label="Clients" />
        <SidebarLink to="/suppliers" icon={FaUserTie} label="Suppliers" />
        <SidebarLink to="/employees" icon={FaUserFriends} label="Employees" />
        <SidebarLink to="/geography" icon={FaGlobe} label="Geography" />
        <div className="mt-4 border-t pt-4">
          <p className="text-xs uppercase text-gray-500 px-2">Inventory</p>
          <SidebarLink to="/inventory/receive" icon={FaTruck} label="Receive" />
          <SidebarLink
            to="/inventory/transfer"
            icon={FaExchangeAlt}
            label="Transfer"
          />
          <SidebarLink
            to="/inventory/delivery"
            icon={FaTruck}
            label="Delivery"
          />
        </div>
      </nav>
    </aside>
  );
}


// \components\Layout\SidebarLink.jsx

import { NavLink } from "react-router-dom";

const SidebarLink = ({ to, icon: Icon, label }) => {
  return (
    <NavLink
      to={to}
      className={({ isActive }) => `
        flex items-center p-2
        border-2 rounded-lg
        transition-colors duration-300 ${
          isActive
            ? "bg-pink-100 text-pink-800 border-pink-300"
            : "text-gray-600 border-transparent hover:bg-pink-100 hover:text-pink-800 hover:border-pink-300"
        }`}
    >
      <Icon className="mr-4 text-xl" />
      {label}
    </NavLink>
  );
};

export default SidebarLink;


// \components\Tables\DataTable.jsx



// \components\Tables\Pagination.jsx



// \features\auth\authSlice.jsx

import { createSlice } from "@reduxjs/toolkit";

const persisted = localStorage.getItem("loggedIn") === "true";

const authSlice = createSlice({
  name: "auth",
  initialState: { loggedIn: persisted, error: null },
  reducers: {
    login: (state, action) => {
      const { username, password } = action.payload;
      if (username === "admin" && password === "admin") {
        state.loggedIn = true;
        state.error = null;
        localStorage.setItem("loggedIn", "true");
      } else {
        state.loggedIn = false;
        state.error = "Nieprawidłowa nazwa lub hasło";
        localStorage.removeItem("loggedIn");
      }
    },
    logout: (state) => {
      state.loggedIn = false;
      state.error = null;
      localStorage.removeItem("loggedIn");
    },
  },
});

export const { login, logout } = authSlice.actions;
export default authSlice.reducer;


// \features\categories\categoriesSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as categoriesAPI from "../../api/categories";

export const fetchCategories = createAsyncThunk(
  "categories/fetchAll",
  async () => {
    const response = await categoriesAPI.listCategories();
    return response.data;
  }
);
export const createCategory = createAsyncThunk(
  "categories/create",
  async (data) => {
    const response = await categoriesAPI.createCategory(data);
    return response.data;
  }
);
export const updateCategory = createAsyncThunk(
  "categories/update",
  async ({ id, data }) => {
    const response = await categoriesAPI.updateCategory(id, data);
    return response.data;
  }
);
export const deleteCategory = createAsyncThunk(
  "categories/delete",
  async (id) => {
    await categoriesAPI.deleteCategory(id);
    return id;
  }
);

const categoriesSlice = createSlice({
  name: "categories",
  initialState: { list: [], status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchCategories.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchCategories.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchCategories.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(createCategory.fulfilled, (state, action) => {
        state.list.push(action.payload);
      })
      .addCase(updateCategory.fulfilled, (state, action) => {
        const idx = state.list.findIndex(
          (c) => c.categoryId === action.payload.categoryId
        );
        if (idx !== -1) state.list[idx] = action.payload;
      })
      .addCase(deleteCategory.fulfilled, (state, action) => {
        state.list = state.list.filter((c) => c.categoryId !== action.payload);
      });
  },
});

export default categoriesSlice.reducer;


// \features\clients\clientsSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as clientsAPI from "../../api/clients";

export const fetchClients = createAsyncThunk("clients/fetchAll", async () => {
  const response = await clientsAPI.listClients();
  return response.data;
});
export const fetchClientById = createAsyncThunk(
  "clients/fetchById",
  async (id) => {
    const response = await clientsAPI.getClientById(id);
    return response.data;
  }
);
export const createClient = createAsyncThunk("clients/create", async (data) => {
  const response = await clientsAPI.createClient(data);
  return response.data;
});

const clientsSlice = createSlice({
  name: "clients",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchClients.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchClients.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchClients.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchClientById.fulfilled, (state, action) => {
        state.current = action.payload;
      })
      .addCase(createClient.fulfilled, (state, action) => {
        state.list.push(action.payload);
      });
  },
});

export default clientsSlice.reducer;


// \features\dashboard\summarySlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { getDashboardSummary } from "../../api/dashboard";

export const fetchDashboardSummary = createAsyncThunk(
  "dashboard/fetchSummary",
  async (warehouseId) => {
    const response = await getDashboardSummary(warehouseId);
    return response.data;
  }
);

const summarySlice = createSlice({
  name: "dashboard",
  initialState: { data: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchDashboardSummary.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchDashboardSummary.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.data = action.payload;
      })
      .addCase(fetchDashboardSummary.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      });
  },
});

export default summarySlice.reducer;


// \features\employees\employeesSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as employeesAPI from "../../api/employees";

export const fetchEmployees = createAsyncThunk(
  "employees/fetchAll",
  async (params) => {
    const response = await employeesAPI.listEmployees(params);
    return response.data;
  }
);
export const fetchEmployeeById = createAsyncThunk(
  "employees/fetchById",
  async (id) => {
    const response = await employeesAPI.getEmployeeById(id);
    return response.data;
  }
);
export const createEmployee = createAsyncThunk(
  "employees/create",
  async (data) => {
    const response = await employeesAPI.createEmployee(data);
    return response.data;
  }
);

const employeesSlice = createSlice({
  name: "employees",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchEmployees.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchEmployees.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchEmployees.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchEmployeeById.fulfilled, (state, action) => {
        state.current = action.payload;
      })
      .addCase(createEmployee.fulfilled, (state, action) => {
        state.list.push(action.payload);
      });
  },
});

export default employeesSlice.reducer;


// \features\inventory\deliverySlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { deliverToClient } from "../../api/inventory";

export const deliverInventory = createAsyncThunk(
  "inventory/deliver",
  async (data) => {
    const response = await deliverToClient(data);
    return response.data;
  }
);

const deliverySlice = createSlice({
  name: "inventoryDelivery",
  initialState: { status: "idle", error: null, transaction: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(deliverInventory.pending, (state) => {
        state.status = "loading";
      })
      .addCase(deliverInventory.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.transaction = action.payload;
      })
      .addCase(deliverInventory.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      });
  },
});

export default deliverySlice.reducer;


// \features\inventory\receiveSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { receiveFromSupplier } from "../../api/inventory";

export const receiveInventory = createAsyncThunk(
  "inventory/receive",
  async (data) => {
    const response = await receiveFromSupplier(data);
    return response.data;
  }
);

const receiveSlice = createSlice({
  name: "inventoryReceive",
  initialState: { status: "idle", error: null, transaction: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(receiveInventory.pending, (state) => {
        state.status = "loading";
      })
      .addCase(receiveInventory.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.transaction = action.payload;
      })
      .addCase(receiveInventory.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      });
  },
});

export default receiveSlice.reducer;


// \features\inventory\transferSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { transferBetweenWarehouses } from "../../api/inventory";

export const transferInventory = createAsyncThunk(
  "inventory/transfer",
  async (data) => {
    const response = await transferBetweenWarehouses(data);
    return response.data;
  }
);

const transferSlice = createSlice({
  name: "inventoryTransfer",
  initialState: { status: "idle", error: null, transaction: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(transferInventory.pending, (state) => {
        state.status = "loading";
      })
      .addCase(transferInventory.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.transaction = action.payload;
      })
      .addCase(transferInventory.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      });
  },
});

export default transferSlice.reducer;


// \features\products\productsSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as productsAPI from "../../api/products";

export const fetchProducts = createAsyncThunk(
  "products/fetchAll",
  async (params) => {
    const response = await productsAPI.searchProducts(params);
    return response.data;
  }
);
export const fetchProductById = createAsyncThunk(
  "products/fetchById",
  async (id) => {
    const response = await productsAPI.getProductById(id);
    return response.data;
  }
);
export const createProduct = createAsyncThunk(
  "products/create",
  async (data) => {
    const response = await productsAPI.createProduct(data);
    return response.data;
  }
);
export const updateProduct = createAsyncThunk(
  "products/update",
  async ({ id, data }) => {
    const response = await productsAPI.updateProduct(id, data);
    return response.data;
  }
);
export const deleteProduct = createAsyncThunk("products/delete", async (id) => {
  await productsAPI.deleteProduct(id);
  return id;
});

const productsSlice = createSlice({
  name: "products",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchProducts.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchProducts.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchProducts.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchProductById.fulfilled, (state, action) => {
        state.current = action.payload;
      })
      .addCase(createProduct.fulfilled, (state, action) => {
        state.list.push(action.payload);
      })
      .addCase(updateProduct.fulfilled, (state, action) => {
        const idx = state.list.findIndex(
          (p) => p.productId === action.payload.productId
        );
        if (idx !== -1) state.list[idx] = action.payload;
      })
      .addCase(deleteProduct.fulfilled, (state, action) => {
        state.list = state.list.filter((p) => p.productId !== action.payload);
      });
  },
});

export default productsSlice.reducer;


// \features\selectedWarehouse\selectedWarehouseSlice.jsx

import { createSlice } from "@reduxjs/toolkit";

const selectedWarehouseSlice = createSlice({
  name: "selectedWarehouse",
  initialState: null,
  reducers: {
    setSelectedWarehouse: (_, action) => action.payload,
  },
});

export const { setSelectedWarehouse } = selectedWarehouseSlice.actions;
export default selectedWarehouseSlice.reducer;


// \features\suppliers\suppliersSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as suppliersAPI from "../../api/suppliers";

export const fetchSuppliers = createAsyncThunk(
  "suppliers/fetchAll",
  async () => {
    const response = await suppliersAPI.listSuppliers();
    return response.data;
  }
);
export const fetchSupplierById = createAsyncThunk(
  "suppliers/fetchById",
  async (id) => {
    const response = await suppliersAPI.getSupplierById(id);
    return response.data;
  }
);
export const createSupplier = createAsyncThunk(
  "suppliers/create",
  async (data) => {
    const response = await suppliersAPI.createSupplier(data);
    return response.data;
  }
);

const suppliersSlice = createSlice({
  name: "suppliers",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchSuppliers.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchSuppliers.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchSuppliers.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchSupplierById.fulfilled, (state, action) => {
        state.current = action.payload;
      })
      .addCase(createSupplier.fulfilled, (state, action) => {
        state.list.push(action.payload);
      });
  },
});

export default suppliersSlice.reducer;


// \features\transactions\transactionsSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as transactionsAPI from "../../api/transactions";

export const fetchTransactions = createAsyncThunk(
  "transactions/fetchAll",
  async (params) => {
    const response = await transactionsAPI.listTransactions(params);
    return response.data;
  }
);
export const fetchTransactionById = createAsyncThunk(
  "transactions/fetchById",
  async (id) => {
    const response = await transactionsAPI.getTransactionById(id);
    return response.data;
  }
);

const transactionsSlice = createSlice({
  name: "transactions",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchTransactions.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchTransactions.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchTransactions.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchTransactionById.fulfilled, (state, action) => {
        state.current = action.payload;
      });
  },
});

export default transactionsSlice.reducer;


// \features\warehouses\warehousesSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as warehousesAPI from "../../api/warehouses";

export const fetchWarehouses = createAsyncThunk(
  "warehouses/fetchAll",
  async () => {
    const response = await warehousesAPI.listWarehouses();
    return response.data;
  }
);
export const fetchWarehouseById = createAsyncThunk(
  "warehouses/fetchById",
  async (id) => {
    const response = await warehousesAPI.getWarehouseById(id);
    return response.data;
  }
);
export const createWarehouse = createAsyncThunk(
  "warehouses/create",
  async (data) => {
    const response = await warehousesAPI.createWarehouse(data);
    return response.data;
  }
);
export const updateWarehouse = createAsyncThunk(
  "warehouses/update",
  async ({ id, data }) => {
    const response = await warehousesAPI.updateWarehouse(id, data);
    return response.data;
  }
);
export const deleteWarehouse = createAsyncThunk(
  "warehouses/delete",
  async (id) => {
    await warehousesAPI.deleteWarehouse(id);
    return id;
  }
);

const warehousesSlice = createSlice({
  name: "warehouses",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchWarehouses.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchWarehouses.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchWarehouses.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchWarehouseById.fulfilled, (state, action) => {
        state.current = action.payload;
      })
      .addCase(createWarehouse.fulfilled, (state, action) => {
        state.list.push(action.payload);
      })
      .addCase(updateWarehouse.fulfilled, (state, action) => {
        const idx = state.list.findIndex(
          (w) => w.warehouseId === action.payload.warehouseId
        );
        if (idx !== -1) state.list[idx] = action.payload;
      })
      .addCase(deleteWarehouse.fulfilled, (state, action) => {
        state.list = state.list.filter((w) => w.warehouseId !== action.payload);
      });
  },
});

export default warehousesSlice.reducer;


// \pages\CategoriesPage.jsx

const CategoriesPage = () => (
  <div>
    <h1>Categories Page</h1>
  </div>
);

export default CategoriesPage;


// \pages\ClientDetailPage.jsx

import { useParams } from "react-router-dom";

const ClientDetailPage = () => {
  const { id } = useParams();
  return (
    <div>
      <h1>Client Detail Page</h1>
      <p>Params: {JSON.stringify({ id })}</p>
    </div>
  );
};

export default ClientDetailPage;


// \pages\ClientsPage.jsx

const ClientsPage = () => (
  <div>
    <h1>Clients Page</h1>
  </div>
);

export default ClientsPage;


// \pages\DashboardPage.jsx

import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchDashboardSummary } from "../features/dashboard/summarySlice";
import SummaryTiles from "../components/Dashboard/SummaryTiles";
import Charts from "../components/Dashboard/Charts";

const DashboardPage = () => {
  const dispatch = useDispatch();
  const selectedWarehouse = useSelector((s) => s.selectedWarehouse);
  const { data: summary, status, error } = useSelector((s) => s.dashboard);
  useEffect(() => {
    dispatch(fetchDashboardSummary(selectedWarehouse));
  }, [dispatch, selectedWarehouse]);
  if (status === "loading" || status === "idle") return <p>Loading...</p>;
  if (status === "failed") return <p className="text-red-500">{error}</p>;
  return (
    <div className="space-y-6">
      <SummaryTiles summary={summary} />
      <Charts summary={summary} />
    </div>
  );
};

export default DashboardPage;


// \pages\EmployeeDetailPage.jsx

import { useParams } from "react-router-dom";

const EmployeeDetailPage = () => {
  const { id } = useParams();
  return (
    <div>
      <h1>Employee Detail Page</h1>
      <p>Params: {JSON.stringify({ id })}</p>
    </div>
  );
};

export default EmployeeDetailPage;


// \pages\EmployeesPage.jsx

const EmployeesPage = () => (
  <div>
    <h1>Employees Page</h1>
  </div>
);

export default EmployeesPage;


// \pages\GeographyPage.jsx

import { useLocation } from "react-router-dom";

const GeographyPage = () => {
  const { search } = useLocation();
  return (
    <div>
      <h1>Geography Page</h1>
      <p>Query: {search}</p>
    </div>
  );
};

export default GeographyPage;


// \pages\InventoryDeliveryPage.jsx

const InventoryDeliveryPage = () => (
  <div>
    <h1>Inventory Delivery Page</h1>
  </div>
);

export default InventoryDeliveryPage;


// \pages\InventoryReceivePage.jsx

const InventoryReceivePage = () => (
  <div>
    <h1>Inventory Receive Page</h1>
  </div>
);

export default InventoryReceivePage;


// \pages\InventoryTransferPage.jsx

const InventoryTransferPage = () => (
  <div>
    <h1>Inventory Transfer Page</h1>
  </div>
);

export default InventoryTransferPage;


// \pages\LoginPage.jsx

import { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { login } from "../features/auth/authSlice";
import Logo from "../assets/images/logo.png";

const LoginPage = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const { loggedIn, error } = useSelector((state) => state.auth);
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();
    dispatch(login({ username, password }));
  };

  useEffect(() => {
    if (loggedIn) {
      navigate("/");
    }
  }, [loggedIn, navigate]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white w-full max-w-md p-8 rounded-2xl shadow-xl">
        <div className="flex justify-center mb-6">
          <img src={Logo} alt="Logo" className="h-12" />
        </div>
        <h2 className="text-2xl font-semibold text-gray-800 text-center mb-8">
          Welcome Back
        </h2>
        <form className="space-y-6" onSubmit={(e) => handleSubmit(e)}>
          <div>
            <label
              htmlFor="username"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Login
            </label>
            <input
              type="text"
              id="username"
              name="username"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 transition"
              placeholder="Login"
              onChange={(e) => setUsername(e.target.value)}
            />
          </div>
          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Password
            </label>
            <input
              type="password"
              id="password"
              name="password"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 transition"
              placeholder="Password"
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>
          {error && <p style={{ color: "red" }}>{error}</p>}
          <button
            type="submit"
            className="w-full py-3 bg-gradient-to-r from-pink-500 to-pink-400 text-white font-medium rounded-lg shadow-md hover:from-pink-600 hover:to-pink-500 transition duration-300"
          >
            Log in
          </button>
        </form>
      </div>
    </div>
  );
};

export default LoginPage;


// \pages\ProductDetailPage.jsx

import { useParams, useLocation } from "react-router-dom";

const ProductDetailPage = () => {
  const { id } = useParams();
  const { search } = useLocation();
  return (
    <div>
      <h1>Product Detail Page</h1>
      <p>Params: {JSON.stringify({ id })}</p>
      <p>Query: {search}</p>
    </div>
  );
};

export default ProductDetailPage;


// \pages\ProductsPage.jsx

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link } from "react-router-dom";
import {
  fetchProducts,
  deleteProduct,
} from "../features/products/productsSlice";
import { fetchCategories } from "../features/categories/categoriesSlice";
import { FaSearch, FaPlus, FaEye, FaTrash, FaEdit } from "react-icons/fa";

const ProductsPage = () => {
  const dispatch = useDispatch();
  const {
    list: products,
    status,
    error,
  } = useSelector((state) => state.products);
  const { list: categories } = useSelector((state) => state.categories);
  const selectedWarehouse = useSelector((state) => state.selectedWarehouse);

  const [searchTerm, setSearchTerm] = useState("");
  const [categoryFilter, setCategoryFilter] = useState("");

  useEffect(() => {
    dispatch(fetchCategories());
  }, [dispatch]);

  useEffect(() => {
    dispatch(
      fetchProducts({
        name: searchTerm || undefined,
        categoryId: categoryFilter || undefined,
        warehouseId: selectedWarehouse || undefined,
      })
    );
  }, [dispatch, searchTerm, categoryFilter, selectedWarehouse]);

  const handleSearch = (e) => {
    e.preventDefault();
  };

  const handleDelete = (id) => {
    if (window.confirm("Are you sure you want to delete this product?")) {
      dispatch(deleteProduct(id));
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-semibold">Products</h1>
        <Link
          to="/products/new"
          className="flex items-center bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition"
        >
          <FaPlus className="mr-2" /> New Product
        </Link>
      </div>

      <form
        onSubmit={handleSearch}
        className="flex flex-wrap gap-4 items-center"
      >
        <div className="flex items-center border rounded-lg px-3 py-2">
          <FaSearch className="text-gray-500 mr-2" />
          <input
            type="text"
            placeholder="Search by name..."
            className="focus:outline-none"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>

        <select
          className="border rounded-lg px-3 py-2"
          value={categoryFilter}
          onChange={(e) => setCategoryFilter(e.target.value)}
        >
          <option value="">All Categories</option>
          {categories.map((cat) => (
            <option key={cat.categoryId} value={cat.categoryId}>
              {cat.name}
            </option>
          ))}
        </select>
      </form>

      {status === "loading" || status === "idle" ? (
        <p>Loading...</p>
      ) : status === "failed" ? (
        <p className="text-red-500">Error: {error}</p>
      ) : (
        <div className="bg-white rounded-lg shadow overflow-auto">
          {/* Header */}
          <div className="hidden sm:grid grid-cols-6 gap-4 p-4 bg-gray-50 text-xs font-medium text-gray-500 uppercase tracking-wider">
            <div>Name</div>
            <div>Category</div>
            <div className="text-right">Price</div>
            <div className="text-right">In Stock</div>
            <div className="text-right">Transactions</div>
            <div className="text-center">Actions</div>
          </div>
          {/* Rows */}
          <div className="divide-y divide-gray-200">
            {products.map((product) => (
              <div
                key={product.productId}
                className="grid grid-cols-1 sm:grid-cols-6 items-center gap-4 p-4 hover:bg-pink-50 transition-colors"
              >
                <div>
                  <Link
                    to={`/products/${product.productId}`}
                    className="text-pink-600 hover:underline font-medium"
                  >
                    {product.name}
                  </Link>
                </div>
                <div className="text-sm text-gray-700">
                  {product.categoryName}
                </div>
                <div className="text-sm text-gray-700 text-right">
                  ${product.unitPrice.toFixed(2)}
                </div>
                <div className="text-sm text-gray-700 text-right">
                  {product.inventoryCount}
                </div>
                <div className="text-sm text-gray-700 text-right">
                  {product.transactionsCount}
                </div>
                <div className="flex justify-center space-x-4 text-gray-600">
                  <Link to={`/products/${product.productId}`}>
                    <FaEye />
                  </Link>
                  <Link to={`/products/${product.productId}/edit`}>
                    <FaEdit />
                  </Link>
                  <button onClick={() => handleDelete(product.productId)}>
                    <FaTrash />
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductsPage;


// \pages\SupplierDetailPage.jsx

import { useParams } from "react-router-dom";

const SupplierDetailPage = () => {
  const { id } = useParams();
  return (
    <div>
      <h1>Supplier Detail Page</h1>
      <p>Params: {JSON.stringify({ id })}</p>
    </div>
  );
};

export default SupplierDetailPage;


// \pages\SuppliersPage.jsx

const SuppliersPage = () => (
  <div>
    <h1>Suppliers Page</h1>
  </div>
);

export default SuppliersPage;


// \pages\TransactionDetailPage.jsx

import { useParams } from "react-router-dom";

const TransactionDetailPage = () => {
  const { id } = useParams();
  return (
    <div>
      <h1>Transaction Detail Page</h1>
      <p>Params: {JSON.stringify({ id })}</p>
    </div>
  );
};

export default TransactionDetailPage;


// \pages\TransactionsPage.jsx

import { useLocation } from "react-router-dom";

const TransactionsPage = () => {
  const { search } = useLocation();
  return (
    <div>
      <h1>Transactions Page</h1>
      <p>Query: {search}</p>
    </div>
  );
};

export default TransactionsPage;


// \pages\WarehouseDetailPage.jsx

import { useParams } from "react-router-dom";

const WarehouseDetailPage = () => {
  const { id } = useParams();
  return (
    <div>
      <h1>Warehouse Detail Page</h1>
      <p>Params: {JSON.stringify({ id })}</p>
    </div>
  );
};

export default WarehouseDetailPage;


// \pages\WarehousesPage.jsx

const WarehousesPage = () => (
  <div>
    <h1>Warehouses Page</h1>
  </div>
);

export default WarehousesPage;


// \routes\AppRouter.jsx

import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import LoginPage from "../pages/LoginPage";
import DashboardPage from "../pages/DashboardPage";
import ProductsPage from "../pages/ProductsPage";
import ProductDetailPage from "../pages/ProductDetailPage";
import CategoriesPage from "../pages/CategoriesPage";
import WarehousesPage from "../pages/WarehousesPage";
import WarehouseDetailPage from "../pages/WarehouseDetailPage";
import InventoryReceivePage from "../pages/InventoryReceivePage";
import InventoryTransferPage from "../pages/InventoryTransferPage";
import InventoryDeliveryPage from "../pages/InventoryDeliveryPage";
import TransactionsPage from "../pages/TransactionsPage";
import TransactionDetailPage from "../pages/TransactionDetailPage";
import ClientsPage from "../pages/ClientsPage";
import ClientDetailPage from "../pages/ClientDetailPage";
import SuppliersPage from "../pages/SuppliersPage";
import SupplierDetailPage from "../pages/SupplierDetailPage";
import EmployeesPage from "../pages/EmployeesPage";
import EmployeeDetailPage from "../pages/EmployeeDetailPage";
import GeographyPage from "../pages/GeographyPage";
import ProtectedRoute from "../components/Layout/ProtectedRoute";
import Layout from "../components/Layout/Layout";
import DefaultRedirect from "../components/Layout/DefaultRedirect";

const AppRouter = () => (
  <Router>
    <Routes>
      <Route path="/login" element={<LoginPage />} />
      <Route
        path="/*"
        element={
          <ProtectedRoute>
            <Layout>
              <Routes>
                <Route index element={<DashboardPage />} />
                <Route path="products" element={<ProductsPage />} />
                <Route path="products/:id" element={<ProductDetailPage />} />
                <Route path="categories" element={<CategoriesPage />} />
                <Route path="warehouses" element={<WarehousesPage />} />
                <Route
                  path="warehouses/:id"
                  element={<WarehouseDetailPage />}
                />
                <Route
                  path="inventory/receive"
                  element={<InventoryReceivePage />}
                />
                <Route
                  path="inventory/transfer"
                  element={<InventoryTransferPage />}
                />
                <Route
                  path="inventory/delivery"
                  element={<InventoryDeliveryPage />}
                />
                <Route path="transactions" element={<TransactionsPage />} />
                <Route
                  path="transactions/:id"
                  element={<TransactionDetailPage />}
                />
                <Route path="clients" element={<ClientsPage />} />
                <Route path="clients/:id" element={<ClientDetailPage />} />
                <Route path="suppliers" element={<SuppliersPage />} />
                <Route path="suppliers/:id" element={<SupplierDetailPage />} />
                <Route path="employees" element={<EmployeesPage />} />
                <Route path="employees/:id" element={<EmployeeDetailPage />} />
                <Route path="geography" element={<GeographyPage />} />
                <Route path="*" element={<DefaultRedirect />} />
              </Routes>
            </Layout>
          </ProtectedRoute>
        }
      />
    </Routes>
  </Router>
);

export default AppRouter;


// \utils\apiClient.jsx

import axios from "axios";

const apiClient = axios.create({
  baseURL: import.meta.env.VITE_API_URL || "http://localhost:3000",
});

export default apiClient;


// \utils\authHeader.jsx



// \utils\dummyData.jsx

export const dummyDashboardSummary = {
  productsCount: 528,
  categoriesCount: 12,
  monthlyReceipts: 45,
  monthlyDeliveries: 38,
  lowStockCount: 7,
  topProduct: "SuperWidget",
  inventoryValue: 120000.0,
  turnoverLastWeek: 15000.0,
  lastReceiptDate: "2025-05-10T12:34:56Z",
  lastDeliveryDate: "2025-05-09T15:20:00Z",
  lastReceiptId: 1,
  lastDeliveryId: 1,
  topProductId: 1,
};

export const dummyCategories = [
  { categoryId: 1, name: "Electronics", description: "Gadgets" },
  { categoryId: 2, name: "Furniture", description: "Home & Office" },
];

export const dummyClients = [
  {
    clientId: 1,
    name: "Acme Corp",
    email: "contact@acme.com",
    phoneNumber: "123-456",
    address: "123 Elm St",
    transactionsCount: 5,
  },
];

export const dummyClientById = {
  clientId: 1,
  name: "Acme Corp",
  email: "contact@acme.com",
  phoneNumber: "123-456",
  address: {
    street: "Elm St",
    streetNumber: "123",
    postalCode: "00-001",
    city: "Metropolis",
    country: "USA",
    region: "North",
  },
  history: [],
};

export const dummyEmployees = [
  {
    employeeId: 1,
    name: "John",
    surname: "Doe",
    email: "john@doe.com",
    phoneNumber: "555-1234",
    position: "Manager",
    warehouseName: "Main",
    transactionsCount: 20,
  },
];

export const dummyEmployeeById = {
  employeeId: 1,
  name: "John",
  surname: "Doe",
  email: "john@doe.com",
  phoneNumber: "555-1234",
  position: "Manager",
  warehouseId: 1,
  warehouseName: "Main",
  transactionsCount: 20,
  history: [],
};

export const dummyRegions = [
  { regionId: 1, name: "North" },
  { regionId: 2, name: "South" },
];

export const dummyCountries = [
  { countryId: 1, name: "USA", regionId: 1 },
  { countryId: 2, name: "Canada", regionId: 1 },
];

export const dummyWarehouses = [
  {
    warehouseId: 1,
    name: "Main",
    capacity: 1000,
    occupiedCapacity: 450,
    address: "123 Elm St",
    employeesCount: 5,
    productsCount: 100,
    transactionsCount: 20,
  },
];

export const dummyWarehouseById = {
  warehouseId: 1,
  name: "Main",
  capacity: 1000,
  occupiedCapacity: 450,
  address: "123 Elm St",
  employees: [],
  products: [],
  transactions: [],
  occupancyHistory: [],
};

export const dummyProducts = [
  {
    productId: 1,
    name: "Widget",
    description: "A useful widget",
    unitPrice: 9.99,
    unitSize: 1.0,
    categoryName: "Gadgets",
    inventoryCount: 100,
    transactionsCount: 20,
  },
  {
    productId: 1,
    name: "Widget",
    description: "A useful widget",
    unitPrice: 9.99,
    unitSize: 1.0,
    categoryName: "Gadgets",
    inventoryCount: 100,
    transactionsCount: 20,
  },
  {
    productId: 1,
    name: "Widget",
    description: "A useful widget",
    unitPrice: 9.99,
    unitSize: 1.0,
    categoryName: "Gadgets",
    inventoryCount: 100,
    transactionsCount: 20,
  },
];

export const dummyProductById = {
  productId: 1,
  name: "Widget",
  description: "A useful widget",
  unitPrice: 9.99,
  unitSize: 1.0,
  categoryName: "Gadgets",
  inventory: { 1: 50 },
  transactions: [],
};

export const dummyLowStock = [1, 2, 3];
export const dummyBestSelling = [1, 2, 3];

export const dummySuppliers = [
  {
    supplierId: 1,
    name: "SupplyCo",
    email: "trade@supplyco.com",
    phoneNumber: "555-6789",
    address: "456 Oak St",
    transactionsCount: 8,
  },
];

export const dummySupplierById = {
  supplierId: 1,
  name: "SupplyCo",
  email: "trade@supplyco.com",
  phoneNumber: "555-6789",
  address: {
    street: "Oak St",
    streetNumber: "456",
    postalCode: "00-002",
    city: "Gotham",
    country: "USA",
    region: "East",
  },
  history: [],
};

export const dummyTransactions = [
  {
    transactionId: 1,
    date: "2025-05-01",
    description: "Order 1",
    type: "WAREHOUSE_TO_CLIENT",
    employeeId: 1,
    fromWarehouseId: 1,
    toWarehouseId: 1,
    clientId: 1,
    supplierId: 1,
    totalPrice: 1500.0,
  },
];

export const dummyTransactionById = {
  transactionId: 1,
  date: "2025-05-01",
  description: "Order 1",
  type: "WAREHOUSE_TO_CLIENT",
  employeeId: 1,
  fromWarehouseId: 1,
  toWarehouseId: 1,
  clientId: 1,
  products: [],
};


// \utils\helpers.jsx



