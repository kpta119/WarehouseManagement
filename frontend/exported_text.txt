// \src\App.jsx

import { Provider } from "react-redux";
import store from "./app/store";
import AppRouter from "./routes/AppRouter";
import "./assets/styles/global.css";

const App = () => (
  <Provider store={store}>
    <AppRouter />
  </Provider>
);

export default App;


// \src\index.jsx

import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./assets/styles/global.css";
import App from "./App.jsx";

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <App />
  </StrictMode>
);


// \src\api\categories.jsx

import apiClient from "../utils/apiClient";

export const listCategories = () => apiClient.get("/api/categories");

export const createCategory = (data) => apiClient.post("/api/categories", data);

export const updateCategory = (categoryId, data) =>
  apiClient.put(`/api/categories/${categoryId}`, data);

export const deleteCategory = (categoryId) =>
  apiClient.delete(`/api/categories/${categoryId}`);


// \src\api\clients.jsx

import apiClient from "../utils/apiClient";

export const listClients = () => apiClient.get("/api/clients");

export const getClientById = (clientId) =>
  apiClient.get(`/api/clients/${clientId}`);

export const createClient = (data) => apiClient.post("/api/clients", data);


// \src\api\dashboard.jsx

import apiClient from "../utils/apiClient";

export const getDashboardSummary = (warehouseId) =>
  apiClient.get("/api/dashboard/summary", { params: { warehouseId } });


// \src\api\employees.jsx

import apiClient from "../utils/apiClient";

export const listEmployees = (params) =>
  apiClient.get("/api/employees", { params });

export const getEmployeeById = (employeeId) =>
  apiClient.get(`/api/employees/${employeeId}`);

export const createEmployee = (data) => apiClient.post("/api/employees", data);


// \src\api\geography.jsx

import apiClient from "../utils/apiClient";

export const listRegions = () => apiClient.get("/api/regions");

export const listCountries = (regionId) =>
  apiClient.get("/api/countries", { params: { regionId } });

export const createAddress = (data) => apiClient.post("/api/addresses", data);


// \src\api\inventory.jsx

import apiClient from "../utils/apiClient";

export const receiveFromSupplier = (data) =>
  apiClient.post("/api/inventory/receive", data);

export const transferBetweenWarehouses = (data) =>
  apiClient.post("/api/inventory/transfer", data);

export const deliverToClient = (data) =>
  apiClient.post("/api/inventory/delivery", data);


// \src\api\products.jsx

import apiClient from "../utils/apiClient";

export const searchProducts = (params) =>
  apiClient.get("/api/products/search", { params });

export const getProductById = (productId) =>
  apiClient.get(`/api/products/${productId}`);

export const getLowStockProducts = (warehouseId) =>
  apiClient.get("/api/products/low-stock", { params: { warehouseId } });

export const getBestSelling = ({ warehouseId, period }) =>
  apiClient.get("/api/products/best-selling", {
    params: { warehouseId, period },
  });

export const createProduct = (data) => apiClient.post("/api/products", data);

export const updateProduct = (productId, data) =>
  apiClient.put(`/api/products/${productId}`, data);

export const deleteProduct = (productId) =>
  apiClient.delete(`/api/products/${productId}`);


// \src\api\suppliers.jsx

import apiClient from "../utils/apiClient";

export const listSuppliers = () => apiClient.get("/api/suppliers");

export const getSupplierById = (supplierId) =>
  apiClient.get(`/api/suppliers/${supplierId}`);

export const createSupplier = (data) => apiClient.post("/api/suppliers", data);


// \src\api\transactions.jsx

import apiClient from "../utils/apiClient";

export const listTransactions = (params) =>
  apiClient.get("/api/transactions", { params });

export const getTransactionById = (transactionId) =>
  apiClient.get(`/api/transactions/${transactionId}`);


// \src\api\warehouses.jsx

import apiClient from "../utils/apiClient";

export const listWarehouses = () => apiClient.get("/api/warehouses");

export const getWarehouseById = (warehouseId) =>
  apiClient.get(`/api/warehouses/${warehouseId}`);

export const createWarehouse = (data) =>
  apiClient.post("/api/warehouses", data);

export const updateWarehouse = (warehouseId, data) =>
  apiClient.put(`/api/warehouses/${warehouseId}`, data);

export const deleteWarehouse = (warehouseId) =>
  apiClient.delete(`/api/warehouses/${warehouseId}`);


// \src\app\rootReducer.jsx

import { combineReducers } from "redux";
import authReducer from "../features/auth/authSlice";
import productsReducer from "../features/products/productsSlice";
import categoriesReducer from "../features/categories/categoriesSlice";
import warehousesReducer from "../features/warehouses/warehousesSlice";
import receiveReducer from "../features/inventory/receiveSlice";
import transferReducer from "../features/inventory/transferSlice";
import deliveryReducer from "../features/inventory/deliverySlice";
import transactionsReducer from "../features/transactions/transactionsSlice";
import clientsReducer from "../features/clients/clientsSlice";
import suppliersReducer from "../features/suppliers/suppliersSlice";
import employeesReducer from "../features/employees/employeesSlice";
import summaryReducer from "../features/dashboard/summarySlice";

export default combineReducers({
  auth: authReducer,
  products: productsReducer,
  categories: categoriesReducer,
  warehouses: warehousesReducer,
  inventory: combineReducers({
    receive: receiveReducer,
    transfer: transferReducer,
    delivery: deliveryReducer,
  }),
  transactions: transactionsReducer,
  clients: clientsReducer,
  suppliers: suppliersReducer,
  employees: employeesReducer,
  dashboard: summaryReducer,
});


// \src\app\store.jsx

import { configureStore } from "@reduxjs/toolkit";
import rootReducer from "./rootReducer";

const store = configureStore({
  reducer: rootReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: false,
    }),
});

export default store;


// \src\components\Dashboard\Charts.jsx



// \src\components\Dashboard\SummaryTiles.jsx



// \src\components\Forms\CategoryForm.jsx



// \src\components\Forms\ClientForm.jsx



// \src\components\Forms\EmployeeForm.jsx



// \src\components\Forms\InventoryForm.jsx



// \src\components\Forms\ProductForm.jsx



// \src\components\Forms\SupplierForm.jsx



// \src\components\Forms\TransactionFilter.jsx



// \src\components\Forms\WarehouseForm.jsx



// \src\components\Geography\AddressForm.jsx



// \src\components\Geography\CountriesList.jsx



// \src\components\Geography\RegionsList.jsx



// \src\components\Layout\DefaultRedirect.jsx

import { useSelector } from "react-redux";
import { Navigate } from "react-router-dom";

const DefaultRedirect = () => {
  const loggedIn = useSelector((state) => state.auth.loggedIn);
  return loggedIn ? (
    <Navigate to="/" replace />
  ) : (
    <Navigate to="/login" replace />
  );
};

export default DefaultRedirect;


// \src\components\Layout\Navbar.jsx



// \src\components\Layout\ProtectedRoute.jsx

import { Navigate } from "react-router-dom";
import { useSelector } from "react-redux";

const ProtectedRoute = ({ children }) => {
  const loggedIn = useSelector((state) => state.auth.loggedIn);
  return loggedIn ? children : <Navigate to="/login" />;
};

export default ProtectedRoute;


// \src\components\Layout\Sidebar.jsx



// \src\components\Tables\DataTable.jsx



// \src\components\Tables\Pagination.jsx



// \src\features\auth\authSlice.jsx

import { createSlice } from "@reduxjs/toolkit";

const authSlice = createSlice({
  name: "auth",
  initialState: { loggedIn: false, error: null },
  reducers: {
    login: (state, action) => {
      const { username, password } = action.payload;
      if (username === "admin" && password === "admin") {
        state.loggedIn = true;
        state.error = null;
      } else {
        state.loggedIn = false;
        state.error = "Nieprawidłowa nazwa lub hasło";
      }
    },
    logout: (state) => {
      state.loggedIn = false;
      state.error = null;
    },
  },
});

export const { login, logout } = authSlice.actions;
export default authSlice.reducer;


// \src\features\categories\categoriesSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as categoriesAPI from "../../api/categories";

export const fetchCategories = createAsyncThunk(
  "categories/fetchAll",
  async () => {
    const response = await categoriesAPI.listCategories();
    return response.data;
  }
);
export const createCategory = createAsyncThunk(
  "categories/create",
  async (data) => {
    const response = await categoriesAPI.createCategory(data);
    return response.data;
  }
);
export const updateCategory = createAsyncThunk(
  "categories/update",
  async ({ id, data }) => {
    const response = await categoriesAPI.updateCategory(id, data);
    return response.data;
  }
);
export const deleteCategory = createAsyncThunk(
  "categories/delete",
  async (id) => {
    await categoriesAPI.deleteCategory(id);
    return id;
  }
);

const categoriesSlice = createSlice({
  name: "categories",
  initialState: { list: [], status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchCategories.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchCategories.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchCategories.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(createCategory.fulfilled, (state, action) => {
        state.list.push(action.payload);
      })
      .addCase(updateCategory.fulfilled, (state, action) => {
        const idx = state.list.findIndex(
          (c) => c.categoryId === action.payload.categoryId
        );
        if (idx !== -1) state.list[idx] = action.payload;
      })
      .addCase(deleteCategory.fulfilled, (state, action) => {
        state.list = state.list.filter((c) => c.categoryId !== action.payload);
      });
  },
});

export default categoriesSlice.reducer;


// \src\features\clients\clientsSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as clientsAPI from "../../api/clients";

export const fetchClients = createAsyncThunk("clients/fetchAll", async () => {
  const response = await clientsAPI.listClients();
  return response.data;
});
export const fetchClientById = createAsyncThunk(
  "clients/fetchById",
  async (id) => {
    const response = await clientsAPI.getClientById(id);
    return response.data;
  }
);
export const createClient = createAsyncThunk("clients/create", async (data) => {
  const response = await clientsAPI.createClient(data);
  return response.data;
});

const clientsSlice = createSlice({
  name: "clients",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchClients.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchClients.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchClients.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchClientById.fulfilled, (state, action) => {
        state.current = action.payload;
      })
      .addCase(createClient.fulfilled, (state, action) => {
        state.list.push(action.payload);
      });
  },
});

export default clientsSlice.reducer;


// \src\features\dashboard\summarySlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { getDashboardSummary } from "../../api/dashboard";

export const fetchDashboardSummary = createAsyncThunk(
  "dashboard/fetchSummary",
  async (warehouseId) => {
    const response = await getDashboardSummary(warehouseId);
    return response.data;
  }
);

const summarySlice = createSlice({
  name: "dashboard",
  initialState: { data: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchDashboardSummary.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchDashboardSummary.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.data = action.payload;
      })
      .addCase(fetchDashboardSummary.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      });
  },
});

export default summarySlice.reducer;


// \src\features\employees\employeesSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as employeesAPI from "../../api/employees";

export const fetchEmployees = createAsyncThunk(
  "employees/fetchAll",
  async (params) => {
    const response = await employeesAPI.listEmployees(params);
    return response.data;
  }
);
export const fetchEmployeeById = createAsyncThunk(
  "employees/fetchById",
  async (id) => {
    const response = await employeesAPI.getEmployeeById(id);
    return response.data;
  }
);
export const createEmployee = createAsyncThunk(
  "employees/create",
  async (data) => {
    const response = await employeesAPI.createEmployee(data);
    return response.data;
  }
);

const employeesSlice = createSlice({
  name: "employees",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchEmployees.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchEmployees.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchEmployees.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchEmployeeById.fulfilled, (state, action) => {
        state.current = action.payload;
      })
      .addCase(createEmployee.fulfilled, (state, action) => {
        state.list.push(action.payload);
      });
  },
});

export default employeesSlice.reducer;


// \src\features\inventory\deliverySlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { deliverToClient } from "../../api/inventory";

export const deliverInventory = createAsyncThunk(
  "inventory/deliver",
  async (data) => {
    const response = await deliverToClient(data);
    return response.data;
  }
);

const deliverySlice = createSlice({
  name: "inventoryDelivery",
  initialState: { status: "idle", error: null, transaction: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(deliverInventory.pending, (state) => {
        state.status = "loading";
      })
      .addCase(deliverInventory.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.transaction = action.payload;
      })
      .addCase(deliverInventory.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      });
  },
});

export default deliverySlice.reducer;


// \src\features\inventory\receiveSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { receiveFromSupplier } from "../../api/inventory";

export const receiveInventory = createAsyncThunk(
  "inventory/receive",
  async (data) => {
    const response = await receiveFromSupplier(data);
    return response.data;
  }
);

const receiveSlice = createSlice({
  name: "inventoryReceive",
  initialState: { status: "idle", error: null, transaction: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(receiveInventory.pending, (state) => {
        state.status = "loading";
      })
      .addCase(receiveInventory.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.transaction = action.payload;
      })
      .addCase(receiveInventory.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      });
  },
});

export default receiveSlice.reducer;


// \src\features\inventory\transferSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { transferBetweenWarehouses } from "../../api/inventory";

export const transferInventory = createAsyncThunk(
  "inventory/transfer",
  async (data) => {
    const response = await transferBetweenWarehouses(data);
    return response.data;
  }
);

const transferSlice = createSlice({
  name: "inventoryTransfer",
  initialState: { status: "idle", error: null, transaction: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(transferInventory.pending, (state) => {
        state.status = "loading";
      })
      .addCase(transferInventory.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.transaction = action.payload;
      })
      .addCase(transferInventory.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      });
  },
});

export default transferSlice.reducer;


// \src\features\products\productsSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as productsAPI from "../../api/products";

export const fetchProducts = createAsyncThunk(
  "products/fetchAll",
  async (params) => {
    const response = await productsAPI.searchProducts(params);
    return response.data;
  }
);
export const fetchProductById = createAsyncThunk(
  "products/fetchById",
  async (id) => {
    const response = await productsAPI.getProductById(id);
    return response.data;
  }
);
export const createProduct = createAsyncThunk(
  "products/create",
  async (data) => {
    const response = await productsAPI.createProduct(data);
    return response.data;
  }
);
export const updateProduct = createAsyncThunk(
  "products/update",
  async ({ id, data }) => {
    const response = await productsAPI.updateProduct(id, data);
    return response.data;
  }
);
export const deleteProduct = createAsyncThunk("products/delete", async (id) => {
  await productsAPI.deleteProduct(id);
  return id;
});

const productsSlice = createSlice({
  name: "products",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchProducts.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchProducts.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchProducts.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchProductById.fulfilled, (state, action) => {
        state.current = action.payload;
      })
      .addCase(createProduct.fulfilled, (state, action) => {
        state.list.push(action.payload);
      })
      .addCase(updateProduct.fulfilled, (state, action) => {
        const idx = state.list.findIndex(
          (p) => p.productId === action.payload.productId
        );
        if (idx !== -1) state.list[idx] = action.payload;
      })
      .addCase(deleteProduct.fulfilled, (state, action) => {
        state.list = state.list.filter((p) => p.productId !== action.payload);
      });
  },
});

export default productsSlice.reducer;


// \src\features\suppliers\suppliersSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as suppliersAPI from "../../api/suppliers";

export const fetchSuppliers = createAsyncThunk(
  "suppliers/fetchAll",
  async () => {
    const response = await suppliersAPI.listSuppliers();
    return response.data;
  }
);
export const fetchSupplierById = createAsyncThunk(
  "suppliers/fetchById",
  async (id) => {
    const response = await suppliersAPI.getSupplierById(id);
    return response.data;
  }
);
export const createSupplier = createAsyncThunk(
  "suppliers/create",
  async (data) => {
    const response = await suppliersAPI.createSupplier(data);
    return response.data;
  }
);

const suppliersSlice = createSlice({
  name: "suppliers",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchSuppliers.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchSuppliers.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchSuppliers.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchSupplierById.fulfilled, (state, action) => {
        state.current = action.payload;
      })
      .addCase(createSupplier.fulfilled, (state, action) => {
        state.list.push(action.payload);
      });
  },
});

export default suppliersSlice.reducer;


// \src\features\transactions\transactionsSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as transactionsAPI from "../../api/transactions";

export const fetchTransactions = createAsyncThunk(
  "transactions/fetchAll",
  async (params) => {
    const response = await transactionsAPI.listTransactions(params);
    return response.data;
  }
);
export const fetchTransactionById = createAsyncThunk(
  "transactions/fetchById",
  async (id) => {
    const response = await transactionsAPI.getTransactionById(id);
    return response.data;
  }
);

const transactionsSlice = createSlice({
  name: "transactions",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchTransactions.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchTransactions.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchTransactions.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchTransactionById.fulfilled, (state, action) => {
        state.current = action.payload;
      });
  },
});

export default transactionsSlice.reducer;


// \src\features\warehouses\warehousesSlice.jsx

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as warehousesAPI from "../../api/warehouses";

export const fetchWarehouses = createAsyncThunk(
  "warehouses/fetchAll",
  async () => {
    const response = await warehousesAPI.listWarehouses();
    return response.data;
  }
);
export const fetchWarehouseById = createAsyncThunk(
  "warehouses/fetchById",
  async (id) => {
    const response = await warehousesAPI.getWarehouseById(id);
    return response.data;
  }
);
export const createWarehouse = createAsyncThunk(
  "warehouses/create",
  async (data) => {
    const response = await warehousesAPI.createWarehouse(data);
    return response.data;
  }
);
export const updateWarehouse = createAsyncThunk(
  "warehouses/update",
  async ({ id, data }) => {
    const response = await warehousesAPI.updateWarehouse(id, data);
    return response.data;
  }
);
export const deleteWarehouse = createAsyncThunk(
  "warehouses/delete",
  async (id) => {
    await warehousesAPI.deleteWarehouse(id);
    return id;
  }
);

const warehousesSlice = createSlice({
  name: "warehouses",
  initialState: { list: [], current: null, status: "idle", error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchWarehouses.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchWarehouses.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.list = action.payload;
      })
      .addCase(fetchWarehouses.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(fetchWarehouseById.fulfilled, (state, action) => {
        state.current = action.payload;
      })
      .addCase(createWarehouse.fulfilled, (state, action) => {
        state.list.push(action.payload);
      })
      .addCase(updateWarehouse.fulfilled, (state, action) => {
        const idx = state.list.findIndex(
          (w) => w.warehouseId === action.payload.warehouseId
        );
        if (idx !== -1) state.list[idx] = action.payload;
      })
      .addCase(deleteWarehouse.fulfilled, (state, action) => {
        state.list = state.list.filter((w) => w.warehouseId !== action.payload);
      });
  },
});

export default warehousesSlice.reducer;


// \src\pages\CategoriesPage.jsx

const CategoriesPage = () => (
  <div>
    <h1>Categories Page</h1>
  </div>
);

export default CategoriesPage;


// \src\pages\ClientDetailPage.jsx

import { useParams } from "react-router-dom";

const ClientDetailPage = () => {
  const { id } = useParams();
  return (
    <div>
      <h1>Client Detail Page</h1>
      <p>Params: {JSON.stringify({ id })}</p>
    </div>
  );
};

export default ClientDetailPage;


// \src\pages\ClientsPage.jsx

const ClientsPage = () => (
  <div>
    <h1>Clients Page</h1>
  </div>
);

export default ClientsPage;


// \src\pages\DashboardPage.jsx

const DashboardPage = () => (
  <div>
    <h1>Dashboard Page</h1>
  </div>
);

export default DashboardPage;


// \src\pages\EmployeeDetailPage.jsx

import { useParams } from "react-router-dom";

const EmployeeDetailPage = () => {
  const { id } = useParams();
  return (
    <div>
      <h1>Employee Detail Page</h1>
      <p>Params: {JSON.stringify({ id })}</p>
    </div>
  );
};

export default EmployeeDetailPage;


// \src\pages\EmployeesPage.jsx

const EmployeesPage = () => (
  <div>
    <h1>Employees Page</h1>
  </div>
);

export default EmployeesPage;


// \src\pages\GeographyPage.jsx

import { useLocation } from "react-router-dom";

const GeographyPage = () => {
  const { search } = useLocation();
  return (
    <div>
      <h1>Geography Page</h1>
      <p>Query: {search}</p>
    </div>
  );
};

export default GeographyPage;


// \src\pages\InventoryDeliveryPage.jsx

const InventoryDeliveryPage = () => (
  <div>
    <h1>Inventory Delivery Page</h1>
  </div>
);

export default InventoryDeliveryPage;


// \src\pages\InventoryReceivePage.jsx

const InventoryReceivePage = () => (
  <div>
    <h1>Inventory Receive Page</h1>
  </div>
);

export default InventoryReceivePage;


// \src\pages\InventoryTransferPage.jsx

const InventoryTransferPage = () => (
  <div>
    <h1>Inventory Transfer Page</h1>
  </div>
);

export default InventoryTransferPage;


// \src\pages\LoginPage.jsx

import { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { login } from "../features/auth/authSlice";
import Logo from "../assets/images/logo.png";

const LoginPage = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const { loggedIn, error } = useSelector((state) => state.auth);
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();
    dispatch(login({ username, password }));
  };

  useEffect(() => {
    if (loggedIn) {
      navigate("/");
    }
  }, [loggedIn, navigate]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white w-full max-w-md p-8 rounded-2xl shadow-xl">
        <div className="flex justify-center mb-6">
          <img src={Logo} alt="Logo" className="h-12" />
        </div>
        <h2 className="text-2xl font-semibold text-gray-800 text-center mb-8">
          Welcome Back
        </h2>
        <form className="space-y-6" onSubmit={(e) => handleSubmit(e)}>
          <div>
            <label
              htmlFor="username"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Login
            </label>
            <input
              type="text"
              id="username"
              name="username"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 transition"
              placeholder="Login"
              onChange={(e) => setUsername(e.target.value)}
            />
          </div>
          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Password
            </label>
            <input
              type="password"
              id="password"
              name="password"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 transition"
              placeholder="Password"
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>
          {error && <p style={{ color: "red" }}>{error}</p>}
          <button
            type="submit"
            className="w-full py-3 bg-gradient-to-r from-pink-500 to-pink-400 text-white font-medium rounded-lg shadow-md hover:from-pink-600 hover:to-pink-500 transition duration-300"
          >
            Log in
          </button>
        </form>
      </div>
    </div>
  );
};

export default LoginPage;


// \src\pages\ProductDetailPage.jsx

import { useParams, useLocation } from "react-router-dom";

const ProductDetailPage = () => {
  const { id } = useParams();
  const { search } = useLocation();
  return (
    <div>
      <h1>Product Detail Page</h1>
      <p>Params: {JSON.stringify({ id })}</p>
      <p>Query: {search}</p>
    </div>
  );
};

export default ProductDetailPage;


// \src\pages\ProductsPage.jsx

const ProductsPage = () => (
  <div>
    <h1>Products Page</h1>
  </div>
);

export default ProductsPage;


// \src\pages\SupplierDetailPage.jsx

import { useParams } from "react-router-dom";

const SupplierDetailPage = () => {
  const { id } = useParams();
  return (
    <div>
      <h1>Supplier Detail Page</h1>
      <p>Params: {JSON.stringify({ id })}</p>
    </div>
  );
};

export default SupplierDetailPage;


// \src\pages\SuppliersPage.jsx

const SuppliersPage = () => (
  <div>
    <h1>Suppliers Page</h1>
  </div>
);

export default SuppliersPage;


// \src\pages\TransactionDetailPage.jsx

import { useParams } from "react-router-dom";

const TransactionDetailPage = () => {
  const { id } = useParams();
  return (
    <div>
      <h1>Transaction Detail Page</h1>
      <p>Params: {JSON.stringify({ id })}</p>
    </div>
  );
};

export default TransactionDetailPage;


// \src\pages\TransactionsPage.jsx

import { useLocation } from "react-router-dom";

const TransactionsPage = () => {
  const { search } = useLocation();
  return (
    <div>
      <h1>Transactions Page</h1>
      <p>Query: {search}</p>
    </div>
  );
};

export default TransactionsPage;


// \src\pages\WarehouseDetailPage.jsx

import { useParams } from "react-router-dom";

const WarehouseDetailPage = () => {
  const { id } = useParams();
  return (
    <div>
      <h1>Warehouse Detail Page</h1>
      <p>Params: {JSON.stringify({ id })}</p>
    </div>
  );
};

export default WarehouseDetailPage;


// \src\pages\WarehousesPage.jsx

const WarehousesPage = () => (
  <div>
    <h1>Warehouses Page</h1>
  </div>
);

export default WarehousesPage;


// \src\routes\AppRouter.jsx

import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import LoginPage from "../pages/LoginPage";
import DashboardPage from "../pages/DashboardPage";
import ProductsPage from "../pages/ProductsPage";
import ProductDetailPage from "../pages/ProductDetailPage";
import CategoriesPage from "../pages/CategoriesPage";
import WarehousesPage from "../pages/WarehousesPage";
import WarehouseDetailPage from "../pages/WarehouseDetailPage";
import InventoryReceivePage from "../pages/InventoryReceivePage";
import InventoryTransferPage from "../pages/InventoryTransferPage";
import InventoryDeliveryPage from "../pages/InventoryDeliveryPage";
import TransactionsPage from "../pages/TransactionsPage";
import TransactionDetailPage from "../pages/TransactionDetailPage";
import ClientsPage from "../pages/ClientsPage";
import ClientDetailPage from "../pages/ClientDetailPage";
import SuppliersPage from "../pages/SuppliersPage";
import SupplierDetailPage from "../pages/SupplierDetailPage";
import EmployeesPage from "../pages/EmployeesPage";
import EmployeeDetailPage from "../pages/EmployeeDetailPage";
import GeographyPage from "../pages/GeographyPage";
import ProtectedRoute from "../components/Layout/ProtectedRoute";
import DefaultRedirect from "../components/Layout/DefaultRedirect";

const AppRouter = () => (
  <Router>
    <Routes>
      <Route path="/login" element={<LoginPage />} />
      <Route
        path="/"
        element={
          <ProtectedRoute>
            <DashboardPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/products"
        element={
          <ProtectedRoute>
            <ProductsPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/products/:id"
        element={
          <ProtectedRoute>
            <ProductDetailPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/categories"
        element={
          <ProtectedRoute>
            <CategoriesPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/warehouses"
        element={
          <ProtectedRoute>
            <WarehousesPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/warehouses/:id"
        element={
          <ProtectedRoute>
            <WarehouseDetailPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/inventory/receive"
        element={
          <ProtectedRoute>
            <InventoryReceivePage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/inventory/transfer"
        element={
          <ProtectedRoute>
            <InventoryTransferPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/inventory/delivery"
        element={
          <ProtectedRoute>
            <InventoryDeliveryPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/transactions"
        element={
          <ProtectedRoute>
            <TransactionsPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/transactions/:id"
        element={
          <ProtectedRoute>
            <TransactionDetailPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/clients"
        element={
          <ProtectedRoute>
            <ClientsPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/clients/:id"
        element={
          <ProtectedRoute>
            <ClientDetailPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/suppliers"
        element={
          <ProtectedRoute>
            <SuppliersPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/suppliers/:id"
        element={
          <ProtectedRoute>
            <SupplierDetailPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/employees"
        element={
          <ProtectedRoute>
            <EmployeesPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/employees/:id"
        element={
          <ProtectedRoute>
            <EmployeeDetailPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/geography"
        element={
          <ProtectedRoute>
            <GeographyPage />
          </ProtectedRoute>
        }
      />
      <Route path="*" element={<DefaultRedirect />} />
    </Routes>
  </Router>
);

export default AppRouter;


// \src\utils\apiClient.jsx

import axios from "axios";

const apiClient = axios.create({
  baseURL: import.meta.env.VITE_API_URL,
});

export default apiClient;


// \src\utils\authHeader.jsx



// \src\utils\helpers.jsx



